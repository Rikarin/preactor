declare namespace CS {
    namespace UnityEngine.UIElements {
        /** 
        Static class containing utility methods for aligning visual elements.
        */
        class AlignmentUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Round the value so that it is a whole number of pixels on the target when rendered.
            */
            public static RoundToPanelPixelSize ($ve: UnityEngine.UIElements.VisualElement, $v: number) : number
            /** 
            Return the next larger value representing a whole number of pixels on the target when rendered.
            */
            public static CeilToPanelPixelSize ($ve: UnityEngine.UIElements.VisualElement, $v: number) : number
            /** 
            Return the next smaller value representing a whole number of pixels on the target when rendered.
            */
            public static FloorToPanelPixelSize ($ve: UnityEngine.UIElements.VisualElement, $v: number) : number
        }
        /** 
        Interface for classes capable of having callbacks to handle events.
        */
        class CallbackEventHandler extends System.Object implements UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Sends an event to the event handler. 
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Return true if event handlers for the event propagation BubbleUp phase have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
        }
        interface IEventHandler
        {
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            HasBubbleUpHandlers () : boolean
        }
        /** 
        Base class for objects that can get the focus.
        */
        class Focusable extends UnityEngine.UIElements.CallbackEventHandler implements UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Return the focus controller for this element.
            */
            public get focusController(): UnityEngine.UIElements.FocusController;
            /** 
            True if the element can be focused.
            */
            public get focusable(): boolean;
            public set focusable(value: boolean);
            /** 
            An integer used to sort focusables in the focus ring. Must be greater than or equal to zero.
            */
            public get tabIndex(): number;
            public set tabIndex(value: number);
            /** 
            Whether the element should delegate the focus to its children.
            */
            public get delegatesFocus(): boolean;
            public set delegatesFocus(value: boolean);
            /** 
            Return true if the element can be focused.
            */
            public get canGrabFocus(): boolean;
            /** 
            Attempt to give the focus to this element.
            */
            public Focus () : void
            /** 
            Tell the element to release the focus.
            */
            public Blur () : void
        }
        /** 
        Base class for objects that are part of the UIElements visual tree.
        */
        class VisualElement extends UnityEngine.UIElements.Focusable implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of local disabled elements.
            */
            public static disabledUssClassName : string
            /** 
            Used for view data persistence, such as tree expanded states, scroll position, or zoom level.
            */
            public get viewDataKey(): string;
            public set viewDataKey(value: string);
            /** 
            This property can be used to associate application-specific user data with this VisualElement.
            */
            public get userData(): any;
            public set userData(value: any);
            public get canGrabFocus(): boolean;
            public get focusController(): UnityEngine.UIElements.FocusController;
            /** 
            Play-mode tint is applied by default unless this is set to true. It's applied hierarchically to this VisualElement and to all its children that exist on an editor panel.
            */
            public get disablePlayModeTint(): boolean;
            public set disablePlayModeTint(value: boolean);
            /** 
            A combination of hint values that specify high-level intended usage patterns for the VisualElement.
            This property can only be set when the VisualElement is not yet part of a Panel. Once part of a Panel, this property becomes effectively read-only, and attempts to change it will throw an exception.
            The specification of proper UsageHints drives the system to make better decisions on how to process or accelerate certain operations based on the anticipated usage pattern.
            Note that those hints do not affect behavioral or visual results, but only affect the overall performance of the panel and the elements within.
            It's advised to always consider specifying the proper UsageHints, but keep in mind that some UsageHints might be internally ignored under certain conditions (e.g. due to hardware limitations on the target platform).
            */
            public get usageHints(): UnityEngine.UIElements.UsageHints;
            public set usageHints(value: UnityEngine.UIElements.UsageHints);
            /** 
            Returns a transform object for this VisualElement.
            ITransform
            */
            public get transform(): UnityEngine.UIElements.ITransform;
            /** 
            Return the resulting scaling from the panel that considers the screen DPI and the customizable scaling factor, but not the transform scale of the element and its ancestors.
            See Panel.scaledPixelsPerPoint.
            This should only be called on elements that are part of a panel.
            */
            public get scaledPixelsPerPoint(): number;
            /** 
            The position and size of the VisualElement relative to its parent, as computed by the layout system. (Read Only)
            */
            public get layout(): UnityEngine.Rect;
            /** 
            The rectangle of the content area of the element, in the local space of the element. (Read Only)
            */
            public get contentRect(): UnityEngine.Rect;
            /** 
            Returns a Rect representing the Axis-aligned Bounding Box (AABB) after applying the world transform.
            */
            public get worldBound(): UnityEngine.Rect;
            /** 
            Returns a Rect representing the Axis-aligned Bounding Box (AABB) after applying the transform, but before applying the layout translation.
            */
            public get localBound(): UnityEngine.Rect;
            /** 
            Returns a matrix that cumulates the following operations (in order):
            -Local Scaling
            -Local Rotation
            -Local Translation
            -Layout Translation
            -Parent worldTransform (recursive definition - consider identity when there is no parent)
            */
            public get worldTransform(): UnityEngine.Matrix4x4;
            /** 
            Determines if this element can be pick during mouseEvents or IPanel.Pick queries.
            */
            public get pickingMode(): UnityEngine.UIElements.PickingMode;
            public set pickingMode(value: UnityEngine.UIElements.PickingMode);
            /** 
            The name of this VisualElement.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            Returns true if the VisualElement is enabled in its own hierarchy.
            */
            public get enabledInHierarchy(): boolean;
            /** 
            Returns true if the VisualElement is enabled locally.
            */
            public get enabledSelf(): boolean;
            public set enabledSelf(value: boolean);
            /** 
            Indicates the directionality of the element's text. The value will propagate to the element's children.
            */
            public get languageDirection(): UnityEngine.UIElements.LanguageDirection;
            public set languageDirection(value: UnityEngine.UIElements.LanguageDirection);
            /** 
            Indicates whether or not this element should be rendered.
            */
            public get visible(): boolean;
            public set visible(value: boolean);
            /** 
            Called when the VisualElement visual contents need to be (re)generated.
            */
            public get generateVisualContent(): System.Action$1<UnityEngine.UIElements.MeshGenerationContext>;
            public set generateVisualContent(value: System.Action$1<UnityEngine.UIElements.MeshGenerationContext>);
            /** 
            Assigns a data source to this VisualElement which overrides any inherited data source. This data source is
            inherited by all children.
            */
            public get dataSource(): any;
            public set dataSource(value: any);
            /** 
            Path from the data source to the value.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            public set dataSourcePath(value: Unity.Properties.PropertyPath);
            /** 
            The possible type of data source assignable to this VisualElement.
            This information is only used by the UI Builder as a hint to provide some completion to the data source path field when the effective data source cannot be specified at design time.
            */
            public get dataSourceType(): System.Type;
            public set dataSourceType(value: System.Type);
            /** 
            Returns the UIElements experimental interfaces.
            */
            public get experimental(): UnityEngine.UIElements.IExperimentalFeatures;
            /** 
            Access to this element physical hierarchy
            */
            public get hierarchy(): UnityEngine.UIElements.VisualElement.Hierarchy;
            /** 
            The parent of this VisualElement.
            */
            public get parent(): UnityEngine.UIElements.VisualElement;
            /** 
            The panel onto which this VisualElement is attached.
            */
            public get panel(): UnityEngine.UIElements.IPanel;
            /** 
            Child elements are added to it, usually this is the same as the element itself.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Stores the asset reference, if the generated element is cloned from a VisualTreeAsset.
            */
            public get visualTreeAssetSource(): UnityEngine.UIElements.VisualTreeAsset;
            /** 
            Number of child elements in this object's contentContainer.
            */
            public get childCount(): number;
            /** 
            Retrieves this VisualElement's IVisualElementScheduler
            */
            public get schedule(): UnityEngine.UIElements.IVisualElementScheduler;
            /** 
            Sets the style values on a VisualElement.
            */
            public get style(): UnityEngine.UIElements.IStyle;
            /** 
            The final rendered style values of a visual element, as it's rendered in the current frame.(Read Only)
            */
            public get resolvedStyle(): UnityEngine.UIElements.IResolvedStyle;
            /** 
            The custom style properties accessor of a VisualElement (Read Only).
            */
            public get customStyle(): UnityEngine.UIElements.ICustomStyle;
            /** 
            Returns a VisualElementStyleSheetSet that manipulates style sheets attached to this element.
            */
            public get styleSheets(): UnityEngine.UIElements.VisualElementStyleSheetSet;
            /** 
            Text to display inside an information box after the user hovers the element for a small amount of time. This is only supported in the Editor UI.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Changes the VisualElement enabled state. A disabled VisualElement does not receive most events.
            * @param $value New enabled state
            */
            public SetEnabled ($value: boolean) : void
            /** 
            Triggers a repaint of the VisualElement on the next frame.
            This method is called internally when a change occurs that requires a repaint, such as when UIElements.BaseField_1.value is changed or the text in a Label.
            If you are implementing a custom control, you can call this method to trigger a repaint when a change occurs that requires a repaint such as when using
            generateVisualContent to render a mesh and the mesh data has now changed.
            */
            public MarkDirtyRepaint () : void
            /** 
            Checks if the specified point intersects with this VisualElement's layout.
            * @param $localPoint The point in the local space of the element.
            * @returns Returns true if the point is contained within the element's layout. Otherwise, returns false. 
            */
            public ContainsPoint ($localPoint: UnityEngine.Vector2) : boolean
            public Overlaps ($rectangle: UnityEngine.Rect) : boolean
            /** 
            Retrieve the classes for this element.
            * @returns A class list. 
            */
            public GetClasses () : System.Collections.Generic.IEnumerable$1<string>
            /** 
            Removes all classes from the class list of this element.
            AddToClassList
            */
            public ClearClassList () : void
            /** 
            Adds a class to the class list of the element in order to assign styles from USS. Note the class name is case-sensitive.
            * @param $className The name of the class to add to the list.
            */
            public AddToClassList ($className: string) : void
            /** 
            Removes a class from the class list of the element.
            * @param $className The name of the class to remove to the list.
            */
            public RemoveFromClassList ($className: string) : void
            /** 
            Toggles between adding and removing the given class name from the class list.
            * @param $className The class name to add or remove from the class list.
            */
            public ToggleInClassList ($className: string) : void
            /** 
            Enables or disables the class with the given name.
            * @param $className The name of the class to enable or disable.
            * @param $enable A boolean flag that adds or removes the class name from the class list. If true, EnableInClassList adds the class name to the class list. If false, EnableInClassList removes the class name from the class list.
            */
            public EnableInClassList ($className: string, $enable: boolean) : void
            /** 
            Searches for a class in the class list of this element.
            * @param $cls The name of the class for the search query.
            * @returns Returns true if the class is part of the list. Otherwise, returns false. 
            */
            public ClassListContains ($cls: string) : boolean
            /** 
            Searches up the hierarchy of this VisualElement and retrieves stored userData, if any is found.
            */
            public FindAncestorUserData () : any
            /** 
            Assigns a binding between a target and a source.
            * @param $bindingId The binding ID.
            * @param $binding The binding object.
            */
            public SetBinding ($bindingId: UnityEngine.UIElements.BindingId, $binding: UnityEngine.UIElements.Binding) : void
            /** 
            Gets the binding instance for the provided targeted property.
            * @param $bindingId The binding ID.
            * @returns The binding instance, if it exists. 
            */
            public GetBinding ($bindingId: UnityEngine.UIElements.BindingId) : UnityEngine.UIElements.Binding
            /** 
            Gets the binding instance for the provided targeted property.
            * @param $bindingId The binding ID.
            * @param $binding When this method returns, contains the binding associated with the target property, if it exists; otherwise contains <see langword="null" />
            * @returns true if the binding exists; false otherwise. 
            */
            public TryGetBinding ($bindingId: UnityEngine.UIElements.BindingId, $binding: $Ref<UnityEngine.UIElements.Binding>) : boolean
            /** 
            Gets information on all the bindings of the current element.
            * @returns The bindings information. 
            */
            public GetBindingInfos () : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.BindingInfo>
            /** 
            Allows to know if a target property has a binding associated to it.
            * @param $bindingId The binding ID.
            * @returns true if the property has a binding; false otherwise. 
            */
            public HasBinding ($bindingId: UnityEngine.UIElements.BindingId) : boolean
            /** 
            Removes a binding from the element.
            * @param $bindingId The id of the binding to unbind on this element.
            */
            public ClearBinding ($bindingId: UnityEngine.UIElements.BindingId) : void
            /** 
            Removes all bindings from the element.
            */
            public ClearBindings () : void
            /** 
            Queries the dataSource and dataSourcePath inherited from the hierarchy.
            * @returns A context object with the hierarchical data source and data source path. 
            */
            public GetHierarchicalDataSourceContext () : UnityEngine.UIElements.DataSourceContext
            /** 
            Queries the dataSource and dataSourcePath of a binding object.
            * @param $bindingId The binding ID to query.
            * @returns A context object with the data source and data source path of a binding object. 
            */
            public GetDataSourceContext ($bindingId: UnityEngine.UIElements.BindingId) : UnityEngine.UIElements.DataSourceContext
            /** 
            Queries the dataSource and dataSourcePath of a binding object.
            * @param $bindingId The binding ID to query.
            * @param $context The resulting context object.
            * @returns Returns true if a binding with the provided id was registered on the element; false otherwise. 
            */
            public TryGetDataSourceContext ($bindingId: UnityEngine.UIElements.BindingId, $context: $Ref<UnityEngine.UIElements.DataSourceContext>) : boolean
            /** 
            Returns the last BindingResult of a binding object from the data source to the UI.
            * @param $bindingId The ID of the binding object.
            * @param $result The result of the last binding operation to the UI.
            * @returns true if the binding object has been updated; false otherwise. 
            */
            public TryGetLastBindingToUIResult ($bindingId: $Ref<UnityEngine.UIElements.BindingId>, $result: $Ref<UnityEngine.UIElements.BindingResult>) : boolean
            /** 
            Returns the last BindingResult of a binding object from the UI to the data source.
            * @param $bindingId The ID of the binding object.
            * @param $result The result of the last binding operation to the data source.
            * @returns true if the binding object has been updated; false otherwise. 
            */
            public TryGetLastBindingToSourceResult ($bindingId: $Ref<UnityEngine.UIElements.BindingId>, $result: $Ref<UnityEngine.UIElements.BindingResult>) : boolean
            /** 
            Add an element to this element's contentContainer
            */
            public Add ($child: UnityEngine.UIElements.VisualElement) : void
            /** 
            Insert an element into this element's contentContainer
            */
            public Insert ($index: number, $element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Removes this child from the contentContainerhierarchy.
            */
            public Remove ($element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Remove the child element located at this position from this element's contentContainer
            */
            public RemoveAt ($index: number) : void
            /** 
            Remove all child elements from this element's contentContainer
            */
            public Clear () : void
            /** 
            Retrieves the child element at a specific index.
            * @param $index The index of the element.
            */
            public ElementAt ($index: number) : UnityEngine.UIElements.VisualElement
            public get_Item ($key: number) : UnityEngine.UIElements.VisualElement
            /** 
            Retrieves the child index of the specified VisualElement.
            * @param $element The child element to retrieve.
            * @returns The index of the child, or -1 if the child is not found. 
            */
            public IndexOf ($element: UnityEngine.UIElements.VisualElement) : number
            /** 
            Returns the elements from its contentContainer.
            */
            public Children () : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.VisualElement>
            public Sort ($comp: System.Comparison$1<UnityEngine.UIElements.VisualElement>) : void
            /** 
            Brings this element to the end of its parent children list. The element will be visually in front of any overlapping sibling elements.
            */
            public BringToFront () : void
            /** 
            Sends this element to the beginning of its parent children list. The element will be visually behind any overlapping sibling elements.
            */
            public SendToBack () : void
            /** 
            Places this element right before the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually behind of its sibling.
            * @param $sibling The sibling element.
            */
            public PlaceBehind ($sibling: UnityEngine.UIElements.VisualElement) : void
            /** 
            Places this element right after the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually in front of its sibling.
            * @param $sibling The sibling element.
            */
            public PlaceInFront ($sibling: UnityEngine.UIElements.VisualElement) : void
            /** 
            Removes this element from its parent hierarchy.
            */
            public RemoveFromHierarchy () : void
            /** 
            Checks if this element is an ancestor of the specified child element.
            * @param $child The child element to test against.
            * @returns Returns true if this element is a ancestor of the child element, false otherwise. 
            */
            public Contains ($child: UnityEngine.UIElements.VisualElement) : boolean
            /** 
            Finds the lowest common ancestor between two VisualElements inside the VisualTree hierarchy.
            */
            public FindCommonAncestor ($other: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.VisualElement
            public constructor ()
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
        }
        interface IVisualElementScheduler
        {
            Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
        }
        interface IResolvedStyle
        {
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            alignContent : UnityEngine.UIElements.Align
            /** 
            Alignment of children on the cross axis of this container.
            */
            alignItems : UnityEngine.UIElements.Align
            /** 
            Similar to align-items, but only for this specific element.
            */
            alignSelf : UnityEngine.UIElements.Align
            /** 
            Background color to paint in the element's box.
            */
            backgroundColor : UnityEngine.Color
            /** 
            Background image to paint in the element's box.
            */
            backgroundImage : UnityEngine.UIElements.Background
            /** 
            Background image x position value.
            */
            backgroundPositionX : UnityEngine.UIElements.BackgroundPosition
            /** 
            Background image y position value.
            */
            backgroundPositionY : UnityEngine.UIElements.BackgroundPosition
            /** 
            Background image repeat value.
            */
            backgroundRepeat : UnityEngine.UIElements.BackgroundRepeat
            /** 
            Background image size value.
            */
            backgroundSize : UnityEngine.UIElements.BackgroundSize
            /** 
            Color of the element's bottom border.
            */
            borderBottomColor : UnityEngine.Color
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomLeftRadius : number
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomRightRadius : number
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            borderBottomWidth : number
            /** 
            Color of the element's left border.
            */
            borderLeftColor : UnityEngine.Color
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            borderLeftWidth : number
            /** 
            Color of the element's right border.
            */
            borderRightColor : UnityEngine.Color
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            borderRightWidth : number
            /** 
            Color of the element's top border.
            */
            borderTopColor : UnityEngine.Color
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopLeftRadius : number
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopRightRadius : number
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            borderTopWidth : number
            /** 
            Bottom distance from the element's box during layout.
            */
            bottom : number
            /** 
            Color to use when drawing the text of an element.
            */
            color : UnityEngine.Color
            /** 
            Defines how an element is displayed in the layout.
            */
            display : UnityEngine.UIElements.DisplayStyle
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            flexBasis : UnityEngine.UIElements.StyleFloat
            /** 
            Direction of the main axis to layout children in a container.
            */
            flexDirection : UnityEngine.UIElements.FlexDirection
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            flexGrow : number
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            flexShrink : number
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            flexWrap : UnityEngine.UIElements.Wrap
            /** 
            Font size to draw the element's text.
            */
            fontSize : number
            /** 
            Fixed height of an element for the layout.
            */
            height : number
            /** 
            Justification of children on the main axis of this container.
            */
            justifyContent : UnityEngine.UIElements.Justify
            /** 
            Left distance from the element's box during layout.
            */
            left : number
            /** 
            Increases or decreases the space between characters.
            */
            letterSpacing : number
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            marginBottom : number
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            marginLeft : number
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            marginRight : number
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            marginTop : number
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            maxHeight : UnityEngine.UIElements.StyleFloat
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            maxWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            minHeight : UnityEngine.UIElements.StyleFloat
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            minWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Specifies the transparency of an element and of its children.
            */
            opacity : number
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            paddingBottom : number
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            paddingLeft : number
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            paddingRight : number
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            paddingTop : number
            /** 
            Element's positioning in its parent container.
            */
            position : UnityEngine.UIElements.Position
            /** 
            Right distance from the element's box during layout.
            */
            right : number
            /** 
            A rotation transformation.
            */
            rotate : UnityEngine.UIElements.Rotate
            /** 
            A scaling transformation.
            */
            scale : UnityEngine.UIElements.Scale
            /** 
            The element's text overflow mode.
            */
            textOverflow : UnityEngine.UIElements.TextOverflow
            /** 
            Top distance from the element's box during layout.
            */
            top : number
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            transformOrigin : UnityEngine.Vector3
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            transitionDelay : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>
            /** 
            Time a transition animation should take to complete.
            */
            transitionDuration : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>
            /** 
            Properties to which a transition effect should be applied.
            */
            transitionProperty : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            transitionTimingFunction : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>
            /** 
            A translate transformation.
            */
            translate : UnityEngine.Vector3
            /** 
            Tinting color for the element's backgroundImage.
            */
            unityBackgroundImageTintColor : UnityEngine.Color
            /** 
            TextElement editor rendering mode.
            */
            unityEditorTextRenderingMode : UnityEngine.UIElements.EditorTextRenderingMode
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            unityFont : UnityEngine.Font
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            unityFontDefinition : UnityEngine.UIElements.FontDefinition
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            unityFontStyleAndWeight : UnityEngine.FontStyle
            /** 
            Increases or decreases the space between paragraphs.
            */
            unityParagraphSpacing : number
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            unitySliceBottom : number
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            unitySliceLeft : number
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            unitySliceRight : number
            /** 
            Scale applied to an element's slices.
            */
            unitySliceScale : number
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            unitySliceTop : number
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            unityTextAlign : UnityEngine.TextAnchor
            /** 
            Switches between Unity's standard and advanced text generator
            */
            unityTextGenerator : UnityEngine.TextGeneratorType
            /** 
            Outline color of the text.
            */
            unityTextOutlineColor : UnityEngine.Color
            /** 
            Outline width of the text.
            */
            unityTextOutlineWidth : number
            /** 
            The element's text overflow position.
            */
            unityTextOverflowPosition : UnityEngine.UIElements.TextOverflowPosition
            /** 
            Specifies whether or not an element is visible.
            */
            visibility : UnityEngine.UIElements.Visibility
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            whiteSpace : UnityEngine.UIElements.WhiteSpace
            /** 
            Fixed width of an element for the layout.
            */
            width : number
            /** 
            Increases or decreases the space between words.
            */
            wordSpacing : number
        }
        interface IExperimentalFeatures
        {
            /** 
            Returns the animation experimental interface.
            */
            animation : UnityEngine.UIElements.Experimental.ITransitionAnimations
        }
        interface ITransform
        {
            /** 
            The position of the VisualElement transform.
            */
            position : UnityEngine.Vector3
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            rotation : UnityEngine.Quaternion
            /** 
            The scale of the VisualElement transform.
            */
            scale : UnityEngine.Vector3
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            matrix : UnityEngine.Matrix4x4
        }
        /** 
        Options to enable or disable filters for the dynamic atlas.
        */
        enum DynamicAtlasFilters
        { None = 0, Readability = 1, Size = 2, Format = 4, ColorSpace = 8, FilterMode = 16 }
        /** 
        Delegate that can be used as a custom filter for the dynamic atlas.
        * @param $texture The texture to filter.
        * @param $filtersToApply The filters the dynamic atlas applies when the delegate returns <c>true<c>.
        by default, this value is equal to <see cref="DynamicAtlasSettings.activeFilters" >.
        * @returns 
        When false, the texture cannot be added to the atlas. When true the texture is added to the atlas,
        as long as it is not excluded by filtersToApply.
        */
        interface DynamicAtlasCustomFilter
        { 
        (texture: UnityEngine.Texture2D, filtersToApply: $Ref<UnityEngine.UIElements.DynamicAtlasFilters>) : boolean; 
        Invoke?: (texture: UnityEngine.Texture2D, filtersToApply: $Ref<UnityEngine.UIElements.DynamicAtlasFilters>) => boolean;
        }
        var DynamicAtlasCustomFilter: { new (func: (texture: UnityEngine.Texture2D, filtersToApply: $Ref<UnityEngine.UIElements.DynamicAtlasFilters>) => boolean): DynamicAtlasCustomFilter; }
        /** 
        Script interface for VisualElement background-position style property IStyle.BackgroundPosition.
        */
        class BackgroundPosition extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BackgroundPosition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Background position type
            */
            public keyword : UnityEngine.UIElements.BackgroundPositionKeyword
            /** 
            Background offset
            */
            public offset : UnityEngine.UIElements.Length
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.BackgroundPosition) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.BackgroundPosition, $style2: UnityEngine.UIElements.BackgroundPosition) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.BackgroundPosition, $style2: UnityEngine.UIElements.BackgroundPosition) : boolean
            public constructor ($keyword: UnityEngine.UIElements.BackgroundPositionKeyword)
            public constructor ($keyword: UnityEngine.UIElements.BackgroundPositionKeyword, $offset: UnityEngine.UIElements.Length)
        }
        /** 
        Defines the position of the background.
        */
        enum BackgroundPositionKeyword
        { Center = 0, Top = 1, Bottom = 2, Left = 3, Right = 4 }
        /** 
        Represents a distance value.
        */
        class Length extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Length>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The length value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The unit of the value property.
            */
            public get unit(): UnityEngine.UIElements.LengthUnit;
            public set unit(value: UnityEngine.UIElements.LengthUnit);
            /** 
            Creates a percentage Length from a float.
            * @returns The created length. 
            */
            public static Percent ($value: number) : UnityEngine.UIElements.Length
            /** 
            Creates an Auto Length Length.
            * @returns Auto length. 
            */
            public static Auto () : UnityEngine.UIElements.Length
            /** 
            Creates a None Length Length.
            * @returns None length. 
            */
            public static None () : UnityEngine.UIElements.Length
            /** 
            Check if Length is Auto.
            * @returns true if Length is Auto, false otherwise 
            */
            public IsAuto () : boolean
            /** 
            Check if Length is None.
            * @returns true if Length is None, false otherwise 
            */
            public IsNone () : boolean
            public static op_Implicit ($value: number) : UnityEngine.UIElements.Length
            public static op_Equality ($lhs: UnityEngine.UIElements.Length, $rhs: UnityEngine.UIElements.Length) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Length, $rhs: UnityEngine.UIElements.Length) : boolean
            public Equals ($other: UnityEngine.UIElements.Length) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($value: number)
            public constructor ($value: number, $unit: UnityEngine.UIElements.LengthUnit)
        }
        /** 
        Helper to convert between background properties and ScaleMode.
        */
        class BackgroundPropertyHelper extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Converts ScaleMode to the equivalent BackgroundPosition property.
            * @param $scaleMode The ScaleMode to convert.
            * @returns BackgroundPosition. 
            */
            public static ConvertScaleModeToBackgroundPosition ($scaleMode?: UnityEngine.ScaleMode) : UnityEngine.UIElements.BackgroundPosition
            /** 
            Converts ScaleMode to the equivalent BackgroundRepeat property.
            * @param $scaleMode The ScaleMode to convert.
            * @returns BackgroundRepeat. 
            */
            public static ConvertScaleModeToBackgroundRepeat ($scaleMode?: UnityEngine.ScaleMode) : UnityEngine.UIElements.BackgroundRepeat
            /** 
            Converts ScaleMode to the equivalent BackgroundSize property.
            * @param $scaleMode The ScaleMode to convert.
            * @returns BackgroundSize. 
            */
            public static ConvertScaleModeToBackgroundSize ($scaleMode?: UnityEngine.ScaleMode) : UnityEngine.UIElements.BackgroundSize
            /** 
            Resolves the background properties to a valid ScaleMode.
            * @param $backgroundPositionX The X BackgroundPosition to resolve.
            * @param $backgroundPositionY The Y BackgroundPosition to resolve.
            * @param $backgroundRepeat The BackgroundRepeat to resolve.
            * @param $backgroundSize The BackgroundSize to resolve.
            * @param $valid Indicates whether the background properties resolve to a valid ScaleMode.
            * @returns ScaleMode. 
            */
            public static ResolveUnityBackgroundScaleMode ($backgroundPositionX: UnityEngine.UIElements.BackgroundPosition, $backgroundPositionY: UnityEngine.UIElements.BackgroundPosition, $backgroundRepeat: UnityEngine.UIElements.BackgroundRepeat, $backgroundSize: UnityEngine.UIElements.BackgroundSize, $valid: $Ref<boolean>) : UnityEngine.ScaleMode
        }
        /** 
        Script interface for VisualElement background-repeat style property IStyle.backgroundRepeat.
        */
        class BackgroundRepeat extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BackgroundRepeat>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Background repeat in the x direction.
            */
            public x : UnityEngine.UIElements.Repeat
            /** 
            Background repeat in the y direction.
            */
            public y : UnityEngine.UIElements.Repeat
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.BackgroundRepeat) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.BackgroundRepeat, $style2: UnityEngine.UIElements.BackgroundRepeat) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.BackgroundRepeat, $style2: UnityEngine.UIElements.BackgroundRepeat) : boolean
            public constructor ($repeatX: UnityEngine.UIElements.Repeat, $repeatY: UnityEngine.UIElements.Repeat)
        }
        /** 
        Script interface for VisualElement background-size style property IStyle.BackgroundSize.
        */
        class BackgroundSize extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BackgroundSize>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Background size type
            */
            public get sizeType(): UnityEngine.UIElements.BackgroundSizeType;
            public set sizeType(value: UnityEngine.UIElements.BackgroundSizeType);
            /** 
            Background size x
            */
            public get x(): UnityEngine.UIElements.Length;
            public set x(value: UnityEngine.UIElements.Length);
            /** 
            Background size y
            */
            public get y(): UnityEngine.UIElements.Length;
            public set y(value: UnityEngine.UIElements.Length);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.BackgroundSize) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.BackgroundSize, $style2: UnityEngine.UIElements.BackgroundSize) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.BackgroundSize, $style2: UnityEngine.UIElements.BackgroundSize) : boolean
            public constructor ($sizeX: UnityEngine.UIElements.Length, $sizeY: UnityEngine.UIElements.Length)
            public constructor ($sizeType: UnityEngine.UIElements.BackgroundSizeType)
        }
        /** 
        Defines how the background is repeated.
        */
        enum Repeat
        { NoRepeat = 0, Space = 1, Round = 2, Repeat = 3 }
        /** 
        Defines the size of the background.
        */
        enum BackgroundSizeType
        { Length = 0, Cover = 1, Contain = 2 }
        /** 
        Element that can be bound to a property. For more information, refer to.
        */
        class BindableElement extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
        }
        interface IBindable
        {
            /** 
            Binding object that will be updated.
            */
            binding : UnityEngine.UIElements.IBinding
            /** 
            Path of the target property to be bound.
            */
            bindingPath : string
        }
        interface IBinding
        {
            /** 
            Called at regular intervals to synchronize bound properties to their IBindable counterparts. Called before the Update() method.
            */
            PreUpdate () : void
            /** 
            Called at regular intervals to synchronize bound properties to their IBindable counterparts.
            */
            Update () : void
            /** 
            Disconnects the field from its bound property.
            */
            Release () : void
        }
        /** 
        Generates an instance of the declaring element when the UxmlElementAttribute is used in a custom control.
        */
        class UxmlSerializedData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static ShouldWriteAttributeValue ($attributeFlags: UnityEngine.UIElements.UxmlSerializedData.UxmlAttributeFlags) : boolean
            /** 
            Returns an instance of the declaring element.
            * @returns The new instance of the declaring element. 
            */
            public CreateInstance () : any
            /** 
            Applies serialized field values to a compatible visual element.
            * @param $obj The element to have the serialized data applied to.
            */
            public Deserialize ($obj: any) : void
        }
        /** 
        Base class that describes a VisualElement derived class for the parsing of UXML files and the generation of UXML schema definition.
        */
        class BaseUxmlTraits extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
        }
        /** 
        Describes a VisualElement derived class for the parsing of UXML files and the generation of UXML schema definition.
        */
        class UxmlTraits extends UnityEngine.UIElements.BaseUxmlTraits
        {
            protected [__keep_incompatibility]: never;
            /** 
            Initialize a VisualElement instance with values from the UXML element attributes.
            * @param $ve The VisualElement to initialize.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            */
            public Init ($ve: UnityEngine.UIElements.VisualElement, $bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : void
        }
        class BaseUxmlFactory$2<TCreatedType, TTraits> extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlNamespace(): string;
            public get uxmlQualifiedName(): string;
            public get uxmlType(): System.Type;
            public get canHaveAnyAttribute(): boolean;
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
        }
        class UxmlFactory$2<TCreatedType, TTraits> extends UnityEngine.UIElements.BaseUxmlFactory$2<TCreatedType, TTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the UXML element read by the factory.
            */
            public get uxmlName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The fully qualified name of the UXML element read by the factory.
            */
            public get uxmlQualifiedName(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            /** 
            The type of element for which this element type can substitute for.
            */
            public get substituteForTypeName(): string;
            /** 
            The UXML namespace for the type returned by substituteForTypeName.
            */
            public get substituteForTypeNamespace(): string;
            /** 
            The fully qualified XML name for the type returned by substituteForTypeName.
            */
            public get substituteForTypeQualifiedName(): string;
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
        }
        interface IBaseUxmlFactory
        {
            /** 
            The name of the UXML element read by the factory.
            */
            uxmlName : string
            /** 
            The namespace of the UXML element read by the factory.
            */
            uxmlNamespace : string
            /** 
            The fully qualified name of the UXML element read by the factory.
            */
            uxmlQualifiedName : string
            /** 
            The type of the UXML element read by the factory.
            */
            uxmlType : System.Type
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            canHaveAnyAttribute : boolean
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            uxmlAttributesDescription : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            uxmlChildElementsDescription : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>
            /** 
            The type of element for which this element type can substitute for.
            */
            substituteForTypeName : string
            /** 
            The UXML namespace for the type returned by substituteForTypeName.
            */
            substituteForTypeNamespace : string
            /** 
            The fully qualified XML name for the type returned by substituteForTypeName.
            */
            substituteForTypeQualifiedName : string
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
        }
        interface IUxmlFactory extends UnityEngine.UIElements.IBaseUxmlFactory
        {
            /** 
            The name of the UXML element read by the factory.
            */
            uxmlName : string
            /** 
            The namespace of the UXML element read by the factory.
            */
            uxmlNamespace : string
            /** 
            The fully qualified name of the UXML element read by the factory.
            */
            uxmlQualifiedName : string
            /** 
            The type of the UXML element read by the factory.
            */
            uxmlType : System.Type
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            canHaveAnyAttribute : boolean
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            uxmlAttributesDescription : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            uxmlChildElementsDescription : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>
            /** 
            The type of element for which this element type can substitute for.
            */
            substituteForTypeName : string
            /** 
            The UXML namespace for the type returned by substituteForTypeName.
            */
            substituteForTypeNamespace : string
            /** 
            The fully qualified XML name for the type returned by substituteForTypeName.
            */
            substituteForTypeQualifiedName : string
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
        }
        interface IUxmlAttributes
        {
            /** 
            Get the value of an attribute as a string.
            * @param $attributeName Attribute name.
            * @param $value The attribute value or null if not found.
            * @returns True if the attribute was found, false otherwise. 
            */
            TryGetAttributeValue ($attributeName: string, $value: $Ref<string>) : boolean
        }
        /** 
        This structure holds information used during UXML template instantiation.
        */
        class CreationContext extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.CreationContext>
        {
            protected [__keep_incompatibility]: never;
            public static Default : UnityEngine.UIElements.CreationContext
            /** 
            The element into which the visualTreeAsset is being cloned or instantiated.
            VisualTreeAsset.CloneTreeVisualTreeAsset.Instantiate
            */
            public get target(): UnityEngine.UIElements.VisualElement;
            /** 
            The target UXML file to clone or instantiate.
            */
            public get visualTreeAsset(): UnityEngine.UIElements.VisualTreeAsset;
            public get slotInsertionPoints(): System.Collections.Generic.Dictionary$2<string, UnityEngine.UIElements.VisualElement>;
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.CreationContext) : boolean
            public static op_Equality ($context1: UnityEngine.UIElements.CreationContext, $context2: UnityEngine.UIElements.CreationContext) : boolean
            public static op_Inequality ($context1: UnityEngine.UIElements.CreationContext, $context2: UnityEngine.UIElements.CreationContext) : boolean
        }
        /** 
        Option to tell a binding when to update.
        */
        enum BindingUpdateTrigger
        { WhenDirty = 0, OnSourceChanged = 1, EveryUpdate = 2 }
        /** 
        Base class for defining a binding.
        */
        class Binding extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            When set to true, the binding instance updates during the next update cycle.
            When set to false, the binding instance updates only if a change is detected.
            */
            public get isDirty(): boolean;
            /** 
            When set to BindingUpdateTrigger.EveryUpdate, the binding instance updates in every update, regardless of the
            data source version.
            */
            public get updateTrigger(): UnityEngine.UIElements.BindingUpdateTrigger;
            public set updateTrigger(value: UnityEngine.UIElements.BindingUpdateTrigger);
            /** 
            Sets the log level for all binding failures.
            * @param $logLevel The log level.
            */
            public static SetGlobalLogLevel ($logLevel: UnityEngine.UIElements.BindingLogLevel) : void
            /** 
            Sets the log level for binding failures on a panel.
            * @param $panel The panel to apply to.
            * @param $logLevel The log level.
            */
            public static SetPanelLogLevel ($panel: UnityEngine.UIElements.IPanel, $logLevel: UnityEngine.UIElements.BindingLogLevel) : void
            /** 
            Resets the log level for binding failures on a panel to use the global setting.
            * @param $panel The panel to reset the global log level.
            */
            public static ResetPanelLogLevel ($panel: UnityEngine.UIElements.IPanel) : void
            /** 
            Notifies the binding system to process this binding.
            */
            public MarkDirty () : void
        }
        /** 
        Options to change the log level for warnings that occur during the update of data bindings.
        */
        enum BindingLogLevel
        { None = 0, Once = 1, All = 2 }
        interface IPanel extends System.IDisposable
        {
            /** 
            Root of the VisualElement hierarchy.
            */
            visualTree : UnityEngine.UIElements.VisualElement
            /** 
            This Panel EventDispatcher.
            */
            dispatcher : UnityEngine.UIElements.EventDispatcher
            /** 
            Describes in which context a VisualElement hierarchy is being ran.
            */
            contextType : UnityEngine.UIElements.ContextType
            /** 
            Return the focus controller for this panel.
            */
            focusController : UnityEngine.UIElements.FocusController
            /** 
            The Contextual menu manager for the panel.
            */
            contextualMenuManager : UnityEngine.UIElements.ContextualMenuManager
            /** 
            Checks whether any element within the panel has had any changes to its state since the panel was last rendered.
            */
            isDirty : boolean
            /** 
            Gives the current scaled pixels per point value of the panel.
            */
            scaledPixelsPerPoint : number
            /** 
            Returns the top element at this position. Will not return elements with pickingMode set to PickingMode.Ignore.
            * @param $point World coordinates.
            * @returns Top VisualElement at the position. Null if none was found. 
            */
            Pick ($point: UnityEngine.Vector2) : UnityEngine.UIElements.VisualElement
            PickAll ($point: UnityEngine.Vector2, $picked: System.Collections.Generic.List$1<UnityEngine.UIElements.VisualElement>) : UnityEngine.UIElements.VisualElement
        }
        /** 
        Contains information passed to binding instances during registration and deregistration.
        */
        class BindingActivationContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The target element of the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The binding id being activated/deactivated.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
        }
        /** 
        Defines a binding property that serves as an identifier for the binding system.
        */
        class BindingId extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BindingId>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an invalid binding property.
            */
            public static Invalid : UnityEngine.UIElements.BindingId
            public static op_Implicit ($vep: $Ref<UnityEngine.UIElements.BindingId>) : Unity.Properties.PropertyPath
            public static op_Implicit ($vep: $Ref<UnityEngine.UIElements.BindingId>) : string
            public static op_Implicit ($name: string) : UnityEngine.UIElements.BindingId
            public static op_Implicit ($path: $Ref<Unity.Properties.PropertyPath>) : UnityEngine.UIElements.BindingId
            /** 
            Indicates whether two binding properties are equal.
            * @param $other The object to compare with the current instance.
            * @returns true if obj and this instance are the same type and represent the same value; otherwise, false. 
            */
            public Equals ($other: UnityEngine.UIElements.BindingId) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($lhs: $Ref<UnityEngine.UIElements.BindingId>, $rhs: $Ref<UnityEngine.UIElements.BindingId>) : boolean
            public static op_Inequality ($lhs: $Ref<UnityEngine.UIElements.BindingId>, $rhs: $Ref<UnityEngine.UIElements.BindingId>) : boolean
            public constructor ($path: string)
            public constructor ($path: $Ref<Unity.Properties.PropertyPath>)
        }
        /** 
        Context object containing the necessary information to resolve a binding.
        */
        class BindingContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The target element of the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The binding ID of the element to bind.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
            /** 
            The resolved path to the value in the source, including relative data source paths found in the hierarchy
            between the target and to the resolved source owner.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            /** 
            The data source that was resolved for a given binding.
            */
            public get dataSource(): any;
        }
        /** 
        Status to report the result of a binding update.
        */
        enum BindingStatus
        { Success = 0, Failure = 1, Pending = 2 }
        /** 
        Provides information about the binding update.
        */
        class BindingResult extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The status from the binding update.
            */
            public get status(): UnityEngine.UIElements.BindingStatus;
            /** 
            Gets the message associated with the binding update.
            */
            public get message(): string;
            public constructor ($status: UnityEngine.UIElements.BindingStatus, $message?: string)
        }
        /** 
        A type to hold information about a conversion registry used locally on bindings.
        */
        class ConverterGroup extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The group id.
            */
            public get id(): string;
            /** 
            Optional and alternative name for a converter group ID, to be displayed to users to assist while authoring.
            */
            public get displayName(): string;
            /** 
            Optional description for a converter group ID that may include information about what this group contains
            or is used for, to be displayed to users to assist while authoring.
            */
            public get description(): string;
            public constructor ($id: string, $displayName?: string, $description?: string)
        }
        /** 
        Provides a set of static methods to register and use converter groups and registers a set of global converters.
        ConverterGroup.
        DataBinding.
        */
        class ConverterGroups extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Registers a converter group by ID. Converter groups can be applied on a binding using local converters.
            * @param $converterGroup The converter group to register.
            */
            public static RegisterConverterGroup ($converterGroup: UnityEngine.UIElements.ConverterGroup) : void
            /** 
            Retrieves a converter group by ID.
            * @param $groupId The group ID.
            * @param $converterGroup The converter group.
            */
            public static TryGetConverterGroup ($groupId: string, $converterGroup: $Ref<UnityEngine.UIElements.ConverterGroup>) : boolean
        }
        /** 
        Base class for general purpose binding extensibility.
        */
        class CustomBinding extends UnityEngine.UIElements.Binding
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Binding mode to control how a binding is updated.
        */
        enum BindingMode
        { TwoWay = 0, ToSource = 1, ToTarget = 2, ToTargetOnce = 3 }
        /** 
        Binding type that enables data synchronization between a property of a data source and a property of a VisualElement.
        */
        class DataBinding extends UnityEngine.UIElements.Binding implements UnityEngine.UIElements.IDataSourceProvider
        {
            protected [__keep_incompatibility]: never;
            /** 
            Object that serves as a local source for the binding, and is particularly useful when the data source is not
            part of the UI hierarchy, such as a static localization table. If this object is null, the binding resolves
            the data source using its normal resolution method.
            */
            public get dataSource(): any;
            public set dataSource(value: any);
            /** 
            The possible data source types that can be assigned to the binding.
            */
            public get dataSourceType(): System.Type;
            public set dataSourceType(value: System.Type);
            /** 
            Path from the data source to the value.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            public set dataSourcePath(value: Unity.Properties.PropertyPath);
            /** 
            Controls how this binding should be updated.
            The default value is BindingMode.TwoWay.
            */
            public get bindingMode(): UnityEngine.UIElements.BindingMode;
            public set bindingMode(value: UnityEngine.UIElements.BindingMode);
            /** 
            Returns the ConverterGroup used when trying to convert data from the data source to a UI property.
            */
            public get sourceToUiConverters(): UnityEngine.UIElements.ConverterGroup;
            /** 
            Returns the ConverterGroup used when trying to convert data from a UI property back to the data source.
            */
            public get uiToSourceConverters(): UnityEngine.UIElements.ConverterGroup;
            /** 
            Applies a ConverterGroup to this binding that will be used when converting data between a
            UI control to a data source.
            * @param $group The converter group.
            */
            public ApplyConverterGroupToSource ($group: UnityEngine.UIElements.ConverterGroup) : void
            /** 
            Applies a ConverterGroup to this binding that will be used when converting data between a
            data source to a UI control.
            * @param $group The converter group.
            */
            public ApplyConverterGroupToUI ($group: UnityEngine.UIElements.ConverterGroup) : void
            public constructor ()
        }
        interface IDataSourceProvider
        {
            /** 
            Data source object that is local to the binding object.
            */
            dataSource : any
            /** 
            Data source path that is local to the binding object.
            */
            dataSourcePath : Unity.Properties.PropertyPath
        }
        /** 
        Provides information about a binding.
        */
        class BindingInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The visual element targeted by the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The binding id.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
            /** 
            The binding matching this information.
            */
            public get binding(): UnityEngine.UIElements.Binding;
        }
        /** 
        Contains information about the data source and data source path of a binding.
        */
        class DataSourceContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The resolved data source.
            */
            public get dataSource(): any;
            /** 
            The resolved data source path.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            public constructor ($dataSource: any, $dataSourcePath: $Ref<Unity.Properties.PropertyPath>)
        }
        /** 
        Contains information passed to binding instances when the resolved data source context has changed.
        */
        class DataSourceContextChanged extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the target element of the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            Returns the id of the binding.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
            /** 
            Returns the previous resolved data source context of the binding.
            */
            public get previousContext(): UnityEngine.UIElements.DataSourceContext;
            /** 
            Returns the newly resolved data source of the binding.
            */
            public get newContext(): UnityEngine.UIElements.DataSourceContext;
        }
        interface IDataSourceViewHashProvider
        {
            /** 
            Returns the hash code of the view, which can be used to notify the data binding system to refresh.
            * @returns The hash code of the view. 
            */
            GetViewHashCode () : bigint
        }
        /** 
        Provides information about the property that has changed.
        */
        class BindablePropertyChangedEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the name of the property that has changed.
            */
            public get propertyName(): UnityEngine.UIElements.BindingId;
            public constructor ($propertyName: $Ref<UnityEngine.UIElements.BindingId>)
        }
        interface INotifyBindablePropertyChanged
        {
            add_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
            remove_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
        }
        /** 
        Base class for all Manipulator implementations. For more information, refer to.
        */
        class Manipulator extends System.Object implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            /** 
            VisualElement being manipulated.
            */
            public get target(): UnityEngine.UIElements.VisualElement;
            public set target(value: UnityEngine.UIElements.VisualElement);
        }
        interface IManipulator
        {
            /** 
            VisualElement being manipulated.
            */
            target : UnityEngine.UIElements.VisualElement
        }
        /** 
        MouseManipulators have a list of activation filters.
        */
        class MouseManipulator extends UnityEngine.UIElements.Manipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            /** 
            List of Activationfilters.
            */
            public get activators(): System.Collections.Generic.List$1<UnityEngine.UIElements.ManipulatorActivationFilter>;
        }
        /** 
        PointerManipulators have a list of activation filters.
        */
        class PointerManipulator extends UnityEngine.UIElements.MouseManipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Manipulator that tracks Mouse events on an element and callbacks when the elements is clicked.
        */
        class Clickable extends UnityEngine.UIElements.PointerManipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies the mouse position saved during the last mouse event on the target Element.
            */
            public get lastMousePosition(): UnityEngine.Vector2;
            public add_clickedWithEventInfo ($value: System.Action$1<UnityEngine.UIElements.EventBase>) : void
            public remove_clickedWithEventInfo ($value: System.Action$1<UnityEngine.UIElements.EventBase>) : void
            public add_clicked ($value: System.Action) : void
            public remove_clicked ($value: System.Action) : void
            public constructor ($handler: System.Action, $delay: bigint, $interval: bigint)
            public constructor ($handler: System.Action$1<UnityEngine.UIElements.EventBase>)
            public constructor ($handler: System.Action)
        }
        /** 
        The base class for all UIElements events.  The class implements IDisposable to ensure proper release of the event from the pool and of any unmanaged resources, when necessary.
        */
        class EventBase extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Retrieves the type ID for this event instance.
            */
            public get eventTypeId(): bigint;
            /** 
            The time when the event was created, in milliseconds.
            */
            public get timestamp(): bigint;
            /** 
            Returns whether this event type bubbles up in the event propagation path.
            */
            public get bubbles(): boolean;
            /** 
            Returns whether this event is sent down the event propagation path during the TrickleDown phase.
            */
            public get tricklesDown(): boolean;
            /** 
            The target visual element that received this event. Unlike currentTarget, this target does not change when
            the event is sent to other elements along the propagation path.
            */
            public get target(): UnityEngine.UIElements.IEventHandler;
            public set target(value: UnityEngine.UIElements.IEventHandler);
            /** 
            Whether StopPropagation() was called for this event.
            */
            public get isPropagationStopped(): boolean;
            /** 
            Indicates whether StopImmediatePropagation() was called for this event.
            */
            public get isImmediatePropagationStopped(): boolean;
            /** 
            The current propagation phase for this event.
            */
            public get propagationPhase(): UnityEngine.UIElements.PropagationPhase;
            /** 
            The current target of the event. This is the VisualElement, in the propagation path, for which event handlers are currently being executed.
            */
            public get currentTarget(): UnityEngine.UIElements.IEventHandler;
            /** 
            Indicates whether the event is being dispatched to a visual element. An event cannot be redispatched while it being dispatched. If you need to recursively dispatch an event, it is recommended that you use a copy of the event.
            */
            public get dispatch(): boolean;
            /** 
            The IMGUIEvent at the source of this event. The source can be null since not all events are generated by IMGUI.
            */
            public get imguiEvent(): UnityEngine.Event;
            /** 
            The original mouse position of the IMGUI event, before it is transformed to the current target local coordinates.
            */
            public get originalMousePosition(): UnityEngine.Vector2;
            /** 
            Stops propagating this event. The event is not sent to other elements along the propagation path.
            This method does not prevent other event handlers from executing on the current target.
            If this method is called during the TrickleDown propagation phase, it will prevent default actions
            to be processed, such as an element getting focused as a result of a PointerDownEvent.
            */
            public StopPropagation () : void
            /** 
            Immediately stops the propagation of the event. The event isn't sent to other elements along the propagation path. This method prevents other event handlers from executing on the current target.
            */
            public StopImmediatePropagation () : void
            /** 
            Implementation of IDisposable.
            */
            public Dispose () : void
        }
        /** 
        Base collection view controller. View controllers are meant to take care of data virtualized by any BaseVerticalCollectionView inheritor.
        */
        class CollectionViewController extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The items source stored in a non-generic list.
            */
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            public add_itemsSourceChanged ($value: System.Action) : void
            public remove_itemsSourceChanged ($value: System.Action) : void
            public add_itemIndexChanged ($value: System.Action$2<number, number>) : void
            public remove_itemIndexChanged ($value: System.Action$2<number, number>) : void
            /** 
            Sets the view for this controller.
            * @param $collectionView The view for this controller. Must not be null.
            */
            public SetView ($collectionView: UnityEngine.UIElements.BaseVerticalCollectionView) : void
            /** 
            Called when this controller is not longer needed to provide a way to release resources.
            */
            public Dispose () : void
            /** 
            Returns the expected item count in the source.
            * @returns The item count. 
            */
            public GetItemsCount () : number
            /** 
            Returns the index for the specified id.
            * @param $id The item id..
            * @returns The item index. 
            */
            public GetIndexForId ($id: number) : number
            /** 
            Returns the id for the specified index.
            * @param $index The item index.
            * @returns The item id. 
            */
            public GetIdForIndex ($index: number) : number
            /** 
            Returns the item with the specified index.
            * @param $index The item index.
            * @returns The object in the source at this index. 
            */
            public GetItemForIndex ($index: number) : any
            /** 
            Returns the item with the specified ID.
            * @param $id The item ID.
            * @returns The object in the source with this ID. 
            */
            public GetItemForId ($id: number) : any
        }
        /** 
        Base collection list view controller. View controllers of this type are meant to take care of data virtualized by any BaseListView inheritor.
        */
        class BaseListViewController extends UnityEngine.UIElements.CollectionViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public add_itemsSourceSizeChanged ($value: System.Action) : void
            public remove_itemsSourceSizeChanged ($value: System.Action) : void
            public add_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            /** 
            Returns whether this item needs a drag handle or not with the Animated drag mode.
            * @param $index Item index.
            * @returns Whether or not the drag handle is needed. 
            */
            public NeedsDragHandle ($index: number) : boolean
            /** 
            Adds a certain amount of items at the end of the collection.
            * @param $itemCount The number of items to add.
            */
            public AddItems ($itemCount: number) : void
            /** 
            Moves an item in the source.
            * @param $index The source index.
            * @param $newIndex The destination index.
            */
            public Move ($index: number, $newIndex: number) : void
            /** 
            Removes an item from the source, by index.
            * @param $index The item index.
            */
            public RemoveItem ($index: number) : void
            public RemoveItems ($indices: System.Collections.Generic.List$1<number>) : void
            /** 
            Removes all items from the source.
            */
            public ClearItems () : void
        }
        /** 
        Base collection tree view controller. View controllers of this type are meant to take care of data virtualized by any BaseTreeView inheritor.
        */
        class BaseTreeViewController extends UnityEngine.UIElements.CollectionViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Items for this tree. Contains items that are expanded in the tree.
            */
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            /** 
            Returns the root items of the tree, by IDs.
            * @returns The root item IDs. 
            */
            public GetRootItemIds () : System.Collections.Generic.IEnumerable$1<number>
            public GetAllItemIds ($rootIds?: System.Collections.Generic.IEnumerable$1<number>) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Returns the parent ID of an item, by ID.
            * @param $id The ID of the item to fetch the parent from.
            * @returns The parent ID, or -1 if the item is at the root of the tree. 
            */
            public GetParentId ($id: number) : number
            /** 
            Get all children of a specific ID in the tree.
            * @param $id The item ID.
            * @returns The children IDs. 
            */
            public GetChildrenIds ($id: number) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Moves an item by ID, to a new parent and child index.
            * @param $id The ID of the item to move.
            * @param $newParentId The new parent ID. -1 if moved at the root.
            * @param $childIndex The child index to insert at under the parent. -1 will add as the last child.
            * @param $rebuildTree Whether we need to rebuild tree data. Set to false when doing multiple operations.
            */
            public Move ($id: number, $newParentId: number, $childIndex?: number, $rebuildTree?: boolean) : void
            /** 
            Removes an item by id.
            * @param $id The item id.
            * @param $rebuildTree Whether we need to rebuild tree data. Set to <c>false<c> when doing multiple operations and call <see cref="TreeViewController.RebuildTree()" >.
            * @returns Whether the item was successfully found and removed. 
            */
            public TryRemoveItem ($id: number, $rebuildTree?: boolean) : boolean
            /** 
            Get the number of items in the whole tree.
            * @returns The number of items in the tree. 
            */
            public GetTreeItemsCount () : number
            /** 
            Return whether the item with the specified ID has one or more child.
            * @param $id The item id.
            * @returns Whether the item with the specified ID has one or more child. 
            */
            public HasChildren ($id: number) : boolean
            /** 
            Checks if an ID exists within this tree.
            * @param $id The id to look for.
            * @returns Whether an item with this id exists in the tree. 
            */
            public Exists ($id: number) : boolean
            /** 
            Return whether the item with the specified index has one or more child.
            * @param $index The item index.
            * @returns Whether the item with the specified ID has one or more child. 
            */
            public HasChildrenByIndex ($index: number) : boolean
            /** 
            Gets the children IDs of the item with the specified index.
            * @param $index The item index.
            * @returns The children IDs. 
            */
            public GetChildrenIdsByIndex ($index: number) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Gets the child index under the parent of the item with the specified ID.
            * @param $id The item ID.
            * @returns The child index under the parent. Returns -1 if the item has no parent or doesn't exist in the tree. 
            */
            public GetChildIndexForId ($id: number) : number
            /** 
            Returns the depth of the element at that ID.
            * @param $id The item ID.
            * @returns The depth of the element. 
            */
            public GetIndentationDepth ($id: number) : number
            /** 
            Return the depth of the element at that index.
            * @param $index The item index.
            * @returns The depth of the element. 
            */
            public GetIndentationDepthByIndex ($index: number) : number
            /** 
            Determines whether the item with the specified ID can be expanded or collapsed.
            */
            public CanChangeExpandedState ($id: number) : boolean
            /** 
            Return whether the item with the specified ID is expanded in the tree.
            * @param $id The item ID
            * @returns Whether the item with the specified ID is expanded in the tree. 
            */
            public IsExpanded ($id: number) : boolean
            /** 
            Return whether the item with the specified index is expanded in the tree.
            * @param $index The item index
            * @returns Whether the item with the specified index is expanded in the tree. Will return false if the index is not valid. 
            */
            public IsExpandedByIndex ($index: number) : boolean
            /** 
            Expands the item with the specified index, making his children visible. Allows to expand the whole hierarchy under that item.
            * @param $index The item index.
            * @param $expandAllChildren Whether the whole hierarchy under that item will be expanded.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done.
            */
            public ExpandItemByIndex ($index: number, $expandAllChildren: boolean, $refresh?: boolean) : void
            /** 
            Expands the item with the specified ID, making its children visible. Allows to expand the whole hierarchy under that item.
            * @param $id The item ID.
            * @param $expandAllChildren Whether the whole hierarchy under that item will be expanded.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done. This is true by default.
            */
            public ExpandItem ($id: number, $expandAllChildren: boolean, $refresh?: boolean) : void
            /** 
            Collapses the item with the specified index, hiding its children. Allows to collapse the whole hierarchy under that item.
            * @param $index The item index.
            * @param $collapseAllChildren Whether the whole hierarchy under that item will be collapsed.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done. This is true by default.
            */
            public CollapseItemByIndex ($index: number, $collapseAllChildren: boolean, $refresh?: boolean) : void
            /** 
            Collapses the item with the specified ID, hiding its children. Allows to collapse the whole hierarchy under that item.
            * @param $id The item ID.
            * @param $collapseAllChildren Whether the whole hierarchy under that item will be collapsed.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done.
            */
            public CollapseItem ($id: number, $collapseAllChildren: boolean, $refresh?: boolean) : void
            /** 
            Expands all items in the tree and refreshes the view.
            */
            public ExpandAll () : void
            /** 
            Collapses all items in the tree and refreshes the view.
            */
            public CollapseAll () : void
        }
        /** 
        Base class for controls that display virtualized vertical content inside a scroll view.
        */
        class BaseVerticalCollectionView extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for BaseVerticalCollectionView elements.
            */
            public static ussClassName : string
            /** 
            The USS class name for BaseVerticalCollectionView elements with a border.
            */
            public static borderUssClassName : string
            /** 
            The USS class name of item elements in BaseVerticalCollectionView elements.
            */
            public static itemUssClassName : string
            /** 
            The USS class name of the drag hover bar.
            */
            public static dragHoverBarUssClassName : string
            /** 
            The USS class name of the drag hover circular marker used to indicate depth.
            */
            public static dragHoverMarkerUssClassName : string
            /** 
            The USS class name applied to an item element on drag hover.
            */
            public static itemDragHoverUssClassName : string
            /** 
            The USS class name of selected item elements in the BaseVerticalCollectionView.
            */
            public static itemSelectedVariantUssClassName : string
            /** 
            The USS class name for odd rows in the BaseVerticalCollectionView.
            */
            public static itemAlternativeBackgroundUssClassName : string
            /** 
            The USS class name of the scroll view in the BaseVerticalCollectionView.
            */
            public static listScrollViewUssClassName : string
            /** 
            The data source for collection items.
            */
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            /** 
            Returns the content container for the BaseVerticalCollectionView. Because the BaseVerticalCollectionView
            control automatically manages its content, this always returns null.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Controls the selection type.
            */
            public get selectionType(): UnityEngine.UIElements.SelectionType;
            public set selectionType(value: UnityEngine.UIElements.SelectionType);
            /** 
            Returns the selected item from the data source. If multiple items are selected, returns the first selected item.
            */
            public get selectedItem(): any;
            /** 
            Returns the selected items from the data source. Always returns an enumerable, even if no item is selected, or a single
            item is selected.
            */
            public get selectedItems(): System.Collections.Generic.IEnumerable$1<any>;
            /** 
            Returns or sets the selected item's index in the data source. If multiple items are selected, returns the
            first selected item's index. If multiple items are provided, sets them all as selected.
            */
            public get selectedIndex(): number;
            public set selectedIndex(value: number);
            /** 
            Returns the indices of selected items in the data source. Always returns an enumerable, even if no item  is selected, or a
            single item is selected.
            */
            public get selectedIndices(): System.Collections.Generic.IEnumerable$1<number>;
            /** 
            Returns the persistent IDs of selected items in the data source, regardless of whether they are collapsed or not. Always returns an enumerable, even if no item is selected, or a
            single item is selected.
            */
            public get selectedIds(): System.Collections.Generic.IEnumerable$1<number>;
            /** 
            The view controller for this view.
            */
            public get viewController(): UnityEngine.UIElements.CollectionViewController;
            /** 
            Enable this property to display a border around the collection view.
            */
            public get showBorder(): boolean;
            public set showBorder(value: boolean);
            /** 
            Gets or sets a value that indicates whether the user can drag list items to reorder them.
            */
            public get reorderable(): boolean;
            public set reorderable(value: boolean);
            /** 
            This property controls whether the collection view shows a horizontal scroll bar when its content
            does not fit in the visible area.
            */
            public get horizontalScrollingEnabled(): boolean;
            public set horizontalScrollingEnabled(value: boolean);
            /** 
            This property controls whether the background colors of collection view rows alternate.
            Takes a value from the AlternatingRowBackground enum.
            */
            public get showAlternatingRowBackgrounds(): UnityEngine.UIElements.AlternatingRowBackground;
            public set showAlternatingRowBackgrounds(value: UnityEngine.UIElements.AlternatingRowBackground);
            /** 
            The virtualization method to use for this collection when a scroll bar is visible.
            Takes a value from the CollectionVirtualizationMethod enum.
            */
            public get virtualizationMethod(): UnityEngine.UIElements.CollectionVirtualizationMethod;
            public set virtualizationMethod(value: UnityEngine.UIElements.CollectionVirtualizationMethod);
            /** 
            The height of a single item in the list, in pixels.
            */
            public get fixedItemHeight(): number;
            public set fixedItemHeight(value: number);
            public add_onItemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_onItemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_itemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_itemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_onSelectionChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_onSelectionChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_selectionChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_selectionChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_onSelectedIndicesChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_onSelectedIndicesChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_selectedIndicesChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_selectedIndicesChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_itemIndexChanged ($value: System.Action$2<number, number>) : void
            public remove_itemIndexChanged ($value: System.Action$2<number, number>) : void
            public add_itemsSourceChanged ($value: System.Action) : void
            public remove_itemsSourceChanged ($value: System.Action) : void
            public add_canStartDrag ($value: System.Func$2<UnityEngine.UIElements.CanStartDragArgs, boolean>) : void
            public remove_canStartDrag ($value: System.Func$2<UnityEngine.UIElements.CanStartDragArgs, boolean>) : void
            public add_setupDragAndDrop ($value: System.Func$2<UnityEngine.UIElements.SetupDragAndDropArgs, UnityEngine.UIElements.StartDragArgs>) : void
            public remove_setupDragAndDrop ($value: System.Func$2<UnityEngine.UIElements.SetupDragAndDropArgs, UnityEngine.UIElements.StartDragArgs>) : void
            public add_dragAndDropUpdate ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            public remove_dragAndDropUpdate ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            public add_handleDrop ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            public remove_handleDrop ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            /** 
            Assigns the view controller for this view and registers all events required for it to function properly.
            * @param $controller The controller to use with this view.
            */
            public SetViewController ($controller: UnityEngine.UIElements.CollectionViewController) : void
            /** 
            Gets the root element of the specified collection view item.
            * @param $id The item identifier.
            * @returns The item's root element. 
            */
            public GetRootElementForId ($id: number) : UnityEngine.UIElements.VisualElement
            /** 
            Gets the root element of the specified collection view item.
            * @param $index The item index.
            * @returns The item's root element. 
            */
            public GetRootElementForIndex ($index: number) : UnityEngine.UIElements.VisualElement
            /** 
            Rebinds a single item if it is currently visible in the collection view.
            * @param $index The item index.
            */
            public RefreshItem ($index: number) : void
            /** 
            Rebinds all items currently visible.
            */
            public RefreshItems () : void
            /** 
            Clears the collection view, recreates all visible visual elements, and rebinds all items.
            */
            public Rebuild () : void
            /** 
            Scrolls to a specific VisualElement.
            * @param $visualElement The element to scroll to.
            */
            public ScrollTo ($visualElement: UnityEngine.UIElements.VisualElement) : void
            /** 
            Scrolls to a specific item index and makes it visible.
            * @param $index Item index to scroll to. Specify -1 to make the last item visible.
            */
            public ScrollToItem ($index: number) : void
            /** 
            Scrolls to a specific item id and makes it visible.
            * @param $id Item id to scroll to.
            */
            public ScrollToItemById ($id: number) : void
            /** 
            Adds an item to the collection of selected items.
            * @param $index Item index.
            */
            public AddToSelection ($index: number) : void
            /** 
            Removes an item from the collection of selected items.
            * @param $index The item index.
            */
            public RemoveFromSelection ($index: number) : void
            /** 
            Sets the currently selected item.
            * @param $index The item index.
            */
            public SetSelection ($index: number) : void
            public SetSelection ($indices: System.Collections.Generic.IEnumerable$1<number>) : void
            public SetSelectionWithoutNotify ($indices: System.Collections.Generic.IEnumerable$1<number>) : void
            /** 
            Deselects any selected items.
            */
            public ClearSelection () : void
        }
        /** 
        Multi-column tree view controller. View controllers of this type are meant to take care of data virtualized by any MultiColumnTreeView inheritor.
        */
        class MultiColumnTreeViewController extends UnityEngine.UIElements.BaseTreeViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The column controller, taking care of operations on the header.
            */
            public get columnController(): UnityEngine.UIElements.MultiColumnController;
        }
        class DefaultMultiColumnTreeViewController$1<T> extends UnityEngine.UIElements.MultiColumnTreeViewController implements UnityEngine.UIElements.IDefaultTreeViewController$1<T>, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            public SetRootItems ($items: System.Collections.Generic.IList$1<UnityEngine.UIElements.TreeViewItemData$1<T>>) : void
            public AddItem ($item: $Ref<UnityEngine.UIElements.TreeViewItemData$1<T>>, $parentId: number, $childIndex: number, $rebuildTree?: boolean) : void
            public GetTreeViewItemDataForId ($id: number) : UnityEngine.UIElements.TreeViewItemData$1<T>
            public GetTreeViewItemDataForIndex ($index: number) : UnityEngine.UIElements.TreeViewItemData$1<T>
            public GetDataForId ($id: number) : T
            public GetDataForIndex ($index: number) : T
            public constructor ($columns: UnityEngine.UIElements.Columns, $sortDescriptions: UnityEngine.UIElements.SortColumnDescriptions, $sortedColumns: System.Collections.Generic.List$1<UnityEngine.UIElements.SortColumnDescription>)
        }
        class TreeViewItemData$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get id(): number;
            public get data(): T;
            public get children(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TreeViewItemData$1<T>>;
            public get hasChildren(): boolean;
            public constructor ($id: number, $data: T, $children?: System.Collections.Generic.List$1<UnityEngine.UIElements.TreeViewItemData$1<T>>)
        }
        /** 
        Represents a collection of columns.
        */
        class Columns extends System.Object implements System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.Column>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<UnityEngine.UIElements.Column>, UnityEngine.UIElements.INotifyBindablePropertyChanged
        {
            protected [__keep_incompatibility]: never;
            /** 
            Indicates the column that needs to be considered as the primary column, by ID.
            */
            public get primaryColumnName(): string;
            public set primaryColumnName(value: string);
            /** 
            Indicates whether the columns can be reordered interactively by user.
            */
            public get reorderable(): boolean;
            public set reorderable(value: boolean);
            /** 
            Indicates whether the columns can be resized interactively by user.
            */
            public get resizable(): boolean;
            public set resizable(value: boolean);
            /** 
            Indicates whether columns are resized as the user drags resize handles or only upon mouse release.
            */
            public get resizePreview(): boolean;
            public set resizePreview(value: boolean);
            /** 
            Indicates how the size of columns in this collection is automatically adjusted as other columns or the containing view get resized.
            The default value is StretchMode.GrowAndFill
            */
            public get stretchMode(): UnityEngine.UIElements.Columns.StretchMode;
            public set stretchMode(value: UnityEngine.UIElements.Columns.StretchMode);
            /** 
            Gets the number of columns in the collection.
            */
            public get Count(): number;
            /** 
            Gets a value indicating whether the collection is readonly.
            */
            public get IsReadOnly(): boolean;
            public add_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
            public remove_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
            /** 
            Checks if the specified column is the primary one.
            * @param $column The column to check.
            * @returns Whether or not the specified column is the primary one. 
            */
            public IsPrimary ($column: UnityEngine.UIElements.Column) : boolean
            /** 
            Returns an enumerator that iterates through the collection.
            * @returns The enumerator. 
            */
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<UnityEngine.UIElements.Column>
            /** 
            Adds a column at the end of the collection.
            * @param $item The column to add.
            */
            public Add ($item: UnityEngine.UIElements.Column) : void
            /** 
            Removes all columns from the collection.
            */
            public Clear () : void
            public Contains ($item: UnityEngine.UIElements.Column) : boolean
            /** 
            Whether the columns contain the specified name.
            * @param $name The name of the column to look for.
            * @returns Whether a column with the given name exists or not. 
            */
            public Contains ($name: string) : boolean
            /** 
            Copies the elements of the current collection to a Array, starting at the specified index.
            * @param $array The array to copy to.
            * @param $arrayIndex The starting index.
            */
            public CopyTo ($array: System.Array$1<UnityEngine.UIElements.Column>, $arrayIndex: number) : void
            /** 
            Removes the first occurence of a column from the collection.
            * @param $column The column to remove.
            * @returns Whether it was removed or not. 
            */
            public Remove ($column: UnityEngine.UIElements.Column) : boolean
            /** 
            Returns the index of the specified column if it is contained in the collection; returns -1 otherwise.
            * @param $column The column to locate in the <see cref="Columns" />.
            * @returns The index of the column if found in the collection; otherwise, -1. 
            */
            public IndexOf ($column: UnityEngine.UIElements.Column) : number
            /** 
            Inserts a column into the current instance at the specified index.
            * @param $index Index to insert to.
            * @param $column The column to insert.
            */
            public Insert ($index: number, $column: UnityEngine.UIElements.Column) : void
            /** 
            Removes the column at the specified index.
            * @param $index The index of the column to remove.
            */
            public RemoveAt ($index: number) : void
            public get_Item ($index: number) : UnityEngine.UIElements.Column
            public get_Item ($name: string) : UnityEngine.UIElements.Column
            /** 
            Reorders the display of a column at the specified source index, to the destination index.
            * @param $from The display index of the column to move.
            * @param $to The display index where the column will be moved to.
            */
            public ReorderDisplay ($from: number, $to: number) : void
            public constructor ()
        }
        /** 
        Represents a column in multi-column views such as multi-column list view or multi-column tree view.
        Provides the properties to define how user interacts with a column in a multi-column view, how its data and the data of each
        cell in this column are represented.
        */
        class Column extends System.Object implements UnityEngine.UIElements.INotifyBindablePropertyChanged
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the column.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            The title of the column.
            */
            public get title(): string;
            public set title(value: string);
            /** 
            The icon of the column.
            */
            public get icon(): UnityEngine.UIElements.Background;
            public set icon(value: UnityEngine.UIElements.Background);
            /** 
            The comparison to use when using ColumnSortingMode.Default. Compares two items by their index in the source.
            */
            public get comparison(): System.Comparison$1<number>;
            public set comparison(value: System.Comparison$1<number>);
            /** 
            Indicates whether the column is visible.
            */
            public get visible(): boolean;
            public set visible(value: boolean);
            /** 
            The desired width of the column.
            */
            public get width(): UnityEngine.UIElements.Length;
            public set width(value: UnityEngine.UIElements.Length);
            /** 
            The minimum width of the column.
            */
            public get minWidth(): UnityEngine.UIElements.Length;
            public set minWidth(value: UnityEngine.UIElements.Length);
            /** 
            The maximum width of the column.
            */
            public get maxWidth(): UnityEngine.UIElements.Length;
            public set maxWidth(value: UnityEngine.UIElements.Length);
            /** 
            Indicates whether the column can be sorted.
            */
            public get sortable(): boolean;
            public set sortable(value: boolean);
            /** 
            Indicates whether the column will be automatically resized to fill the available space within its container.
            */
            public get stretchable(): boolean;
            public set stretchable(value: boolean);
            /** 
            Indicates whether the column is optional. Optional columns be shown or hidden interactively by the user.
            */
            public get optional(): boolean;
            public set optional(value: boolean);
            /** 
            Indicates whether the column can be resized interactively by the user.
            */
            public get resizable(): boolean;
            public set resizable(value: boolean);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            The VisualElement that is the template for the header of the column.
            */
            public get headerTemplate(): UnityEngine.UIElements.VisualTreeAsset;
            public set headerTemplate(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            The VisualElement that is the template for each cell of the column.
            */
            public get cellTemplate(): UnityEngine.UIElements.VisualTreeAsset;
            public set cellTemplate(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            Callback for constructing the visual representation of the column in the header.
            */
            public get makeHeader(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeHeader(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for binding the header element to this column.
            */
            public get bindHeader(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set bindHeader(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for unbinding the header element to this column.
            */
            public get unbindHeader(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set unbindHeader(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for destroying the visual representation of the column in the header.
            */
            public get destroyHeader(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyHeader(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for constructing the VisualElement that is the template for each cell of the column.
            */
            public get makeCell(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeCell(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for binding the specified data item at the given row to the visual element.
            */
            public get bindCell(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set bindCell(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for unbinding the specified data item at the given row from the visual element.
            */
            public get unbindCell(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set unbindCell(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for destroying the VisualElement that was built for this column.
            */
            public get destroyCell(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyCell(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            The column collection that contains this column.
            */
            public get collection(): UnityEngine.UIElements.Columns;
            public add_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
            public remove_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
            public constructor ()
        }
        /** 
        This represents a collection or SortColumnDescriptions in multi SortColumnDescription views.
        */
        class SortColumnDescriptions extends System.Object implements System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.SortColumnDescription>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<UnityEngine.UIElements.SortColumnDescription>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the number of sort descriptions in the collection.
            */
            public get Count(): number;
            /** 
            Gets a value indicating whether the collection is readonly.
            */
            public get IsReadOnly(): boolean;
            /** 
            Returns an enumerator that iterates through the collection.
            * @returns The enumerator. 
            */
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<UnityEngine.UIElements.SortColumnDescription>
            /** 
            Adds a sort description at the end of the collection.
            * @param $item The sort description to add.
            */
            public Add ($item: UnityEngine.UIElements.SortColumnDescription) : void
            /** 
            Removes all sort descriptions from the collection.
            */
            public Clear () : void
            /** 
            Determines whether the current collection contains a specific value.
            * @param $item The object to locate in the current collection.
            * @returns Whether the item is in the collection or not. 
            */
            public Contains ($item: UnityEngine.UIElements.SortColumnDescription) : boolean
            /** 
            Copies the elements of the current collection to a Array, starting at the specified index.
            * @param $array The array to copy to.
            * @param $arrayIndex The starting index.
            */
            public CopyTo ($array: System.Array$1<UnityEngine.UIElements.SortColumnDescription>, $arrayIndex: number) : void
            /** 
            Removes the first occurence of a sort description from the collection.
            * @param $desc The sort description to remove.
            * @returns Whether it was removed or not. 
            */
            public Remove ($desc: UnityEngine.UIElements.SortColumnDescription) : boolean
            /** 
            Returns the index of the specified SortColumnDescription if it is contained in the collection; returns -1 otherwise.
            * @param $desc The description to locate in the <see cref="SortColumnDescriptions" />.
            * @returns The index of the SortColumnDescriptions if found in the collection; otherwise, -1. 
            */
            public IndexOf ($desc: UnityEngine.UIElements.SortColumnDescription) : number
            /** 
            Inserts a sort description into the current instance at the specified index.
            * @param $index Index to insert to.
            * @param $desc The sort description to insert.
            */
            public Insert ($index: number, $desc: UnityEngine.UIElements.SortColumnDescription) : void
            /** 
            Removes the sort description at the specified index.
            * @param $index The index of the sort description to remove.
            */
            public RemoveAt ($index: number) : void
            public get_Item ($index: number) : UnityEngine.UIElements.SortColumnDescription
            public constructor ()
        }
        /** 
        This represents a description on what column to sort and in which order.
        */
        class SortColumnDescription extends System.Object implements UnityEngine.UIElements.INotifyBindablePropertyChanged
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the column.
            */
            public get columnName(): string;
            public set columnName(value: string);
            /** 
            The index of the column to be used to find the column only if the SortColumnDescription.columnName|columnName isn't set.
            */
            public get columnIndex(): number;
            public set columnIndex(value: number);
            /** 
            The sorted column.
            */
            public get column(): UnityEngine.UIElements.Column;
            /** 
            The sort direction.
            */
            public get direction(): UnityEngine.UIElements.SortDirection;
            public set direction(value: UnityEngine.UIElements.SortDirection);
            public add_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
            public remove_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
            public constructor ()
            public constructor ($columnIndex: number, $direction: UnityEngine.UIElements.SortDirection)
            public constructor ($columnName: string, $direction: UnityEngine.UIElements.SortDirection)
        }
        /** 
        Tree view controller. View controllers of this type are meant to take care of data virtualized by any TreeView inheritor.
        */
        class TreeViewController extends UnityEngine.UIElements.BaseTreeViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        class DefaultTreeViewController$1<T> extends UnityEngine.UIElements.TreeViewController implements UnityEngine.UIElements.IDefaultTreeViewController$1<T>, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            public SetRootItems ($items: System.Collections.Generic.IList$1<UnityEngine.UIElements.TreeViewItemData$1<T>>) : void
            public AddItem ($item: $Ref<UnityEngine.UIElements.TreeViewItemData$1<T>>, $parentId: number, $childIndex: number, $rebuildTree?: boolean) : void
            public GetTreeViewItemDataForId ($id: number) : UnityEngine.UIElements.TreeViewItemData$1<T>
            public GetTreeViewItemDataForIndex ($index: number) : UnityEngine.UIElements.TreeViewItemData$1<T>
            public GetDataForId ($id: number) : T
            public GetDataForIndex ($index: number) : T
            public constructor ()
        }
        /** 
        List view controller. View controllers of this type are meant to take care of data virtualized by any ListView inheritor.
        */
        class ListViewController extends UnityEngine.UIElements.BaseListViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Multi-column list view controller. View controllers of this type are meant to take care of data virtualized by any MultiColumnListView inheritor.
        */
        class MultiColumnListViewController extends UnityEngine.UIElements.BaseListViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The column controller, taking care of operations on the header.
            */
            public get columnController(): UnityEngine.UIElements.MultiColumnController;
            public constructor ($columns: UnityEngine.UIElements.Columns, $sortDescriptions: UnityEngine.UIElements.SortColumnDescriptions, $sortedColumns: System.Collections.Generic.List$1<UnityEngine.UIElements.SortColumnDescription>)
        }
        /** 
        The default controller for a multi column view. Takes care of adding the MultiColumnCollectionHeader and
        reacting to the various callbacks.
        */
        class MultiColumnController extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for the header container inside a multi column view.
            */
            public static headerContainerUssClassName : string
            /** 
            The USS class name for all row containers inside a multi column view.
            */
            public static rowContainerUssClassName : string
            /** 
            The USS class name for all cells inside a multi column view.
            */
            public static cellUssClassName : string
            /** 
            The USS class name for default labels cells inside a multi column view.
            */
            public static cellLabelUssClassName : string
            public add_columnSortingChanged ($value: System.Action) : void
            public remove_columnSortingChanged ($value: System.Action) : void
            public add_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public remove_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            /** 
            Creates a VisualElement to use in the virtualization of the collection view.
            It will create a cell for every visible column.
            * @returns A VisualElement for the row. 
            */
            public MakeItem () : UnityEngine.UIElements.VisualElement
            /** 
            Unbinds the row at the item index.
            * @param $element The element from that row, created by MakeItem().
            * @param $index The item index.
            */
            public UnbindItem ($element: UnityEngine.UIElements.VisualElement, $index: number) : void
            /** 
            Destroys a VisualElement when the view is rebuilt or cleared.
            * @param $element The element being destroyed.
            */
            public DestroyItem ($element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Initialization step once the view is set.
            It will insert the multi column header in the hierarchy and register to important callbacks.
            * @param $collectionView The view to register to.
            */
            public PrepareView ($collectionView: UnityEngine.UIElements.BaseVerticalCollectionView) : void
            /** 
            Unregisters events and removes the header from the hierarchy.
            */
            public Dispose () : void
            public constructor ($columns: UnityEngine.UIElements.Columns, $sortDescriptions: UnityEngine.UIElements.SortColumnDescriptions, $sortedColumns: System.Collections.Generic.List$1<UnityEngine.UIElements.SortColumnDescription>)
        }
        /** 
        Use this class to display a contextual menu.
        */
        class ContextualMenuManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if the event triggers the display of the contextual menu. This method also displays the menu.
            * @param $evt The event to inspect.
            * @param $eventHandler The element for which the menu is displayed.
            */
            public DisplayMenuIfEventMatches ($evt: UnityEngine.UIElements.EventBase, $eventHandler: UnityEngine.UIElements.IEventHandler) : void
            /** 
            Displays the contextual menu.
            * @param $triggerEvent The event that triggered the display of the menu.
            * @param $target The element for which the menu is displayed.
            * @returns True if a contextual menu was effectively displayed. 
            */
            public DisplayMenu ($triggerEvent: UnityEngine.UIElements.EventBase, $target: UnityEngine.UIElements.IEventHandler) : void
        }
        /** 
        Manipulator that displays a contextual menu when the user clicks the right mouse button or presses the menu key on the keyboard.
        */
        class ContextualMenuManipulator extends UnityEngine.UIElements.PointerManipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            public constructor ($menuBuilder: System.Action$1<UnityEngine.UIElements.ContextualMenuPopulateEvent>)
        }
        class EventBase$1<T> extends UnityEngine.UIElements.EventBase implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get eventTypeId(): bigint;
            public static TypeId () : any
            public static GetPooled () : any
        }
        class MouseEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            public get modifiers(): UnityEngine.EventModifiers;
            public get mousePosition(): UnityEngine.Vector2;
            public get localMousePosition(): UnityEngine.Vector2;
            public get mouseDelta(): UnityEngine.Vector2;
            public get clickCount(): number;
            public get button(): number;
            public get pressedButtons(): number;
            public get shiftKey(): boolean;
            public get ctrlKey(): boolean;
            public get commandKey(): boolean;
            public get altKey(): boolean;
            public get actionKey(): boolean;
            public get currentTarget(): UnityEngine.UIElements.IEventHandler;
            public static GetPooled ($systemEvent: any) : any
            public static GetPooled ($position: any, $button: any, $clickCount: any, $delta: any, $modifiers?: any) : any
            public static GetPooled ($triggerEvent: any) : any
            public static GetPooled () : any
        }
        interface IMouseEvent
        {
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            The mouse position in the panel coordinate system.
            */
            mousePosition : UnityEngine.Vector2
            /** 
            The mouse position in the current target coordinate system.
            */
            localMousePosition : UnityEngine.Vector2
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            mouseDelta : UnityEngine.Vector2
            /** 
            The number of times the button is pressed.
            */
            clickCount : number
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            button : number
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            pressedButtons : number
            /** 
            Return true if the Shift key is pressed.
            */
            shiftKey : boolean
            /** 
            Return true if the Ctrl key is pressed.
            */
            ctrlKey : boolean
            /** 
            Return true if the Windows/Command key is pressed.
            */
            commandKey : boolean
            /** 
            Return true if the Alt key is pressed.
            */
            altKey : boolean
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            actionKey : boolean
        }
        /** 
        The event sent when a contextual menu requires menu items.
        The event trickles down and bubbles up.
        */
        class ContextualMenuPopulateEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.ContextualMenuPopulateEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            The menu to populate.
            */
            public get menu(): UnityEngine.UIElements.DropdownMenu;
            /** 
            The event that triggered the ContextualMenuPopulateEvent.
            */
            public get triggerEvent(): UnityEngine.UIElements.EventBase;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $triggerEvent The event that triggered the display of the contextual menu.
            * @param $menu The menu to populate.
            * @param $target The element that triggered the display of the contextual menu.
            * @param $menuManager The menu manager that displays the menu.
            * @returns An initialized event. 
            */
            public static GetPooled ($triggerEvent: UnityEngine.UIElements.EventBase, $menu: UnityEngine.UIElements.DropdownMenu, $target: UnityEngine.UIElements.IEventHandler, $menuManager: UnityEngine.UIElements.ContextualMenuManager) : UnityEngine.UIElements.ContextualMenuPopulateEvent
            public constructor ()
        }
        class BaseField$1<TValueType> extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public static noLabelVariantUssClassName : any
            public static labelDraggerVariantUssClassName : any
            public static mixedValueLabelUssClassName : any
            public static alignedFieldUssClassName : any
            public get value(): TValueType;
            public set value(value: TValueType);
            public get labelElement(): UnityEngine.UIElements.Label;
            public get label(): string;
            public set label(value: string);
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            public SetValueWithoutNotify ($newValue: TValueType) : void
        }
        interface IMixedValueSupport
        {
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            showMixedValue : boolean
        }
        interface INotifyValueChanged$1<T>
        {
            value : T
            SetValueWithoutNotify ($newValue: T) : void
        }
        /** 
        A BaseBoolField is a clickable element that represents a boolean value.
        */
        class BaseBoolField extends UnityEngine.UIElements.BaseField$1<boolean> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether to activate the toggle when the user clicks the label.
            */
            public get toggleOnLabelClick(): boolean;
            public set toggleOnLabelClick(value: boolean);
            /** 
            Optional text that appears after the BaseBoolField.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        class TextInputBaseField$1<TValueType> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public static singleLineInputUssClassName : any
            public static multilineInputUssClassName : any
            public static placeholderUssClassName : any
            public static textInputUssName : any
            public get textSelection(): UnityEngine.UIElements.ITextSelection;
            public get textEdition(): UnityEngine.UIElements.ITextEdition;
            public get isReadOnly(): boolean;
            public set isReadOnly(value: boolean);
            public get isPasswordField(): boolean;
            public set isPasswordField(value: boolean);
            public get autoCorrection(): boolean;
            public set autoCorrection(value: boolean);
            public get hideMobileInput(): boolean;
            public set hideMobileInput(value: boolean);
            public get keyboardType(): UnityEngine.TouchScreenKeyboardType;
            public set keyboardType(value: UnityEngine.TouchScreenKeyboardType);
            public get touchScreenKeyboard(): UnityEngine.TouchScreenKeyboard;
            public get maxLength(): number;
            public set maxLength(value: number);
            public get isDelayed(): boolean;
            public set isDelayed(value: boolean);
            public get maskChar(): number;
            public set maskChar(value: number);
            public get selectionColor(): UnityEngine.Color;
            public get cursorColor(): UnityEngine.Color;
            public get cursorIndex(): number;
            public set cursorIndex(value: number);
            public get cursorPosition(): UnityEngine.Vector2;
            public get selectIndex(): number;
            public set selectIndex(value: number);
            public get selectAllOnFocus(): boolean;
            public set selectAllOnFocus(value: boolean);
            public get selectAllOnMouseUp(): boolean;
            public set selectAllOnMouseUp(value: boolean);
            public get doubleClickSelectsWord(): boolean;
            public set doubleClickSelectsWord(value: boolean);
            public get tripleClickSelectsLine(): boolean;
            public set tripleClickSelectsLine(value: boolean);
            public get text(): string;
            public get emojiFallbackSupport(): boolean;
            public set emojiFallbackSupport(value: boolean);
            public get verticalScrollerVisibility(): UnityEngine.UIElements.ScrollerVisibility;
            public set verticalScrollerVisibility(value: UnityEngine.UIElements.ScrollerVisibility);
            public SelectAll () : void
            public SelectNone () : void
            public SelectRange ($cursorIndex: number, $selectionIndex: number) : void
            public MeasureTextSize ($textToMeasure: string, $width: number, $widthMode: UnityEngine.UIElements.VisualElement.MeasureMode, $height: number, $heightMode: UnityEngine.UIElements.VisualElement.MeasureMode) : UnityEngine.Vector2
        }
        class TextValueField$1<TValueType> extends UnityEngine.UIElements.TextInputBaseField$1<TValueType> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<TValueType>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            public get formatString(): string;
            public set formatString(value: string);
            public ApplyInputDeviceDelta ($delta: UnityEngine.Vector3, $speed: UnityEngine.UIElements.DeltaSpeed, $startValue: TValueType) : void
            public StartDragging () : void
            public StopDragging () : void
        }
        interface IValueField$1<T>
        {
            value : T
            ApplyInputDeviceDelta ($delta: UnityEngine.Vector3, $speed: UnityEngine.UIElements.DeltaSpeed, $startValue: T) : void
            StartDragging () : void
            StopDragging () : void
        }
        class BaseCompositeField$3<TValueType, TField, TFieldValue> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public static spacerUssClassName : any
            public static multilineVariantUssClassName : any
            public static fieldGroupUssClassName : any
            public static fieldUssClassName : any
            public static firstFieldVariantUssClassName : any
            public static twoLinesVariantUssClassName : any
        }
        /** 
        Options to change the drag-and-drop mode for items in the ListView.
        */
        enum ListViewReorderMode
        { Simple = 0, Animated = 1 }
        /** 
        Base class for a list view, a vertically scrollable area that links to, and displays, a list of items.
        */
        class BaseListView extends UnityEngine.UIElements.BaseVerticalCollectionView implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for ListView elements.
            */
            public static ussClassName : string
            /** 
            The USS class name of item elements in ListView elements.
            */
            public static itemUssClassName : string
            /** 
            The USS class name for label displayed when ListView is empty.
            */
            public static emptyLabelUssClassName : string
            /** 
            The USS class name for label displayed when ListView is trying to edit too many items.
            */
            public static overMaxMultiEditLimitClassName : string
            /** 
            The USS class name for reorderable animated ListView elements.
            */
            public static reorderableUssClassName : string
            /** 
            The USS class name for item elements in reorderable animated ListView.
            */
            public static reorderableItemUssClassName : string
            /** 
            The USS class name for item container in reorderable animated ListView.
            */
            public static reorderableItemContainerUssClassName : string
            /** 
            The USS class name for drag handle in reorderable animated ListView.
            */
            public static reorderableItemHandleUssClassName : string
            /** 
            The USS class name for drag handle bar in reorderable animated ListView.
            */
            public static reorderableItemHandleBarUssClassName : string
            /** 
            The USS class name for the footer of the ListView.
            */
            public static footerUssClassName : string
            /** 
            The USS class name for the foldout header of the ListView.
            */
            public static foldoutHeaderUssClassName : string
            /** 
            The USS class name for the size field of the ListView when show bound collection size is enabled
            */
            public static arraySizeFieldUssClassName : string
            /** 
            The USS class name for the size field of the ListView when foldout header is enabled.
            */
            public static arraySizeFieldWithHeaderUssClassName : string
            /** 
            The USS class name for the size field of the ListView when the footer is enabled.
            */
            public static arraySizeFieldWithFooterUssClassName : string
            /** 
            The USS class name for ListView when foldout header is enabled.
            */
            public static listViewWithHeaderUssClassName : string
            /** 
            The USS class name for ListView when add/remove footer is enabled.
            */
            public static listViewWithFooterUssClassName : string
            /** 
            The USS class name for scroll view when add/remove footer is enabled.
            */
            public static scrollViewWithFooterUssClassName : string
            /** 
            The name of the add button element in the footer.
            */
            public static footerAddButtonName : string
            /** 
            The name of the remove button element in the footer.
            */
            public static footerRemoveButtonName : string
            /** 
            This property controls whether the list view displays the collection size (number of items).
            */
            public get showBoundCollectionSize(): boolean;
            public set showBoundCollectionSize(value: boolean);
            /** 
            This property controls whether the list view displays a header, in the form of a foldout that can be expanded or collapsed.
            */
            public get showFoldoutHeader(): boolean;
            public set showFoldoutHeader(value: boolean);
            /** 
            This property controls the text of the foldout header when using showFoldoutHeader.
            */
            public get headerTitle(): string;
            public set headerTitle(value: string);
            /** 
            This callback allows the user to make their own header for this control.
            */
            public get makeHeader(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeHeader(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            This callback allows the user to make their own footer for this control.
            */
            public get makeFooter(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeFooter(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            This property controls whether a footer will be added to the list view.
            */
            public get showAddRemoveFooter(): boolean;
            public set showAddRemoveFooter(value: boolean);
            /** 
            This property controls whether every element in the list will get its data source setup automatically to the
            correct item in the collection's source.
            */
            public get bindingSourceSelectionMode(): UnityEngine.UIElements.BindingSourceSelectionMode;
            public set bindingSourceSelectionMode(value: UnityEngine.UIElements.BindingSourceSelectionMode);
            /** 
            The view controller for this view, cast as a BaseListViewController.
            */
            public get viewController(): UnityEngine.UIElements.BaseListViewController;
            /** 
            This property controls the drag and drop mode for the list view.
            */
            public get reorderMode(): UnityEngine.UIElements.ListViewReorderMode;
            public set reorderMode(value: UnityEngine.UIElements.ListViewReorderMode);
            /** 
            This callback allows the user to set a Visual Element to replace the "List is empty" Label shown when the ListView is empty.
            */
            public get makeNoneElement(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeNoneElement(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            This property allows the user to allow or block the addition of an item when clicking on the Add Button.
            It must return true or false.
            */
            public get allowAdd(): boolean;
            public set allowAdd(value: boolean);
            /** 
            This callback allows the user to implement a DropdownMenu when the Add Button is clicked.
            */
            public get overridingAddButtonBehavior(): System.Action$2<UnityEngine.UIElements.BaseListView, UnityEngine.UIElements.Button>;
            public set overridingAddButtonBehavior(value: System.Action$2<UnityEngine.UIElements.BaseListView, UnityEngine.UIElements.Button>);
            /** 
            This callback allows the user to implement their own code to be executed when the Add Button is clicked.
            */
            public get onAdd(): System.Action$1<UnityEngine.UIElements.BaseListView>;
            public set onAdd(value: System.Action$1<UnityEngine.UIElements.BaseListView>);
            /** 
            This property allows the user to allow or block the removal of an item when clicking on the Remove Button.
            It must return true or false.
            */
            public get allowRemove(): boolean;
            public set allowRemove(value: boolean);
            /** 
            This callback allows the user to implement their own code to be executed when the Remove Button is clicked.
            */
            public get onRemove(): System.Action$1<UnityEngine.UIElements.BaseListView>;
            public set onRemove(value: System.Action$1<UnityEngine.UIElements.BaseListView>);
            public add_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
        }
        /** 
        Option to change the data source assignation when using Data Binding in collection views.
        */
        enum BindingSourceSelectionMode
        { Manual = 0, AutoAssign = 1 }
        /** 
        Use this as the super class if you are declaring a custom VisualElement that displays text. For example, Button or Label use this as their base class.
        */
        class TextElement extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.ITextSelection, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of selectable text elements.
            */
            public static selectableUssClassName : string
            /** 
            The text to be displayed.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            When false, rich text tags will not be parsed.
            */
            public get enableRichText(): boolean;
            public set enableRichText(value: boolean);
            /** 
            Specifies the order in which the system should look for Emoji characters when rendering text.
            If this setting is enabled, the global Emoji Fallback list will be searched first for characters defined as
            Emoji in the Unicode 14.0 standard.
            */
            public get emojiFallbackSupport(): boolean;
            public set emojiFallbackSupport(value: boolean);
            /** 
            Specifies whether escape sequences are displayed as is or if they are replaced by the character they represent.
            */
            public get parseEscapeSequences(): boolean;
            public set parseEscapeSequences(value: boolean);
            /** 
            When true, a tooltip displays the full version of elided text, and also if a tooltip had been previously
            provided, it will be overwritten.
            */
            public get displayTooltipWhenElided(): boolean;
            public set displayTooltipWhenElided(value: boolean);
            /** 
            Returns true if text is elided, false otherwise.
            */
            public get isElided(): boolean;
            /** 
            Returns the TextElement experimental interface.
            */
            public get experimental(): UnityEngine.UIElements.ITextElementExperimentalFeatures;
            /** 
            Retrieves this TextElement's ITextSelection
            */
            public get selection(): UnityEngine.UIElements.ITextSelection;
            /** 
            Returns true if the element is read only.
            */
            public get isReadOnly(): boolean;
            public set isReadOnly(value: boolean);
            /** 
            Maximum number of characters for that element
            */
            public get maxLength(): number;
            public set maxLength(value: number);
            /** 
            A short hint to help users understand what to enter in the field.
            */
            public get placeholder(): string;
            public set placeholder(value: string);
            /** 
            If set to true, the value property isn't updated until either the user presses Enter or the element loses focus.
            */
            public get isDelayed(): boolean;
            public set isDelayed(value: boolean);
            /** 
            The character used for masking when in password mode.
            */
            public get maskChar(): number;
            public set maskChar(value: number);
            /** 
            Returns true if the field is used to edit a password.
            */
            public get isPassword(): boolean;
            public set isPassword(value: boolean);
            /** 
            Hides the placeholder on focus.
            */
            public get hidePlaceholderOnFocus(): boolean;
            public set hidePlaceholderOnFocus(value: boolean);
            /** 
            Determines if the soft keyboard auto correction is turned on or off.
            */
            public get autoCorrection(): boolean;
            public set autoCorrection(value: boolean);
            /** 
            Hides or shows the mobile input field.
            */
            public get hideMobileInput(): boolean;
            public set hideMobileInput(value: boolean);
            /** 
            The TouchScreenKeyboard being used to edit the Input Field.
            */
            public get touchScreenKeyboard(): UnityEngine.TouchScreenKeyboard;
            /** 
            The type of mobile keyboard that will be used.
            */
            public get keyboardType(): UnityEngine.TouchScreenKeyboardType;
            public set keyboardType(value: UnityEngine.TouchScreenKeyboardType);
            /** 
            Returns true if the field is selectable.
            */
            public get isSelectable(): boolean;
            public set isSelectable(value: boolean);
            /** 
            Color of the cursor.
            */
            public get cursorColor(): UnityEngine.Color;
            public set cursorColor(value: UnityEngine.Color);
            /** 
            Background color of selected text.
            */
            public get selectionColor(): UnityEngine.Color;
            public set selectionColor(value: UnityEngine.Color);
            /** 
            This is the cursor index in the text presented.
            */
            public get cursorIndex(): number;
            public set cursorIndex(value: number);
            /** 
            Controls whether double clicking selects the word under the mouse pointer or not.
            */
            public get doubleClickSelectsWord(): boolean;
            public set doubleClickSelectsWord(value: boolean);
            /** 
            This is the selection index in the text presented.
            */
            public get selectIndex(): number;
            public set selectIndex(value: number);
            /** 
            Controls whether triple clicking selects the entire line under the mouse pointer or not.
            */
            public get tripleClickSelectsLine(): boolean;
            public set tripleClickSelectsLine(value: boolean);
            /** 
            Controls whether the element's content is selected upon receiving focus.
            */
            public get selectAllOnFocus(): boolean;
            public set selectAllOnFocus(value: boolean);
            /** 
            Controls whether the element's content is selected when you mouse up for the first time.
            */
            public get selectAllOnMouseUp(): boolean;
            public set selectAllOnMouseUp(value: boolean);
            /** 
            The position of the text cursor inside the element.
            */
            public get cursorPosition(): UnityEngine.Vector2;
            public MeasureTextSize ($textToMeasure: string, $width: number, $widthMode: UnityEngine.UIElements.VisualElement.MeasureMode, $height: number, $heightMode: UnityEngine.UIElements.VisualElement.MeasureMode) : UnityEngine.Vector2
            public constructor ()
            /** 
            Setting this property will override the displayed text while preserving the original text value.
            */
            public SetRenderedText ($renderedText: string) : void
            /** 
            Return true is the TextElement has a selection.
            */
            public HasSelection () : boolean
            /** 
            Selects all the text contained in the field.
            */
            public SelectAll () : void
            /** 
            Remove selection
            */
            public SelectNone () : void
            /** 
            Select text between cursorIndex and selectIndex.
            */
            public SelectRange ($cursorIndex: number, $selectionIndex: number) : void
        }
        interface ITextEdition
        {
            /** 
            Returns true if the element is read only.
            */
            isReadOnly : boolean
            /** 
            Maximum number of characters for that element
            */
            maxLength : number
            /** 
            A short hint to help users understand what to enter in the field.
            */
            placeholder : string
            /** 
            If set to true, the value property isn't updated until either the user presses Enter or the element loses focus.
            */
            isDelayed : boolean
            /** 
            The character used for masking when in password mode.
            */
            maskChar : number
            /** 
            Returns true if the field is used to edit a password.
            */
            isPassword : boolean
            /** 
            Hides the placeholder on focus.
            */
            hidePlaceholderOnFocus : boolean
            /** 
            Determines if the soft keyboard auto correction is turned on or off.
            */
            autoCorrection : boolean
            /** 
            Hides or shows the mobile input field.
            */
            hideMobileInput : boolean
            /** 
            The TouchScreenKeyboard being used to edit the Input Field.
            */
            touchScreenKeyboard : UnityEngine.TouchScreenKeyboard
            /** 
            The type of mobile keyboard that will be used.
            */
            keyboardType : UnityEngine.TouchScreenKeyboardType
        }
        interface ITextElementExperimentalFeatures extends UnityEngine.UIElements.IExperimentalFeatures
        {
            /** 
            Returns the animation experimental interface.
            */
            animation : UnityEngine.UIElements.Experimental.ITransitionAnimations
            /** 
            Setting this property will override the displayed text while preserving the original text value.
            */
            SetRenderedText ($renderedText: string) : void
        }
        interface ITextSelection
        {
            /** 
            Returns true if the field is selectable.
            */
            isSelectable : boolean
            /** 
            Color of the cursor.
            */
            cursorColor : UnityEngine.Color
            /** 
            Background color of selected text.
            */
            selectionColor : UnityEngine.Color
            /** 
            This is the cursor index in the text presented.
            */
            cursorIndex : number
            /** 
            Controls whether double clicking selects the word under the mouse pointer or not.
            */
            doubleClickSelectsWord : boolean
            /** 
            This is the selection index in the text presented.
            */
            selectIndex : number
            /** 
            Controls whether triple clicking selects the entire line under the mouse pointer or not.
            */
            tripleClickSelectsLine : boolean
            /** 
            Controls whether the element's content is selected upon receiving focus.
            */
            selectAllOnFocus : boolean
            /** 
            Controls whether the element's content is selected when you mouse up for the first time.
            */
            selectAllOnMouseUp : boolean
            /** 
            The position of the text cursor inside the element.
            */
            cursorPosition : UnityEngine.Vector2
            /** 
            Return true is the TextElement has a selection.
            */
            HasSelection () : boolean
            /** 
            Selects all the text contained in the field.
            */
            SelectAll () : void
            /** 
            Remove selection
            */
            SelectNone () : void
            /** 
            Select text between cursorIndex and selectIndex.
            */
            SelectRange ($cursorIndex: number, $selectionIndex: number) : void
        }
        /** 
        This is a clickable button.
        */
        class Button extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.ITextSelection, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The USS class name for Button elements with an icon.
            */
            public static iconUssClassName : string
            /** 
            The USS class name for Button elements with an icon only, no text.
            */
            public static iconOnlyUssClassName : string
            /** 
            The USS class name of the image element that will be used to display the icon texture.
            */
            public static imageUSSClassName : string
            /** 
            Clickable MouseManipulator for this Button.
            */
            public get clickable(): UnityEngine.UIElements.Clickable;
            public set clickable(value: UnityEngine.UIElements.Clickable);
            /** 
            The Texture, Sprite, or VectorImage that will represent an icon within a Button element.
            */
            public get iconImage(): UnityEngine.UIElements.Background;
            public set iconImage(value: UnityEngine.UIElements.Background);
            public get text(): string;
            public set text(value: string);
            public add_onClick ($value: System.Action) : void
            public remove_onClick ($value: System.Action) : void
            public add_clicked ($value: System.Action) : void
            public remove_clicked ($value: System.Action) : void
            public constructor ()
            public constructor ($iconImage: UnityEngine.UIElements.Background, $clickEvent?: System.Action)
            public constructor ($clickEvent: System.Action)
        }
        /** 
        Describe an allowed child element for an element.
        */
        class UxmlChildElementDescription extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the allowed child element.
            */
            public get elementName(): string;
            /** 
            The namespace name of the allowed child element.
            */
            public get elementNamespace(): string;
            public constructor ($t: System.Type)
        }
        class BasePopupField$2<TValueType, TValueChoice> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static textUssClassName : any
            public static arrowUssClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public get choices(): System.Collections.Generic.List$1<TValueChoice>;
            public set choices(value: System.Collections.Generic.List$1<TValueChoice>);
            public get text(): string;
        }
        /** 
        This is the direction of the Slider and SliderInt.
        */
        enum SliderDirection
        { Horizontal = 0, Vertical = 1 }
        class BaseSlider$1<TValueType> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<TValueType>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public static horizontalVariantUssClassName : any
            public static verticalVariantUssClassName : any
            public static dragContainerUssClassName : any
            public static trackerUssClassName : any
            public static draggerUssClassName : any
            public static draggerBorderUssClassName : any
            public static textFieldClassName : any
            public static fillUssClassName : any
            public static movableUssClassName : any
            public get lowValue(): TValueType;
            public set lowValue(value: TValueType);
            public get highValue(): TValueType;
            public set highValue(value: TValueType);
            public get range(): TValueType;
            public get pageSize(): number;
            public set pageSize(value: number);
            public get showInputField(): boolean;
            public set showInputField(value: boolean);
            public get fill(): boolean;
            public set fill(value: boolean);
            public get value(): TValueType;
            public set value(value: TValueType);
            public get direction(): UnityEngine.UIElements.SliderDirection;
            public set direction(value: UnityEngine.UIElements.SliderDirection);
            public get inverted(): boolean;
            public set inverted(value: boolean);
            public ApplyInputDeviceDelta ($delta: UnityEngine.Vector3, $speed: UnityEngine.UIElements.DeltaSpeed, $startValue: TValueType) : void
            public AdjustDragElement ($factor: number) : void
        }
        /** 
        Speed at which the value changes for a given input device delta.
        */
        enum DeltaSpeed
        { Fast = 0, Normal = 1, Slow = 2 }
        /** 
        Base class for describing an XML attribute.
        */
        class UxmlAttributeDescription extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The attribute name.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            A list of obsolete names for this attribute.
            */
            public get obsoleteNames(): System.Collections.Generic.IEnumerable$1<string>;
            public set obsoleteNames(value: System.Collections.Generic.IEnumerable$1<string>);
            /** 
            Attribute type.
            */
            public get type(): string;
            /** 
            Attribute namespace.
            */
            public get typeNamespace(): string;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Whether the attribute is optional, required or prohibited.
            */
            public get use(): UnityEngine.UIElements.UxmlAttributeDescription.Use;
            public set use(value: UnityEngine.UIElements.UxmlAttributeDescription.Use);
            /** 
            Restrictions on the possible values of the attribute.
            */
            public get restriction(): UnityEngine.UIElements.UxmlTypeRestriction;
            public set restriction(value: UnityEngine.UIElements.UxmlTypeRestriction);
        }
        class TypedUxmlAttributeDescription$1<T> extends UnityEngine.UIElements.UxmlAttributeDescription
        {
            protected [__keep_incompatibility]: never;
            public get defaultValue(): T;
            public set defaultValue(value: T);
            public get defaultValueAsString(): string;
            public GetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : T
        }
        class BaseFieldTraits$2<TValueType, TValueUxmlAttributeType> extends UnityEngine.UIElements.BaseField$1.UxmlTraits<TValueType>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        A data structure for the tree view item expansion event.
        */
        class TreeViewExpansionChangedArgs extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The id of the item being expanded or collapsed. Returns -1 when expandAll() or collapseAll() is being called.
            */
            public get id(): number;
            public set id(value: number);
            /** 
            Indicates whether the item is expanded (true) or collapsed (false).
            */
            public get isExpanded(): boolean;
            public set isExpanded(value: boolean);
            /** 
            Indicates whether the expandAllChildren or collapsedAllChildren is applied when expanding the item.
            */
            public get isAppliedToAllChildren(): boolean;
            public set isAppliedToAllChildren(value: boolean);
            public constructor ()
        }
        /** 
        Base class for a tree view, a vertically scrollable area that links to, and displays, a list of items organized in a tree.
        */
        class BaseTreeView extends UnityEngine.UIElements.BaseVerticalCollectionView implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for TreeView elements.
            */
            public static ussClassName : string
            /** 
            The USS class name for TreeView item elements.
            */
            public static itemUssClassName : string
            /** 
            The USS class name for TreeView item toggle elements.
            */
            public static itemToggleUssClassName : string
            /** 
            The USS class name for TreeView indent element.
            */
            public static itemIndentUssClassName : string
            /** 
            The USS class name for TreeView item container elements.
            */
            public static itemContentContainerUssClassName : string
            /** 
            Access to the itemsSource. For a TreeView, the source contains the items wrappers.
            */
            public get itemsSource(): System.Collections.IList;
            /** 
            The view controller for this view, cast as a BaseTreeViewController.
            */
            public get viewController(): UnityEngine.UIElements.BaseTreeViewController;
            /** 
            When true, items are automatically expanded when added to the TreeView.
            */
            public get autoExpand(): boolean;
            public set autoExpand(value: boolean);
            public add_itemExpandedChanged ($value: System.Action$1<UnityEngine.UIElements.TreeViewExpansionChangedArgs>) : void
            public remove_itemExpandedChanged ($value: System.Action$1<UnityEngine.UIElements.TreeViewExpansionChangedArgs>) : void
            /** 
            Gets the root item identifiers.
            * @returns The root item identifiers. 
            */
            public GetRootIds () : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Gets the TreeView's total number of items.
            * @returns The TreeView's total number of items. 
            */
            public GetTreeCount () : number
            /** 
            Gets the specified TreeView item's identifier.
            * @param $index The TreeView item index.
            * @returns The TreeView item's identifier. 
            */
            public GetIdForIndex ($index: number) : number
            /** 
            Gets the specified TreeView item's parent identifier.
            * @param $index The TreeView item index.
            * @returns The TreeView item's parent identifier. 
            */
            public GetParentIdForIndex ($index: number) : number
            /** 
            Gets children identifiers for the specified TreeView item.
            * @param $index The TreeView item index.
            * @returns The children item identifiers. 
            */
            public GetChildrenIdsForIndex ($index: number) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Removes an item of the tree if it can find it.
            * @param $id The item id.
            * @param $rebuildTree Whether we need to rebuild tree data. Set to false when doing multiple additions to save a few rebuilds.
            * @returns If the item was removed from the tree. 
            */
            public TryRemoveItem ($id: number, $rebuildTree?: boolean) : boolean
            /** 
            Sets the currently selected item by id.
            * @param $id The item id.
            */
            public SetSelectionById ($id: number) : void
            public SetSelectionById ($ids: System.Collections.Generic.IEnumerable$1<number>) : void
            public SetSelectionByIdWithoutNotify ($ids: System.Collections.Generic.IEnumerable$1<number>) : void
            /** 
            Adds an item to the current selection by id.
            * @param $id The item id.
            */
            public AddToSelectionById ($id: number) : void
            /** 
            Removes an item from the current selection by id.
            * @param $id The item id.
            */
            public RemoveFromSelectionById ($id: number) : void
            /** 
            Returns true if the specified TreeView item is expanded, false otherwise.
            * @param $id The TreeView item identifier.
            */
            public IsExpanded ($id: number) : boolean
            /** 
            Collapses the specified TreeView item.
            * @param $id The TreeView item identifier.
            * @param $collapseAllChildren When true, all children will also get collapsed. This is false by default.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done. This is true by default.
            */
            public CollapseItem ($id: number, $collapseAllChildren?: boolean, $refresh?: boolean) : void
            /** 
            Expands the specified TreeView item.
            * @param $id The TreeView item identifier.
            * @param $expandAllChildren When true, all children will also get expanded. This is false by default.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done. This is true by default.
            */
            public ExpandItem ($id: number, $expandAllChildren?: boolean, $refresh?: boolean) : void
            /** 
            Expands all root TreeView items.
            */
            public ExpandRootItems () : void
            /** 
            Expands all TreeView items, including children.
            */
            public ExpandAll () : void
            /** 
            Collapses all TreeView items, including children.
            */
            public CollapseAll () : void
        }
        /** 
        Options to display alternating background colors for collection view rows.
        */
        enum AlternatingRowBackground
        { None = 0, ContentOnly = 1, All = 2 }
        /** 
        Options to change the virtualization method used by the collection view to display its content.
        */
        enum CollectionVirtualizationMethod
        { FixedHeight = 0, DynamicHeight = 1 }
        /** 
        Information about a drag-and-drop operation that is about to start.
        See BaseVerticalCollectionView.canStartDrag.
        */
        class CanStartDragArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The element on which the drag operation is starting.
            */
            public draggedElement : UnityEngine.UIElements.VisualElement
            /** 
            The ID of the dragged element.
            */
            public id : number
            /** 
            The selected IDs in the source.
            */
            public selectedIds : System.Collections.Generic.IEnumerable$1<number>
        }
        /** 
        Information about a drag-and-drop operation that just started.
        You can use it to store generic data for the rest of the drag.
        See BaseVerticalCollectionView.setupDragAndDrop.
        */
        class SetupDragAndDropArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The element on which the drag operation started.
            */
            public draggedElement : UnityEngine.UIElements.VisualElement
            /** 
            The selected IDs in the source.
            */
            public selectedIds : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Provides entry points to initialize data and visual of the new drag-and-drop operation.
            */
            public startDragArgs : UnityEngine.UIElements.StartDragArgs
        }
        /** 
        Provides entry points to initialize the new drag-and-drop operation.
        */
        class StartDragArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The title displayed near the pointer to identify what is being dragged.
            Should be set during the BaseVerticalCollectionView.setupDragAndDrop callback.
            */
            public get title(): string;
            /** 
            The mode to use for this drag-and-drop operation.
            */
            public get visualMode(): UnityEngine.UIElements.DragVisualMode;
            /** 
            Sets data associated with the current drag-and-drop operation.
            * @param $key The key for this entry.
            * @param $data The data to store.
            */
            public SetGenericData ($key: string, $data: any) : void
            public SetUnityObjectReferences ($references: System.Collections.Generic.IEnumerable$1<UnityEngine.Object>) : void
            /** 
            Stores an array of paths to assets being dragged during this drag-and-drop operation. 
            * @param $paths The asset paths.
            */
            public SetPaths ($paths: System.Array$1<string>) : void
            public constructor ($title: string, $visualMode: UnityEngine.UIElements.DragVisualMode)
        }
        /** 
        Information about a drag-and-drop operation in progress.
        See BaseVerticalCollectionView.dragAndDropUpdate and BaseVerticalCollectionView.handleDrop.
        */
        class HandleDragAndDropArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The world position of the pointer.
            */
            public get position(): UnityEngine.Vector2;
            /** 
            The target of the drop. There is only a target when hovering over an item. DropPosition.OverItem
            */
            public get target(): any;
            /** 
            The index at which the drop operation wants to happen.
            */
            public get insertAtIndex(): number;
            /** 
            The new parent targeted by the drag-and-drop operation. Used only for trees.
            */
            public get parentId(): number;
            /** 
            The child index under the parentId that the drag-and-drop operation targets. Used only for trees.
            */
            public get childIndex(): number;
            /** 
            The type of drop position.
            */
            public get dropPosition(): UnityEngine.UIElements.DragAndDropPosition;
            /** 
            Data stored for the drag-and-drop operation.
            */
            public get dragAndDropData(): UnityEngine.UIElements.DragAndDropData;
        }
        /** 
        The status of a drag-and-drop operation.
        */
        enum DragVisualMode
        { None = 0, Copy = 1, Move = 2, Rejected = 3 }
        /** 
        Controls how many items can be selected at once.
        */
        enum SelectionType
        { None = 0, Single = 1, Multiple = 2 }
        class KeyboardEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IKeyboardEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get modifiers(): UnityEngine.EventModifiers;
            public get character(): number;
            public get keyCode(): UnityEngine.KeyCode;
            public get shiftKey(): boolean;
            public get ctrlKey(): boolean;
            public get commandKey(): boolean;
            public get altKey(): boolean;
            public get actionKey(): boolean;
            public static GetPooled ($c: any, $keyCode: any, $modifiers: any) : any
            public static GetPooled ($systemEvent: any) : any
            public static GetPooled () : any
        }
        interface IKeyboardEvent
        {
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            Gets the character entered.
            */
            character : number
            /** 
            The key code.
            */
            keyCode : UnityEngine.KeyCode
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            shiftKey : boolean
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            ctrlKey : boolean
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            commandKey : boolean
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            altKey : boolean
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            actionKey : boolean
        }
        /** 
        This event is sent when a key is pressed.
        */
        class KeyDownEvent extends UnityEngine.UIElements.KeyboardEventBase$1<UnityEngine.UIElements.KeyDownEvent> implements UnityEngine.UIElements.IKeyboardEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets the character entered.
            */
            public get character(): number;
            /** 
            The key code.
            */
            public get keyCode(): UnityEngine.KeyCode;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Extensions methods to provide additional IBindable functionality.
        */
        class IBindingExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public static IsBound ($control: UnityEngine.UIElements.IBindable) : boolean
        }
        /** 
        A Bounds editor field. For more information, refer to.
        */
        class BoundsField extends UnityEngine.UIElements.BaseField$1<UnityEngine.Bounds> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Bounds>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of center fields in elements of this type.
            */
            public static centerFieldUssClassName : string
            /** 
            USS class name of extents fields in elements of this type.
            */
            public static extentsFieldUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A BoundsInt field. For more information, refer to.
        */
        class BoundsIntField extends UnityEngine.UIElements.BaseField$1<UnityEngine.BoundsInt> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.BoundsInt>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of position fields in elements of this type.
            */
            public static positionUssClassName : string
            /** 
            USS class name of size fields in elements of this type.
            */
            public static sizeUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Styled visual element to match the IMGUI Box Style. For more information, refer to.
        */
        class Box extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ()
        }
        class UxmlFactory$1<TCreatedType> extends UnityEngine.UIElements.UxmlFactory$2<TCreatedType, UnityEngine.UIElements.VisualElement.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the UXML element read by the factory.
            */
            public get uxmlName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The fully qualified name of the UXML element read by the factory.
            */
            public get uxmlQualifiedName(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            /** 
            The type of element for which this element type can substitute for.
            */
            public get substituteForTypeName(): string;
            /** 
            The UXML namespace for the type returned by substituteForTypeName.
            */
            public get substituteForTypeNamespace(): string;
            /** 
            The fully qualified XML name for the type returned by substituteForTypeName.
            */
            public get substituteForTypeQualifiedName(): string;
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        /** 
        Describes a VisualElement background.
        */
        class Background extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Background>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The texture to display as a background.
            */
            public get texture(): UnityEngine.Texture2D;
            public set texture(value: UnityEngine.Texture2D);
            /** 
            The sprite to display as a background.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** 
            The RenderTexture to display as a background.
            */
            public get renderTexture(): UnityEngine.RenderTexture;
            public set renderTexture(value: UnityEngine.RenderTexture);
            /** 
            The VectorImage to display as a background.
            */
            public get vectorImage(): UnityEngine.UIElements.VectorImage;
            public set vectorImage(value: UnityEngine.UIElements.VectorImage);
            /** 
            Creates a background from a Texture2D.
            * @param $t The texture to use as a background.
            * @returns A new background object. 
            */
            public static FromTexture2D ($t: UnityEngine.Texture2D) : UnityEngine.UIElements.Background
            /** 
            Creates a background from a RenderTexture.
            * @param $rt The render texture to use as a background.
            * @returns A new background object. 
            */
            public static FromRenderTexture ($rt: UnityEngine.RenderTexture) : UnityEngine.UIElements.Background
            /** 
            Creates a background from a Sprite.
            * @param $s The sprite to use as a background.
            * @returns A new background object. 
            */
            public static FromSprite ($s: UnityEngine.Sprite) : UnityEngine.UIElements.Background
            /** 
            Creates a background from a VectorImage.
            * @param $vi The vector image to use as a background.
            * @returns A new background object. 
            */
            public static FromVectorImage ($vi: UnityEngine.UIElements.VectorImage) : UnityEngine.UIElements.Background
            /** 
            Retrieves the selected asset which can be of a type of Texture, Sprite, RenderTexture or VectorImage.
            * @returns An asset as an object. 
            */
            public GetSelectedImage () : UnityEngine.Object
            /** 
            Help verify whether an asset has been assigned or not.
            * @returns True if no asset is assigned. 
            */
            public IsEmpty () : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.Background, $rhs: UnityEngine.UIElements.Background) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Background, $rhs: UnityEngine.UIElements.Background) : boolean
            public static op_Implicit ($v: UnityEngine.Texture2D) : UnityEngine.UIElements.Background
            public Equals ($other: UnityEngine.UIElements.Background) : boolean
            public Equals ($obj: any) : boolean
        }
        /** 
        Makes a text field for entering a float. For more information, refer to.
        */
        class FloatField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A Rect field. For more information, refer to.
        */
        class RectField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Rect, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Rect>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Makes a text field for entering an integer. For more information, refer to.
        */
        class IntegerField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A RectInt field. For more information, refer to.
        */
        class RectIntField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.RectInt, UnityEngine.UIElements.IntegerField, number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.RectInt>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A Vector2 field. For more information, refer to.
        */
        class Vector2Field extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector2, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector2>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A Vector3 field. For more information, refer to.
        */
        class Vector3Field extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector3, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector3>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A Vector4 field. For more information, refer to.
        */
        class Vector4Field extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector4, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector4>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A Vector2Int field. For more information, refer to.
        */
        class Vector2IntField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector2Int, UnityEngine.UIElements.IntegerField, number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector2Int>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A Vector3Int field. For more information, refer to.
        */
        class Vector3IntField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector3Int, UnityEngine.UIElements.IntegerField, number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector3Int>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Makes a text field for entering doubles.
        */
        class DoubleField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Describes a UXML double attribute.
        */
        class UxmlDoubleAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        class TextValueFieldTraits$2<TValueType, TValueUxmlAttributeType> extends UnityEngine.UIElements.BaseFieldTraits$2<TValueType, TValueUxmlAttributeType>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class PopupField$1<T> extends UnityEngine.UIElements.BasePopupField$2<T, T> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<T>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static labelUssClassName : any
            public static inputUssClassName : any
            public get formatSelectedValueCallback(): System.Func$2<T, string>;
            public set formatSelectedValueCallback(value: System.Func$2<T, string>);
            public get formatListItemCallback(): System.Func$2<T, string>;
            public set formatListItemCallback(value: System.Func$2<T, string>);
            public get value(): T;
            public set value(value: T);
            public get index(): number;
            public set index(value: number);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label?: string)
            public constructor ($choices: System.Collections.Generic.List$1<T>, $defaultValue: T, $formatSelectedValueCallback?: System.Func$2<T, string>, $formatListItemCallback?: System.Func$2<T, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<T>, $defaultValue: T, $formatSelectedValueCallback?: System.Func$2<T, string>, $formatListItemCallback?: System.Func$2<T, string>)
            public constructor ($choices: System.Collections.Generic.List$1<T>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<T, string>, $formatListItemCallback?: System.Func$2<T, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<T>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<T, string>, $formatListItemCallback?: System.Func$2<T, string>)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            public SetValueWithoutNotify ($newValue: T) : void
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A control that allows the user to pick a choice from a list of options. For more information, refer to.
        */
        class DropdownField extends UnityEngine.UIElements.PopupField$1<string> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public constructor ($choices: System.Collections.Generic.List$1<string>, $defaultValue: string, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<string>, $defaultValue: string, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($choices: System.Collections.Generic.List$1<string>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<string>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Makes a dropdown for switching between enum values. For more information, refer to.
        */
        class EnumField extends UnityEngine.UIElements.BaseField$1<System.Enum> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<System.Enum>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of text elements in elements of this type.
            */
            public static textUssClassName : string
            /** 
            USS class name of arrow indicators in elements of this type.
            */
            public static arrowUssClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Return the text value of the currently selected enum.
            */
            public get text(): string;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Initializes the EnumField with a default value, and initializes its underlying type.
            * @param $defaultValue The typed enum value.
            */
            public Init ($defaultValue: System.Enum) : void
            /** 
            Initializes the EnumField with a default value, and initializes its underlying type.
            * @param $defaultValue The typed enum value.
            * @param $includeObsoleteValues Set to true to display obsolete values as choices.
            */
            public Init ($defaultValue: System.Enum, $includeObsoleteValues: boolean) : void
            public constructor ()
            public constructor ($defaultValue: System.Enum)
            public constructor ($label: string, $defaultValue?: System.Enum)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Describes a UXML float attribute.
        */
        class UxmlFloatAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        A Foldout control is a collapsible section of a user interface. When toggled, it expands or collapses, which hides or reveals the elements it contains.
        */
        class Foldout extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for Foldout elements.
            */
            public static ussClassName : string
            /** 
            The USS class name of Toggle sub-elements in Foldout elements.
            */
            public static toggleUssClassName : string
            /** 
            The USS class name for the content element in a Foldout.
            */
            public static contentUssClassName : string
            /** 
            The USS class name for the Label element in a Foldout.
            */
            public static inputUssClassName : string
            /** 
            The USS class name for the Label element in a Foldout.
            */
            public static checkmarkUssClassName : string
            /** 
            The USS class name for the Label element in a Foldout.
            */
            public static textUssClassName : string
            /** 
            This element contains the elements that are shown or hidden when you toggle the Foldout.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public get focusable(): boolean;
            public set focusable(value: boolean);
            /** 
            Whether to toggle the foldout state when the user clicks the label.
            */
            public get toggleOnLabelClick(): boolean;
            public set toggleOnLabelClick(value: boolean);
            /** 
            The label text for the toggle.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            This is the state of the Foldout's toggle. It is true if the Foldout is open and its contents are
            visible, and false if the Foldout is closed, and its contents are hidden.
            */
            public get value(): boolean;
            public set value(value: boolean);
            /** 
            Sets the value of the Foldout's Toggle sub-element, but does not notify the rest of the hierarchy of the change.
            * @param $newValue The new value of the foldout
            */
            public SetValueWithoutNotify ($newValue: boolean) : void
            public constructor ()
        }
        /** 
        GenericDropdownMenu allows you to display contextual menus with default textual options or any VisualElement.
        */
        class GenericDropdownMenu extends System.Object implements UnityEngine.UIElements.IGenericMenu
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static itemUssClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static itemContentUssClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of inner containers in elements of this type.
            */
            public static containerInnerUssClassName : string
            /** 
            USS class name of outer containers in elements of this type.
            */
            public static containerOuterUssClassName : string
            /** 
            USS class name of separators in elements of this type.
            */
            public static checkmarkUssClassName : string
            /** 
            USS class name of separators in elements of this type.
            */
            public static separatorUssClassName : string
            /** 
            USS class name that's added when the GenericDropdownMenu fits the width of its content.
            */
            public static contentWidthUssClassName : string
            /** 
            Returns the content container for the GenericDropdownMenu. Allows users to create their own
            dropdown menu if they don't want to use the default implementation.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Adds an item to this menu using a default VisualElement.
            * @param $itemName The text to display to the user.
            * @param $isChecked Indicates whether a checkmark next to the item is displayed.
            * @param $action The callback to invoke when the item is selected by the user.
            */
            public AddItem ($itemName: string, $isChecked: boolean, $action: System.Action) : void
            public AddItem ($itemName: string, $isChecked: boolean, $action: System.Action$1<any>, $data: any) : void
            /** 
            Adds a disabled item to this menu using a default VisualElement.
            * @param $itemName The text to display to the user.
            * @param $isChecked Indicates whether a checkmark next to the item is displayed.
            */
            public AddDisabledItem ($itemName: string, $isChecked: boolean) : void
            /** 
            Adds a visual separator after the previously added items in this menu.
            * @param $path Not used.
            */
            public AddSeparator ($path: string) : void
            /** 
            Displays the menu at the specified position.
            * @param $position The position in the coordinate space of the panel.
            * @param $targetElement The element determines which root to use as the menu's parent.
            * @param $anchored If true, the menu's width matches the width of the position; otherwise, the menu expands to the container's full width.
            */
            public DropDown ($position: UnityEngine.Rect, $targetElement?: UnityEngine.UIElements.VisualElement, $anchored?: boolean) : void
            /** 
            Displays the menu at the specified position.
            * @param $position The position in the coordinate space of the panel.
            * @param $targetElement The element determines which root to use as the menu's parent.
            * @param $anchored If true, the menu's width matches the width of the position; otherwise, the menu expands 
            to the container's full width.
            * @param $fitContentWidthIfAnchored If true and the menu is anchored, the menu's width matches its content's width; 
            otherwise, the menu's width matches the width of the position. If the menu is unanchored, this parameter is ignored.
            */
            public DropDown ($position: UnityEngine.Rect, $targetElement?: UnityEngine.UIElements.VisualElement, $anchored?: boolean, $fitContentWidthIfAnchored?: boolean) : void
            public constructor ()
        }
        /** 
        This is an enclosing container for a group of IGroupBoxOption. All group options within this
        container will interact together to allow a single selection, using the DefaultGroupManager.
        Default options are RadioButton, but users can provide other implementations.
        If no IGroupBox is found in the hierarchy, the default container will be the panel.
        */
        class GroupBox extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IGroupBox, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for GroupBox elements.
            */
            public static ussClassName : string
            /** 
            USS class name for Labels in GroupBox elements.
            */
            public static labelUssClassName : string
            /** 
            The title text of the box.
            */
            public get text(): string;
            public set text(value: string);
            public constructor ()
            public constructor ($text: string)
        }
        /** 
        Makes a field for editing an Hash128. For more information, refer to.
        */
        class Hash128Field extends UnityEngine.UIElements.TextInputBaseField$1<UnityEngine.Hash128> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Hash128>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            public get value(): UnityEngine.Hash128;
            public set value(value: UnityEngine.Hash128);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Describes a UXML Hash128 attribute.
        */
        class UxmlHash128AttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<UnityEngine.Hash128>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<UnityEngine.Hash128>) : boolean
            public constructor ()
        }
        /** 
        User message types.
        */
        enum HelpBoxMessageType
        { None = 0, Info = 1, Warning = 2, Error = 3 }
        /** 
        Makes a help box with a message to the user. For more information, refer to.
        */
        class HelpBox extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for Elements of this type.
            */
            public static ussClassName : string
            /** 
            The USS class name for labels in Elements of this type.
            */
            public static labelUssClassName : string
            /** 
            The USS class name for images in Elements of this type.
            */
            public static iconUssClassName : string
            /** 
            The USS class name for the HelpBoxMessageType.Info state in Elements of this type.
            */
            public static iconInfoUssClassName : string
            /** 
            The USS class name for the HelpBoxMessageType.Warning state in Elements of this type.
            */
            public static iconwarningUssClassName : string
            /** 
            The USS class name for the HelpBoxMessageType.Error state in Elements of this type.
            */
            public static iconErrorUssClassName : string
            /** 
            The message text.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            The type of message.
            */
            public get messageType(): UnityEngine.UIElements.HelpBoxMessageType;
            public set messageType(value: UnityEngine.UIElements.HelpBoxMessageType);
            public constructor ()
            public constructor ($text: string, $messageType: UnityEngine.UIElements.HelpBoxMessageType)
        }
        /** 
        A VisualElement representing a source texture.
        Note: This is not related to the UnityEngine.UI.Image uGUI control. This is the Image control for the UI Toolkit framework.
        */
        class Image extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The texture to display in this image. If you assign a Texture or Texture2D, the Image element will resize and show the assigned texture.
            */
            public get image(): UnityEngine.Texture;
            public set image(value: UnityEngine.Texture);
            /** 
            The sprite to display in this image.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** 
            The VectorImage to display in this image.
            */
            public get vectorImage(): UnityEngine.UIElements.VectorImage;
            public set vectorImage(value: UnityEngine.UIElements.VectorImage);
            /** 
            The source rectangle inside the texture relative to the top left corner.
            */
            public get sourceRect(): UnityEngine.Rect;
            public set sourceRect(value: UnityEngine.Rect);
            /** 
            The base texture coordinates of the Image relative to the bottom left corner.
            */
            public get uv(): UnityEngine.Rect;
            public set uv(value: UnityEngine.Rect);
            /** 
            ScaleMode used to display the Image.
            */
            public get scaleMode(): UnityEngine.ScaleMode;
            public set scaleMode(value: UnityEngine.ScaleMode);
            /** 
            Tinting color for this Image.
            */
            public get tintColor(): UnityEngine.Color;
            public set tintColor(value: UnityEngine.Color);
            public constructor ()
        }
        /** 
        An asset that represents a vector image.
        */
        class VectorImage extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** The width of the vector image.
            */
            public get width(): number;
            /** The height of the vector image.
            */
            public get height(): number;
            public constructor ()
        }
        /** 
        INotifyValueChangedExtensions is a set of extension methods useful for objects implementing INotifyValueChanged_1.
        */
        class INotifyValueChangedExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class ChangeEvent$1<T> extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.ChangeEvent$1<T>> implements UnityEngine.UIElements.IChangeEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get previousValue(): T;
            public get newValue(): T;
            public static GetPooled ($previousValue: any, $newValue: any) : any
            public constructor ()
        }
        interface IChangeEvent
        {
        }
        interface EventCallback$1<TEventType>
        { 
        (evt: TEventType) : void; 
        Invoke?: (evt: TEventType) => void;
        }
        /** 
        Provides an Element displaying text. For more information, refer to.
        */
        class Label extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.ITextSelection, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ()
            public constructor ($text: string)
        }
        /** 
        A TextField accepts and displays text input. For more information, refer to.
        */
        class TextField extends UnityEngine.UIElements.TextInputBaseField$1<string> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Set this to true to allow multiple lines in the textfield and false if otherwise.
            */
            public get multiline(): boolean;
            public set multiline(value: boolean);
            /** 
            The string currently being exposed by the field.
            */
            public get value(): string;
            public set value(value: string);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($maxLength: number, $multiline: boolean, $isPasswordField: boolean, $maskChar: number)
            public constructor ($label: string)
            public constructor ($label: string, $maxLength: number, $multiline: boolean, $isPasswordField: boolean, $maskChar: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Describes a UXML string attribute.
        */
        class UxmlStringAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<string>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<string>) : boolean
            public constructor ()
        }
        /** 
        Options for controlling the visibility of scroll bars in the ScrollView.
        */
        enum ScrollerVisibility
        { Auto = 0, AlwaysVisible = 1, Hidden = 2 }
        /** 
        Describes a UXML int attribute.
        */
        class UxmlIntAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        A ListView is a vertically scrollable area that links to, and displays, a list of items.
        */
        class ListView extends UnityEngine.UIElements.BaseListView implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Callback for constructing the VisualElement that is the template for each recycled and re-bound element in the list.
            */
            public get makeItem(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeItem(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            A UXML template that constructs each recycled and rebound element within the list.
            This template is designed to replace the makeItem definition.
            */
            public get itemTemplate(): UnityEngine.UIElements.VisualTreeAsset;
            public set itemTemplate(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            Callback for binding a data item to the visual element.
            */
            public get bindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set bindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for unbinding a data item from the VisualElement.
            */
            public get unbindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set unbindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback invoked when a VisualElement created via makeItem is no longer needed and will be destroyed.
            */
            public get destroyItem(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyItem(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            public constructor ()
            public constructor ($itemsSource: System.Collections.IList, $itemHeight?: number, $makeItem?: System.Func$1<UnityEngine.UIElements.VisualElement>, $bindItem?: System.Action$2<UnityEngine.UIElements.VisualElement, number>)
        }
        /** 
        An instance of this class holds a tree of VisualElementAsset's, created from a UXML file. Each node in the file corresponds to a VisualElementAsset. You can clone a VisualTreeAsset to create a tree of VisualElement's.
        Note: You can't generate a VisualTreeAsset from raw UXML at runtime.
        */
        class VisualTreeAsset extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether there were errors encountered while importing the UXML File
            */
            public get importedWithErrors(): boolean;
            /** 
            Whether there were warnings encountered while importing the UXML File
            */
            public get importedWithWarnings(): boolean;
            /** 
            The UXML templates used by this VisualTreeAsset.
            */
            public get templateDependencies(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.VisualTreeAsset>;
            /** 
            The stylesheets used by this VisualTreeAsset.
            */
            public get stylesheets(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StyleSheet>;
            /** 
            A hash value computed from the template content.
            */
            public get contentHash(): number;
            public set contentHash(value: number);
            /** 
            Build a tree of VisualElements from the asset.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public Instantiate () : UnityEngine.UIElements.TemplateContainer
            /** 
            Build a tree of VisualElements from the asset.
            * @param $bindingPath The path to the property that you want to bind to the root of the cloned tree.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public Instantiate ($bindingPath: string) : UnityEngine.UIElements.TemplateContainer
            /** 
            Build a tree of VisualElements from the asset.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public CloneTree () : UnityEngine.UIElements.TemplateContainer
            /** 
            Build a tree of VisualElements from the asset.
            * @param $bindingPath The path to the property that you want to bind to the root of the cloned tree.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public CloneTree ($bindingPath: string) : UnityEngine.UIElements.TemplateContainer
            /** 
            Builds a tree of VisualElements from the asset.
            * @param $target A VisualElement that will act as the root of the cloned tree.
            */
            public CloneTree ($target: UnityEngine.UIElements.VisualElement) : void
            public CloneTree ($target: UnityEngine.UIElements.VisualElement, $firstElementIndex: $Ref<number>, $elementAddedCount: $Ref<number>) : void
            public constructor ()
        }
        /** 
        Makes a text field for entering long integers. For more information, refer to.
        */
        class LongField extends UnityEngine.UIElements.TextValueField$1<bigint> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<bigint>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<bigint>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Describes a UXML long attribute.
        */
        class UxmlLongAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<bigint>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<bigint>) : boolean
            public constructor ()
        }
        /** 
        A min/max slider containing a representation of a range. For more information, refer to.
        */
        class MinMaxSlider extends UnityEngine.UIElements.BaseField$1<UnityEngine.Vector2> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector2>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of tracker elements in elements of this type.
            */
            public static trackerUssClassName : string
            /** 
            USS class name of dragger elements in elements of this type.
            */
            public static draggerUssClassName : string
            /** 
            USS class name of the minimum thumb elements in elements of this type.
            */
            public static minThumbUssClassName : string
            /** 
            USS class name of the maximum thumb elements in elements of this type.
            */
            public static maxThumbUssClassName : string
            /** 
            USS class name of the element that is currently controlled by NavigationMoveEvent.
            When a NavigationSubmitEvent is received the slider cycles through the elements in the following order:
            1. Minimum thumb.
            2. Maximum thumb.
            3. Middle bar.
            4. None (Default Navigation behavior).
            */
            public static movableUssClassName : string
            /** 
            This is the low value of the range represented on the slider.
            */
            public get minValue(): number;
            public set minValue(value: number);
            /** 
            This is the high value of the range represented on the slider.
            */
            public get maxValue(): number;
            public set maxValue(value: number);
            /** 
            This is the value of the slider. This is a Vector2 where the x is the lower bound and the y is the higher bound.
            */
            public get value(): UnityEngine.Vector2;
            public set value(value: UnityEngine.Vector2);
            /** 
            Returns the range of the low/high limits of the slider.
            */
            public get range(): number;
            /** 
            This is the low limit of the slider.
            */
            public get lowLimit(): number;
            public set lowLimit(value: number);
            /** 
            This is the high limit of the slider.
            */
            public get highLimit(): number;
            public set highLimit(value: number);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($minValue: number, $maxValue: number, $minLimit: number, $maxLimit: number)
            public constructor ($label: string, $minValue?: number, $maxValue?: number, $minLimit?: number, $maxLimit?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Defines the sorting mode of a MultiColumnListView or MultiColumnTreeView.
        */
        enum ColumnSortingMode
        { None = 0, Default = 1, Custom = 2 }
        /** 
        A list view with multi column support.
        */
        class MultiColumnListView extends UnityEngine.UIElements.BaseListView implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The view controller for this view, cast as a MultiColumnListViewController.
            */
            public get viewController(): UnityEngine.UIElements.MultiColumnListViewController;
            /** 
            Contains information about which columns are currently being sorted.
            */
            public get sortedColumns(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.SortColumnDescription>;
            /** 
            The collection of columns for the multi-column header.
            */
            public get columns(): UnityEngine.UIElements.Columns;
            /** 
            The collection of sorted columns by default.
            */
            public get sortColumnDescriptions(): UnityEngine.UIElements.SortColumnDescriptions;
            /** 
            Indicates how to sort columns. To enable sorting, set it to ColumnSortingMode.Default or ColumnSortingMode.Custom.
            The Default mode uses the sorting algorithm provided by MultiColumnController, acting on indices. You can also implement your
            own sorting with the Custom mode, by responding to the columnSortingChanged event.
            */
            public get sortingMode(): UnityEngine.UIElements.ColumnSortingMode;
            public set sortingMode(value: UnityEngine.UIElements.ColumnSortingMode);
            public add_columnSortingChanged ($value: System.Action) : void
            public remove_columnSortingChanged ($value: System.Action) : void
            public add_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public remove_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public constructor ()
            public constructor ($columns: UnityEngine.UIElements.Columns)
        }
        /** 
        A tree view with multi column support.
        */
        class MultiColumnTreeView extends UnityEngine.UIElements.BaseTreeView implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The view controller for this view, cast as a MultiColumnTreeViewController.
            */
            public get viewController(): UnityEngine.UIElements.MultiColumnTreeViewController;
            /** 
            Contains information about which columns are currently being sorted.
            */
            public get sortedColumns(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.SortColumnDescription>;
            /** 
            The collection of columns for the multi-column header.
            */
            public get columns(): UnityEngine.UIElements.Columns;
            /** 
            The collection of sorted columns by default.
            */
            public get sortColumnDescriptions(): UnityEngine.UIElements.SortColumnDescriptions;
            /** 
            Indicates how to sort columns. To enable sorting, set it to ColumnSortingMode.Default or ColumnSortingMode.Custom.
            The Default mode uses the sorting algorithm provided by MultiColumnController, acting on indices. You can also implement your
            own sorting with the Custom mode, by responding to the columnSortingChanged event.
            */
            public get sortingMode(): UnityEngine.UIElements.ColumnSortingMode;
            public set sortingMode(value: UnityEngine.UIElements.ColumnSortingMode);
            public add_columnSortingChanged ($value: System.Action) : void
            public remove_columnSortingChanged ($value: System.Action) : void
            public add_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public remove_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public constructor ()
            public constructor ($columns: UnityEngine.UIElements.Columns)
        }
        /** 
        The sort direction.
        */
        enum SortDirection
        { Ascending = 0, Descending = 1 }
        /** 
        Styled visual text element. This element doesn't have any functionality. It's just a container with a border and a title, rather than a window or popup. For more information, refer to.
        */
        class PopupWindow extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.ITextSelection, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentUssClassName : string
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public constructor ()
        }
        /** 
        Abstract base class for the ProgressBar.
        */
        class AbstractProgressBar extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS Class Name used to style the ProgressBar.
            */
            public static ussClassName : string
            /** 
            USS Class Name used to style the container of the ProgressBar.
            */
            public static containerUssClassName : string
            /** 
            USS Class Name used to style the title of the ProgressBar.
            */
            public static titleUssClassName : string
            /** 
            USS Class Name used to style the container of the title of the ProgressBar.
            */
            public static titleContainerUssClassName : string
            /** 
            USS Class Name used to style the progress bar of the ProgressBar.
            */
            public static progressUssClassName : string
            /** 
            USS Class Name used to style the background of the ProgressBar.
            */
            public static backgroundUssClassName : string
            /** 
            Sets the title of the ProgressBar that displays in the center of the control.
            */
            public get title(): string;
            public set title(value: string);
            /** 
            Sets the minimum value of the ProgressBar.
            */
            public get lowValue(): number;
            public set lowValue(value: number);
            /** 
            Sets the maximum value of the ProgressBar.
            */
            public get highValue(): number;
            public set highValue(value: number);
            /** 
            Sets the progress value. If the value has changed, dispatches an ChangeEvent_1 of type float.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            Sets the progress value.
            */
            public SetValueWithoutNotify ($newValue: number) : void
        }
        /** 
        A control that displays the progress between a lower and upper bound value. For more information, refer to.
        */
        class ProgressBar extends UnityEngine.UIElements.AbstractProgressBar implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        A control that allows users to select a single option inside a RadioButtonGroup. For more information, refer to.
        */
        class RadioButton extends UnityEngine.UIElements.BaseBoolField implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IGroupBoxOption, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for RadioButton elements.
            */
            public static ussClassName : string
            /** 
            USS class name for Labels in RadioButton elements.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in RadioButton elements.
            */
            public static inputUssClassName : string
            /** 
            USS class name of checkmark background in RadioButton elements.
            */
            public static checkmarkBackgroundUssClassName : string
            /** 
            USS class name of checkmark in RadioButton elements.
            */
            public static checkmarkUssClassName : string
            /** 
            USS class name of Text elements in RadioButton elements.
            */
            public static textUssClassName : string
            public get value(): boolean;
            public set value(value: boolean);
            public constructor ()
            public constructor ($label: string)
        }
        /** 
        Describes a UXML bool attribute.
        */
        class UxmlBoolAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<boolean>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<boolean>) : boolean
            public constructor ()
        }
        /** 
        A control that allows single selection out of a logical group of RadioButton elements. Selecting one will deselect the others. For more information, refer to.
        */
        class RadioButtonGroup extends UnityEngine.UIElements.BaseField$1<number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IGroupBox, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for RadioButtonGroup elements.
            */
            public static ussClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static containerUssClassName : string
            /** 
            The list of available choices in the group.
            */
            public get choices(): System.Collections.Generic.IEnumerable$1<string>;
            public set choices(value: System.Collections.Generic.IEnumerable$1<string>);
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string, $radioButtonChoices?: System.Collections.Generic.List$1<string>)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        A button that executes an action repeatedly while it is pressed. For more information, refer to.
        */
        class RepeatButton extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.ITextSelection, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public SetAction ($clickEvent: System.Action, $delay: bigint, $interval: bigint) : void
            public constructor ()
            public constructor ($clickEvent: System.Action, $delay: bigint, $interval: bigint)
        }
        /** 
        A vertical or horizontal scrollbar. For more information, refer to.
        */
        class Scroller extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of elements of this type, when they are displayed horizontally.
            */
            public static horizontalVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed vertically.
            */
            public static verticalVariantUssClassName : string
            /** 
            USS class name of slider elements in elements of this type.
            */
            public static sliderUssClassName : string
            /** 
            USS class name of low buttons in elements of this type.
            */
            public static lowButtonUssClassName : string
            /** 
            USS class name of high buttons in elements of this type.
            */
            public static highButtonUssClassName : string
            /** 
            The slider used by this scroller.
            */
            public get slider(): UnityEngine.UIElements.Slider;
            /** 
            Bottom or left scroll button.
            */
            public get lowButton(): UnityEngine.UIElements.RepeatButton;
            /** 
            Top or right scroll button.
            */
            public get highButton(): UnityEngine.UIElements.RepeatButton;
            /** 
            Value that defines the slider position. It lies between lowValue and highValue.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            Minimum value.
            */
            public get lowValue(): number;
            public set lowValue(value: number);
            /** 
            Maximum value.
            */
            public get highValue(): number;
            public set highValue(value: number);
            /** 
            Direction of this scrollbar.
            */
            public get direction(): UnityEngine.UIElements.SliderDirection;
            public set direction(value: UnityEngine.UIElements.SliderDirection);
            public add_valueChanged ($value: System.Action$1<number>) : void
            public remove_valueChanged ($value: System.Action$1<number>) : void
            /** 
            Updates the slider element size as a ratio of total range. A value greater than or equal to 1 will disable the Scroller.
            * @param $factor Slider size ratio.
            */
            public Adjust ($factor: number) : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageUp () : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageDown () : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageUp ($factor: number) : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageDown ($factor: number) : void
            public constructor ()
            public constructor ($lowValue: number, $highValue: number, $valueChanged: System.Action$1<number>, $direction?: UnityEngine.UIElements.SliderDirection)
        }
        /** 
        A slider containing floating point values. 
        */
        class Slider extends UnityEngine.UIElements.BaseSlider$1<number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($start: number, $end: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public constructor ($label: string, $start?: number, $end?: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Configurations of the ScrollView to influence the layout of its contents and how scrollbars appear.
        ScrollView.mode
        */
        enum ScrollViewMode
        { Vertical = 0, Horizontal = 1, VerticalAndHorizontal = 2 }
        /** 
        Displays its contents inside a scrollable frame. For more information, see.
        */
        class ScrollView extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of viewport elements in elements of this type.
            */
            public static viewportUssClassName : string
            /** 
            USS class name that's added when the Viewport is in horizontal mode.
            ScrollViewMode.Horizontal
            */
            public static horizontalVariantViewportUssClassName : string
            /** 
            USS class name that's added when the Viewport is in vertical mode.
            ScrollViewMode.Vertical
            */
            public static verticalVariantViewportUssClassName : string
            /** 
            USS class name that's added when the Viewport is in both horizontal and vertical mode.
            ScrollViewMode.VerticalAndHorizontal
            */
            public static verticalHorizontalVariantViewportUssClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentAndVerticalScrollUssClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentUssClassName : string
            /** 
            USS class name that's added when the ContentContainer is in horizontal mode.
            ScrollViewMode.Horizontal
            */
            public static horizontalVariantContentUssClassName : string
            /** 
            USS class name that's added when the ContentContainer is in vertical mode.
            ScrollViewMode.Vertical
            */
            public static verticalVariantContentUssClassName : string
            /** 
            USS class name that's added when the ContentContainer is in both horizontal and vertical mode.
            ScrollViewMode.VerticalAndHorizontal
            */
            public static verticalHorizontalVariantContentUssClassName : string
            /** 
            USS class name of horizontal scrollers in elements of this type.
            */
            public static hScrollerUssClassName : string
            /** 
            USS class name of vertical scrollers in elements of this type.
            */
            public static vScrollerUssClassName : string
            /** 
            USS class name that's added when the ScrollView is in horizontal mode.
            ScrollViewMode.Horizontal
            */
            public static horizontalVariantUssClassName : string
            /** 
            USS class name that's added when the ScrollView is in vertical mode.
            ScrollViewMode.Vertical
            */
            public static verticalVariantUssClassName : string
            /** 
            USS class name that's added when the ScrollView is in both horizontal and vertical mode.
            ScrollViewMode.VerticalAndHorizontal
            */
            public static verticalHorizontalVariantUssClassName : string
            public static scrollVariantUssClassName : string
            /** 
            Specifies whether the horizontal scroll bar is visible.
            */
            public get horizontalScrollerVisibility(): UnityEngine.UIElements.ScrollerVisibility;
            public set horizontalScrollerVisibility(value: UnityEngine.UIElements.ScrollerVisibility);
            /** 
            Specifies whether the vertical scroll bar is visible.
            */
            public get verticalScrollerVisibility(): UnityEngine.UIElements.ScrollerVisibility;
            public set verticalScrollerVisibility(value: UnityEngine.UIElements.ScrollerVisibility);
            /** 
            The minimum amount of time, in milliseconds, between executions of elastic spring animation.
            */
            public get elasticAnimationIntervalMs(): bigint;
            public set elasticAnimationIntervalMs(value: bigint);
            /** 
            The current scrolling position.
            */
            public get scrollOffset(): UnityEngine.Vector2;
            public set scrollOffset(value: UnityEngine.Vector2);
            /** 
            This property controls the speed of the horizontal scrolling when using a keyboard or the on-screen scrollbar buttons (arrows and handle), based on the size of the page.
            */
            public get horizontalPageSize(): number;
            public set horizontalPageSize(value: number);
            /** 
            This property controls the speed of the vertical scrolling when using a keyboard or the on-screen scrollbar buttons (arrows and handle), based on the size of the page.
            */
            public get verticalPageSize(): number;
            public set verticalPageSize(value: number);
            /** 
            This property controls the scrolling speed only when using a mouse scroll wheel, based on the size of the page. It takes precedence over the --unity-metrics-single_line-height USS variable.
            */
            public get mouseWheelScrollSize(): number;
            public set mouseWheelScrollSize(value: number);
            /** 
            Controls the rate at which the scrolling movement slows after a user scrolls using a touch interaction.
            */
            public get scrollDecelerationRate(): number;
            public set scrollDecelerationRate(value: number);
            /** 
            The amount of elasticity to use when a user tries to scroll past the boundaries of the scroll view.
            */
            public get elasticity(): number;
            public set elasticity(value: number);
            /** 
            The behavior to use when a user tries to scroll past the boundaries of the ScrollView content using a touch interaction.
            */
            public get touchScrollBehavior(): UnityEngine.UIElements.ScrollView.TouchScrollBehavior;
            public set touchScrollBehavior(value: UnityEngine.UIElements.ScrollView.TouchScrollBehavior);
            /** 
            The behavior to use when scrolling reaches limits of a nested ScrollView.
            */
            public get nestedInteractionKind(): UnityEngine.UIElements.ScrollView.NestedInteractionKind;
            public set nestedInteractionKind(value: UnityEngine.UIElements.ScrollView.NestedInteractionKind);
            /** 
            Represents the visible part of contentContainer.
            */
            public get contentViewport(): UnityEngine.UIElements.VisualElement;
            /** 
            Horizontal scrollbar.
            */
            public get horizontalScroller(): UnityEngine.UIElements.Scroller;
            /** 
            Vertical Scrollbar.
            */
            public get verticalScroller(): UnityEngine.UIElements.Scroller;
            /** 
            Contains full content, potentially partially visible.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Controls how the ScrollView allows the user to scroll the contents.
            ScrollViewMode
            */
            public get mode(): UnityEngine.UIElements.ScrollViewMode;
            public set mode(value: UnityEngine.UIElements.ScrollViewMode);
            /** 
            Scroll to a specific child element.
            * @param $child The child to scroll to.
            */
            public ScrollTo ($child: UnityEngine.UIElements.VisualElement) : void
            public constructor ()
            public constructor ($scrollViewMode: UnityEngine.UIElements.ScrollViewMode)
        }
        /** 
        A slider containing Integer discrete values. For more information, refer to.
        */
        class SliderInt extends UnityEngine.UIElements.BaseSlider$1<number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            The value to add or remove to the SliderInt.value when it is clicked.
            */
            public get pageSize(): number;
            public set pageSize(value: number);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($start: number, $end: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public constructor ($label: string, $start?: number, $end?: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Creates a tab to organize content on different screens.
        */
        class Tab extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name for the header of this type.
            */
            public static tabHeaderUssClassName : string
            /** 
            USS class name for the icon inside the header.
            */
            public static tabHeaderImageUssClassName : string
            /** 
            USS class name for the icon inside the header when the value is null.
            */
            public static tabHeaderEmptyImageUssClassName : string
            /** 
            USS class name for the icon inside the header when the label is empty or null.
            */
            public static tabHeaderStandaloneImageUssClassName : string
            /** 
            USS class name for the label of the header.
            */
            public static tabHeaderLabelUssClassName : string
            /** 
            USS class name for the label of the header when the value is empty or null.
            */
            public static tabHeaderEmptyLabeUssClassName : string
            /** 
            USS class name for the active state underline of the header.
            */
            public static tabHeaderUnderlineUssClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static contentUssClassName : string
            /** 
            USS class name for the dragging state of this type.
            */
            public static draggingUssClassName : string
            /** 
            USS class name for reorderable tab elements.
            */
            public static reorderableUssClassName : string
            /** 
            USS class name for drag handle in reorderable tabs.
            */
            public static reorderableItemHandleUssClassName : string
            /** 
            USS class name for drag handlebar in reorderable tabs.
            */
            public static reorderableItemHandleBarUssClassName : string
            /** 
            The USS class name for a closeable tab.
            */
            public static closeableUssClassName : string
            /** 
            The USS class name for close button in closable tabs.
            */
            public static closeButtonUssClassName : string
            /** 
            Returns the Tab's header.
            */
            public get tabHeader(): UnityEngine.UIElements.VisualElement;
            /** 
            Sets the label of the Tab's header.
            */
            public get label(): string;
            public set label(value: string);
            /** 
            Sets the icon for the Tab's header.
            */
            public get iconImage(): UnityEngine.UIElements.Background;
            public set iconImage(value: UnityEngine.UIElements.Background);
            /** 
            A property that adds the ability to close tabs.
            */
            public get closeable(): boolean;
            public set closeable(value: boolean);
            /** 
            The container for the content of the Tab.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public add_selected ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public remove_selected ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public add_closing ($value: System.Func$1<boolean>) : void
            public remove_closing ($value: System.Func$1<boolean>) : void
            public add_closed ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public remove_closed ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public constructor ()
            public constructor ($label: string)
            public constructor ($iconImage: UnityEngine.UIElements.Background)
            public constructor ($label: string, $iconImage: UnityEngine.UIElements.Background)
        }
        /** 
        Creates a tab view that groups a one or more Tab elements.
        */
        class TabView extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name for the header container of this type.
            */
            public static headerContainerClassName : string
            /** 
            USS class name for the content container of this type.
            */
            public static contentContainerUssClassName : string
            /** 
            The USS class name for reorderable tab view.
            */
            public static reorderableUssClassName : string
            /** 
            The USS class name for vertical tab view.
            */
            public static verticalUssClassName : string
            /** 
            The container for the content of the TabView.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Property that holds the current active tab.
            */
            public get activeTab(): UnityEngine.UIElements.Tab;
            public set activeTab(value: UnityEngine.UIElements.Tab);
            /** 
            A property that returns the index of current active tab inside a list of available tabs.
            */
            public get selectedTabIndex(): number;
            public set selectedTabIndex(value: number);
            /** 
            A property that adds dragging support to tabs.
            */
            public get reorderable(): boolean;
            public set reorderable(value: boolean);
            public add_activeTabChanged ($value: System.Action$2<UnityEngine.UIElements.Tab, UnityEngine.UIElements.Tab>) : void
            public remove_activeTabChanged ($value: System.Action$2<UnityEngine.UIElements.Tab, UnityEngine.UIElements.Tab>) : void
            public constructor ()
        }
        /** 
        A Toggle is a clickable element that represents a boolean value.
        */
        class Toggle extends UnityEngine.UIElements.BaseBoolField implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for Toggle elements.
            */
            public static ussClassName : string
            /** 
            USS class name for Labels in Toggle elements.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in Toggle elements.
            */
            public static inputUssClassName : string
            /** 
            USS class name of Images in Toggle elements.
            */
            public static checkmarkUssClassName : string
            /** 
            USS class name of Text elements in Toggle elements.
            */
            public static textUssClassName : string
            /** 
            USS class name of Toggle elements that have mixed values
            */
            public static mixedValuesUssClassName : string
            public constructor ()
            public constructor ($label: string)
        }
        /** 
        The structure that keeps track of the Button states inside a ToggleButtonGroup.
        */
        class ToggleButtonGroupState extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.ToggleButtonGroupState>, System.IComparable$1<UnityEngine.UIElements.ToggleButtonGroupState>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the number of toggle button options available.
            */
            public get length(): number;
            public get_Item ($index: number) : boolean
            public set_Item ($index: number, $value: boolean) : void
            /** 
            Sets all the available options to active.
            */
            public SetAllOptions () : void
            /** 
            Resets the states of the toggle buttons.
            */
            public ResetAllOptions () : void
            /** 
            Toggles all the available options' state.
            */
            public ToggleAllOptions () : void
            public static CreateFromOptions ($options: System.Collections.Generic.IList$1<boolean>) : UnityEngine.UIElements.ToggleButtonGroupState
            public static FromEnumFlags ($options: System.Enum, $length?: number) : UnityEngine.UIElements.ToggleButtonGroupState
            /** 
            Compares two ToggleButtonGroupState.
            * @param $other The option set to be compared against.
            * @returns True if both option sets are the same, otherwise returns false. 
            */
            public CompareTo ($other: UnityEngine.UIElements.ToggleButtonGroupState) : number
            public static Compare ($options: UnityEngine.UIElements.ToggleButtonGroupState, $value: System.Enum) : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.ToggleButtonGroupState, $rhs: UnityEngine.UIElements.ToggleButtonGroupState) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.ToggleButtonGroupState, $rhs: UnityEngine.UIElements.ToggleButtonGroupState) : boolean
            /** 
            Checks if a given ToggleButtonGroupState matches with the current one.
            * @param $other A ToggleButtonGroupState to be compared against.
            * @returns True if both option has the same data and number of options, otherwise returns false. 
            */
            public Equals ($other: UnityEngine.UIElements.ToggleButtonGroupState) : boolean
            /** 
            Compares the the current option set with an Object.
            * @param $obj An object to be compared against.
            * @returns True if both option sets are not the same, otherwise returns false. 
            */
            public Equals ($obj: any) : boolean
            public constructor ($optionsBitMask: bigint, $length: number)
        }
        /** 
        A control that allows single or multiple selection out of a logical group of Button elements.
        */
        class ToggleButtonGroup extends UnityEngine.UIElements.BaseField$1<UnityEngine.UIElements.ToggleButtonGroupState> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.UIElements.ToggleButtonGroupState>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements for this type.
            */
            public static ussClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static containerUssClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static buttonGroupClassName : string
            /** 
            USS class name for any Buttons in the group.
            */
            public static buttonClassName : string
            /** 
            USS class name for the leftmost Button in the group.
            */
            public static buttonLeftClassName : string
            /** 
            USS class name for any Buttons in the middle of the group.
            */
            public static buttonMidClassName : string
            /** 
            USS class name for the rightmost Button in the group.
            */
            public static buttonRightClassName : string
            /** 
            USS class name for the Button if only one is available in the group.
            */
            public static buttonStandaloneClassName : string
            /** 
            USS class name for empty state label.
            */
            public static emptyStateLabelClassName : string
            /** 
            Whether all buttons can be selected.
            */
            public get isMultipleSelection(): boolean;
            public set isMultipleSelection(value: boolean);
            /** 
            Allows having all buttons to be unchecked when set to true.
            */
            public get allowEmptySelection(): boolean;
            public set allowEmptySelection(value: boolean);
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($label: string)
            public constructor ($toggleButtonGroupState: UnityEngine.UIElements.ToggleButtonGroupState)
            public constructor ($label: string, $toggleButtonGroupState: UnityEngine.UIElements.ToggleButtonGroupState)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Defines how a serialized ToggleButtonGroupState will be initialized in the inspector.
        */
        class ToggleButtonGroupStatePropertiesAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            See ToggleButtonGroup.isMultipleSelection.
            */
            public get allowMultipleSelection(): boolean;
            /** 
            See ToggleButtonGroup.allowEmptySelection.
            */
            public get allowEmptySelection(): boolean;
            /** 
            The initial length of the ToggleButtonGroupState. 
            */
            public get length(): number;
            public constructor ($allowMultipleSelection?: boolean, $allowEmptySelection?: boolean, $length?: number)
        }
        /** 
        A TreeView is a vertically scrollable area that links to, and displays, a list of items organized in a tree.
        */
        class TreeView extends UnityEngine.UIElements.BaseTreeView implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Callback for constructing the VisualElement that is the template for each recycled and re-bound element in the list.
            */
            public get makeItem(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeItem(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            A UXML template that constructs each recycled and rebound element within the tree.
            This template is designed to replace the makeItem definition.
            */
            public get itemTemplate(): UnityEngine.UIElements.VisualTreeAsset;
            public set itemTemplate(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            Callback for binding a data item to the visual element.
            */
            public get bindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set bindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for unbinding a data item from the VisualElement.
            */
            public get unbindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set unbindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback invoked when a VisualElement created via makeItem is no longer needed and will be destroyed.
            */
            public get destroyItem(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyItem(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            The view controller for this view, cast as a TreeViewController.
            */
            public get viewController(): UnityEngine.UIElements.TreeViewController;
            public constructor ()
            public constructor ($makeItem: System.Func$1<UnityEngine.UIElements.VisualElement>, $bindItem: System.Action$2<UnityEngine.UIElements.VisualElement, number>)
            public constructor ($itemHeight: number, $makeItem: System.Func$1<UnityEngine.UIElements.VisualElement>, $bindItem: System.Action$2<UnityEngine.UIElements.VisualElement, number>)
        }
        /** 
        A SplitView that contains two resizable panes. One pane is fixed-size while the other pane has flex-grow style set to 1 to take all remaining space. The border between the panes is draggable to resize both panes. Both horizontal and vertical modes are supported. Requires exactly two child elements to operate.
        */
        class TwoPaneSplitView extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            The child element that is set as the fixed size pane.
            */
            public get fixedPane(): UnityEngine.UIElements.VisualElement;
            /** 
            The child element that is set as the flexable size pane.
            */
            public get flexedPane(): UnityEngine.UIElements.VisualElement;
            /** 
            0 for setting first child as the fixed pane, 1 for the second child element.
            */
            public get fixedPaneIndex(): number;
            public set fixedPaneIndex(value: number);
            /** 
            The initial width or height for the fixed pane.
            */
            public get fixedPaneInitialDimension(): number;
            public set fixedPaneInitialDimension(value: number);
            /** 
            Orientation of the split view.
            */
            public get orientation(): UnityEngine.UIElements.TwoPaneSplitViewOrientation;
            public set orientation(value: UnityEngine.UIElements.TwoPaneSplitViewOrientation);
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Collapse one of the panes of the split view. This will hide the resizer and make the other child take up all available space.
            * @param $index Index of child to collapse.
            */
            public CollapseChild ($index: number) : void
            /** 
            Un-collapse the split view. This will restore the split view to the state it was before the previous collapse.
            */
            public UnCollapse () : void
            public constructor ()
            public constructor ($fixedPaneIndex: number, $fixedPaneStartDimension: number, $orientation: UnityEngine.UIElements.TwoPaneSplitViewOrientation)
        }
        /** 
        Determines the orientation of the two resizable panes.
        */
        enum TwoPaneSplitViewOrientation
        { Horizontal = 0, Vertical = 1 }
        /** 
        Makes a text field for entering an unsigned integer. For more information, refer to.
        */
        class UnsignedIntegerField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Describes a UXML uint attribute.
        */
        class UxmlUnsignedIntAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        Makes a text field for entering unsigned long integers. For more information, refer to.
        */
        class UnsignedLongField extends UnityEngine.UIElements.TextValueField$1<bigint> implements UnityEngine.UIElements.IEditableElement, UnityEngine.UIElements.IValueField$1<bigint>, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<bigint>, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IDelayedField
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            TextElement editor rendering mode.
            */
            public get unityEditorTextRenderingMode(): UnityEngine.UIElements.EditorTextRenderingMode;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Switches between Unity's standard and advanced text generator
            */
            public get unityTextGenerator(): UnityEngine.TextGeneratorType;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
            * @returns True if the object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
        }
        /** 
        Describes a UXML ulong attribute.
        */
        class UxmlUnsignedLongAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<bigint>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<bigint>) : boolean
            public constructor ()
        }
        /** 
        Script interface for VisualElement cursor style property IStyle.cursor.
        */
        class Cursor extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Cursor>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The texture to use for the cursor style. To use a texture as a cursor, import the texture with "Read/Write enabled" in the texture importer (or using the "Cursor" defaults).
            */
            public get texture(): UnityEngine.Texture2D;
            public set texture(value: UnityEngine.Texture2D);
            /** 
            The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).
            */
            public get hotspot(): UnityEngine.Vector2;
            public set hotspot(value: UnityEngine.Vector2);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.Cursor) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.Cursor, $style2: UnityEngine.UIElements.Cursor) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.Cursor, $style2: UnityEngine.UIElements.Cursor) : boolean
        }
        /** 
        Data stored during drag-and-drop operations, enabling information to be carried throughout the process.
        */
        class DragAndDropData extends System.Object implements UnityEngine.UIElements.IDragAndDropData
        {
            protected [__keep_incompatibility]: never;
            /** 
            The object that started the drag.
            */
            public get source(): any;
            /** 
            The state of the current drag operation.
            */
            public get visualMode(): UnityEngine.UIElements.DragVisualMode;
            /** 
            Unity Object references being dragged.
            */
            public get unityObjectReferences(): System.Collections.Generic.IEnumerable$1<UnityEngine.Object>;
            /** 
            A list of paths to the assets being dragged.
            */
            public get paths(): System.Array$1<string>;
            public set paths(value: System.Array$1<string>);
            /** 
            Gets data associated with the current drag-and-drop operation.
            * @param $key The key for this entry.
            * @returns The object stored for this key. 
            */
            public GetGenericData ($key: string) : any
            /** 
            Sets data associated with the current drag-and-drop operation.
            * @param $key The key for this entry.
            * @param $data The data to store.
            */
            public SetGenericData ($key: string, $data: any) : void
        }
        /** 
        Position where the drop operation occurs.
        */
        enum DragAndDropPosition
        { OverItem = 0, BetweenItems = 1, OutsideItems = 2 }
        /** 
        Provides information about the event that caused the dropdown menu to display.
        */
        class DropdownMenuEventInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The modifier keys that were pressed if those keys triggered the dropdown menu to
            display of the dropdown menu. For example, Alt, Ctrl, Shift, Windows, and Command.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position expressed in the global coordinate system if the event that triggered the dropdown
            menu to display was a mouse event.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The position of the mouse if the event that triggered the dropdown menu to display was a mouse event.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            public constructor ($e: UnityEngine.UIElements.EventBase)
        }
        /** 
        Represents an item in a dropdown menu.
        */
        class DropdownMenuItem extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Provides a separator menu item.
        */
        class DropdownMenuSeparator extends UnityEngine.UIElements.DropdownMenuItem
        {
            protected [__keep_incompatibility]: never;
            /** 
            The submenu path to the separator. Path components are delimited by forward slashes ('/').
            */
            public get subMenuPath(): string;
            public constructor ($subMenuPath: string)
        }
        /** 
        Represents a menu action item.
        */
        class DropdownMenuAction extends UnityEngine.UIElements.DropdownMenuItem
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the item.
            */
            public get name(): string;
            /** 
            The status of the item.
            */
            public get status(): UnityEngine.UIElements.DropdownMenuAction.Status;
            /** 
            Provides information about the event that triggered the dropdown menu.
            */
            public get eventInfo(): UnityEngine.UIElements.DropdownMenuEventInfo;
            /** 
            The userData object stored by the constructor.
            */
            public get userData(): any;
            /** 
            Creates a status callback that always returns Status.Enabled.
            * @param $a Unused parameter.
            * @returns Always returns Status.Enabled 
            */
            public static AlwaysEnabled ($a: UnityEngine.UIElements.DropdownMenuAction) : UnityEngine.UIElements.DropdownMenuAction.Status
            /** 
            Creates a status callback that always returns Status.Disabled status.
            * @param $a Unused parameter.
            * @returns Always returns Status.Disabled. 
            */
            public static AlwaysDisabled ($a: UnityEngine.UIElements.DropdownMenuAction) : UnityEngine.UIElements.DropdownMenuAction.Status
            /** 
            Updates the status flag of this item by calling the item status callback.
            * @param $eventInfo Information about the event that caused the dropdown menu to display, such as the mouse position or the key pressed.
            */
            public UpdateActionStatus ($eventInfo: UnityEngine.UIElements.DropdownMenuEventInfo) : void
            /** 
            Executes the callback associated with this item.
            */
            public Execute () : void
            public constructor ($actionName: string, $actionCallback: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any)
        }
        /** 
        Represents a dropdown menu.
        */
        class DropdownMenu extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the list of menu items.
            * @returns The list of items in the menu. 
            */
            public MenuItems () : System.Collections.Generic.List$1<UnityEngine.UIElements.DropdownMenuItem>
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status?: UnityEngine.UIElements.DropdownMenuAction.Status) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status?: UnityEngine.UIElements.DropdownMenuAction.Status) : void
            /** 
            Adds a separator line in the menu.
            * @param $subMenuPath The submenu path to add the separator to. Path components are delimited by forward slashes ('/').
            */
            public AppendSeparator ($subMenuPath?: string) : void
            /** 
            Adds a separator line in the menu.
            * @param $subMenuPath The submenu path to add the separator to. Path components are delimited by forward slashes ('/').
            * @param $atIndex The index to insert the separator at.
            */
            public InsertSeparator ($subMenuPath: string, $atIndex: number) : void
            /** 
            Removes the menu item at index.
            * @param $index The index of the item to remove.
            */
            public RemoveItemAt ($index: number) : void
            /** 
            Clears all items from the menu.
            */
            public ClearItems () : void
            /** 
            Gets the status of all items by calling their status callback and removes the excess separators.
            * @param $e The source event.
            */
            public PrepareForDisplay ($e: UnityEngine.UIElements.EventBase) : void
            public constructor ()
        }
        /** 
        Gates control when the dispatcher processes events.
        */
        class EventDispatcherGate extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.EventDispatcherGate>, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Implementation of IDisposable.Dispose. Opens the gate. If all gates are open, events in the queue are processed.
            */
            public Dispose () : void
            public Equals ($other: UnityEngine.UIElements.EventDispatcherGate) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.EventDispatcherGate, $right: UnityEngine.UIElements.EventDispatcherGate) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.EventDispatcherGate, $right: UnityEngine.UIElements.EventDispatcherGate) : boolean
            public constructor ($d: UnityEngine.UIElements.EventDispatcher)
        }
        /** 
        Dispatches events to a IPanel.
        */
        class EventDispatcher extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        interface IPointerCaptureEvent
        {
        }
        class PointerCaptureEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPointerCaptureEvent, System.IDisposable, UnityEngine.UIElements.IPointerCaptureEventInternal
        {
            protected [__keep_incompatibility]: never;
            public get relatedTarget(): UnityEngine.UIElements.IEventHandler;
            public get pointerId(): number;
            public static GetPooled ($target: any, $relatedTarget: any, $pointerId: any) : any
            public static GetPooled () : any
        }
        /** 
        Event sent when a VisualElement releases a pointer.
        */
        class PointerCaptureOutEvent extends UnityEngine.UIElements.PointerCaptureEventBase$1<UnityEngine.UIElements.PointerCaptureOutEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, System.IDisposable, UnityEngine.UIElements.IPointerCaptureEventInternal
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Event sent when a pointer is captured by a VisualElement.
        */
        class PointerCaptureEvent extends UnityEngine.UIElements.PointerCaptureEventBase$1<UnityEngine.UIElements.PointerCaptureEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, System.IDisposable, UnityEngine.UIElements.IPointerCaptureEventInternal
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface IMouseCaptureEvent
        {
        }
        class MouseCaptureEventBase$1<T> extends UnityEngine.UIElements.PointerCaptureEventBase$1<T> implements UnityEngine.UIElements.IMouseCaptureEvent, UnityEngine.UIElements.IPointerCaptureEvent, System.IDisposable, UnityEngine.UIElements.IPointerCaptureEventInternal
        {
            protected [__keep_incompatibility]: never;
            public get relatedTarget(): UnityEngine.UIElements.IEventHandler;
            public static GetPooled ($target: any, $relatedTarget: any) : any
            public static GetPooled ($target: any, $relatedTarget: any, $pointerId: any) : any
            public static GetPooled () : any
        }
        /** 
        Event sent before a handler stops capturing the mouse.
        */
        class MouseCaptureOutEvent extends UnityEngine.UIElements.MouseCaptureEventBase$1<UnityEngine.UIElements.MouseCaptureOutEvent> implements UnityEngine.UIElements.IMouseCaptureEvent, UnityEngine.UIElements.IPointerCaptureEvent, System.IDisposable, UnityEngine.UIElements.IPointerCaptureEventInternal
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Event sent after a handler starts capturing the mouse.
        */
        class MouseCaptureEvent extends UnityEngine.UIElements.MouseCaptureEventBase$1<UnityEngine.UIElements.MouseCaptureEvent> implements UnityEngine.UIElements.IMouseCaptureEvent, UnityEngine.UIElements.IPointerCaptureEvent, System.IDisposable, UnityEngine.UIElements.IPointerCaptureEventInternal
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface ICommandEvent
        {
            /** 
            Name of the command.
            */
            commandName : string
        }
        class CommandEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.ICommandEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get commandName(): string;
            public static GetPooled ($systemEvent: any) : any
            public static GetPooled ($commandName: any) : any
            public static GetPooled () : any
        }
        /** 
        This event is sent by the Editor while it determines whether the command will be handled by an element in the panel.
        */
        class ValidateCommandEvent extends UnityEngine.UIElements.CommandEventBase$1<UnityEngine.UIElements.ValidateCommandEvent> implements UnityEngine.UIElements.ICommandEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Name of the command.
            */
            public get commandName(): string;
            public constructor ()
        }
        /** 
        This event is sent by the Editor when an element in the panel should execute a command.
        */
        class ExecuteCommandEvent extends UnityEngine.UIElements.CommandEventBase$1<UnityEngine.UIElements.ExecuteCommandEvent> implements UnityEngine.UIElements.ICommandEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Name of the command.
            */
            public get commandName(): string;
            public constructor ()
        }
        interface IDragAndDropEvent
        {
        }
        class DragAndDropEventBase$1<T> extends UnityEngine.UIElements.MouseEventBase$1<T> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        The event sent to a dragged element when the drag and drop process ends.
        */
        class DragExitedEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragExitedEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI drag exited event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.DragExitedEvent
            public constructor ()
        }
        /** 
        Use the DragEnterEvent class to manage events that occur when dragging enters an element or one of its descendants. The DragEnterEvent does not trickle down and does not bubble up.
        */
        class DragEnterEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragEnterEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Use the DragLeaveEvent class to manage events sent when dragging leaves an element or one of its descendants. The DragLeaveEvent does not trickle down and does not bubble up.
        */
        class DragLeaveEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragLeaveEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        The event sent when the element being dragged enters a possible drop target.
        */
        class DragUpdatedEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragUpdatedEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI drag updated event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.DragUpdatedEvent
            public constructor ()
        }
        /** 
        The event sent to an element when another element is dragged and dropped on the element.
        */
        class DragPerformEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragPerformEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        The propagation phases of an event.
        */
        enum PropagationPhase
        { None = 0, TrickleDown = 1, BubbleUp = 3, AtTarget = 2, DefaultAction = 4, DefaultActionAtTarget = 5 }
        interface EventCallback$2<TEventType, TCallbackArgs>
        { 
        (evt: TEventType, userArgs: TCallbackArgs) : void; 
        Invoke?: (evt: TEventType, userArgs: TCallbackArgs) => void;
        }
        /** 
        Use this enum to specify during which phases the event handler is executed.
        */
        enum TrickleDown
        { NoTrickleDown = 0, TrickleDown = 1 }
        interface IFocusEvent
        {
            /** 
            Related target. See implementation for specific meaning.
            */
            relatedTarget : UnityEngine.UIElements.Focusable
            /** 
            Direction of the focus change.
            */
            direction : UnityEngine.UIElements.FocusChangeDirection
        }
        /** 
        Base class for defining in which direction the focus moves in a focus ring.
        */
        class FocusChangeDirection extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Focus came from an unspecified direction, for example after a mouse down.
            */
            public static get unspecified(): UnityEngine.UIElements.FocusChangeDirection;
            /** 
            The null direction. This is usually used when the focus stays on the same element.
            */
            public static get none(): UnityEngine.UIElements.FocusChangeDirection;
            public static op_Implicit ($fcd: UnityEngine.UIElements.FocusChangeDirection) : number
        }
        class FocusEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements System.IDisposable, UnityEngine.UIElements.IFocusEvent
        {
            protected [__keep_incompatibility]: never;
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public static GetPooled ($target: any, $relatedTarget: any, $direction: any, $focusController: any, $bIsFocusDelegated?: any) : any
            public static GetPooled () : any
        }
        /** 
        Class in charge of managing the focus inside a Panel.
        */
        class FocusController extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The currently focused VisualElement.
            */
            public get focusedElement(): UnityEngine.UIElements.Focusable;
            /** 
            Instructs the FocusController to ignore the given event.
            This will prevent the event from changing the current focused VisualElement or triggering focus events.
            * @param $evt The event to be ignored.
            */
            public IgnoreEvent ($evt: UnityEngine.UIElements.EventBase) : void
            public constructor ($focusRing: UnityEngine.UIElements.IFocusRing)
        }
        /** 
        Event sent immediately before an element loses focus. This event trickles down and bubbles up.
        */
        class FocusOutEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.FocusOutEvent> implements System.IDisposable, UnityEngine.UIElements.IFocusEvent
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Event sent immediately after an element has lost focus. This event trickles down and does not bubbles up.
        */
        class BlurEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.BlurEvent> implements System.IDisposable, UnityEngine.UIElements.IFocusEvent
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Event sent immediately before an element gains focus. This event trickles down and bubbles up.
        */
        class FocusInEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.FocusInEvent> implements System.IDisposable, UnityEngine.UIElements.IFocusEvent
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Event sent immediately after an element has gained focus. This event trickles down and does not bubbles up.
        */
        class FocusEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.FocusEvent> implements System.IDisposable, UnityEngine.UIElements.IFocusEvent
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Sends an event when text from a TextField changes.
        */
        class InputEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.InputEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The text before the change occured.
            */
            public get previousData(): string;
            /** 
            The new text.
            */
            public get newData(): string;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $previousData The text before the change occured.
            * @param $newData The new text.
            * @returns An initialized event. 
            */
            public static GetPooled ($previousData: string, $newData: string) : UnityEngine.UIElements.InputEvent
            public constructor ()
        }
        /** 
        This event is sent when a pressed key is released.
        */
        class KeyUpEvent extends UnityEngine.UIElements.KeyboardEventBase$1<UnityEngine.UIElements.KeyUpEvent> implements UnityEngine.UIElements.IKeyboardEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets the character entered.
            */
            public get character(): number;
            /** 
            The key code.
            */
            public get keyCode(): UnityEngine.KeyCode;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent after layout calculations, when the position or the dimension of an element changes.
        */
        class GeometryChangedEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.GeometryChangedEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the element's old dimensions.
            */
            public get oldRect(): UnityEngine.Rect;
            /** 
            Gets the elements's new dimensions.
            */
            public get newRect(): UnityEngine.Rect;
            /** 
            Gets an event from the event pool, and initializes it with the specified values. Use this method
            instead of instancing new events. Use Dispose() to release events back to the event pool.
            * @param $oldRect The old dimensions of the element.
            * @param $newRect The new dimensions of the element.
            * @returns An initialized event. 
            */
            public static GetPooled ($oldRect: UnityEngine.Rect, $newRect: UnityEngine.Rect) : UnityEngine.UIElements.GeometryChangedEvent
            public constructor ()
        }
        /** 
        This event is sent when a mouse button is pressed.
        */
        class MouseDownEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseDownEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI mouse event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseDownEvent
            public constructor ()
        }
        /** 
        This event is sent when a mouse button is released.
        */
        class MouseUpEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseUpEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI mouse event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseUpEvent
            public constructor ()
        }
        /** 
        This event is sent when the mouse moves.
        */
        class MouseMoveEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseMoveEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI mouse event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseMoveEvent
            public constructor ()
        }
        /** 
        The event sent when clicking the right mouse button.
        */
        class ContextClickEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.ContextClickEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when the mouse wheel moves.
        */
        class WheelEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.WheelEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            The magnitude of WheelEvent.delta that corresponds to exactly one tick of the scroll wheel.
            */
            public static scrollDeltaPerTick : number
            /** 
            The amount of scrolling applied with the mouse wheel.
            */
            public get delta(): UnityEngine.Vector3;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent A wheel IMGUI event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.WheelEvent
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer enters an element or one of its descendent elements.
        The event trickles down but does not bubble up.
        */
        class MouseEnterEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseEnterEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer exits an element and all its descendent elements.
        The event trickles down but does not bubble up.
        */
        class MouseLeaveEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseLeaveEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer enters an element.
        The event trickles down and bubbles up.
        */
        class MouseOverEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseOverEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer exits an element.
        The event trickles down and bubbles up.
        */
        class MouseOutEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseOutEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer enters a window.
        The event bubbles up but does not trickle down.
        */
        class MouseEnterWindowEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseEnterWindowEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer exits a window.
        The event bubbles up but does not trickle down.
        */
        class MouseLeaveWindowEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseLeaveWindowEvent> implements UnityEngine.UIElements.IPointerOrMouseEvent, UnityEngine.UIElements.IMouseEvent, System.IDisposable, UnityEngine.UIElements.IMouseEventInternal
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI MouseLeaveWindow event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseLeaveWindowEvent
            public constructor ()
        }
        interface INavigationEvent
        {
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            shiftKey : boolean
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            ctrlKey : boolean
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            commandKey : boolean
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            altKey : boolean
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            actionKey : boolean
        }
        class NavigationEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get modifiers(): UnityEngine.EventModifiers;
            public get shiftKey(): boolean;
            public get ctrlKey(): boolean;
            public get commandKey(): boolean;
            public get altKey(): boolean;
            public get actionKey(): boolean;
            public static GetPooled ($modifiers?: any) : any
            public static GetPooled () : any
        }
        /** 
        Event typically sent when the user presses the D-pad, moves a joystick or presses the arrow keys.
        */
        class NavigationMoveEvent extends UnityEngine.UIElements.NavigationEventBase$1<UnityEngine.UIElements.NavigationMoveEvent> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The direction of the navigation.
            */
            public get direction(): UnityEngine.UIElements.NavigationMoveEvent.Direction;
            /** 
            The move vector, if applicable.
            */
            public get move(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values.
            Use this function instead of creating new events.
            Events obtained from this method should be released back to the pool using Dispose().
            * @param $moveVector The move vector.
            * @param $modifiers The modifier keys held down during the event.
            * @returns An initialized navigation event. 
            */
            public static GetPooled ($moveVector: UnityEngine.Vector2, $modifiers?: UnityEngine.EventModifiers) : UnityEngine.UIElements.NavigationMoveEvent
            public static GetPooled ($direction: UnityEngine.UIElements.NavigationMoveEvent.Direction, $modifiers?: UnityEngine.EventModifiers) : UnityEngine.UIElements.NavigationMoveEvent
            public constructor ()
        }
        /** 
        Event sent when the user presses the cancel button.
        */
        class NavigationCancelEvent extends UnityEngine.UIElements.NavigationEventBase$1<UnityEngine.UIElements.NavigationCancelEvent> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the user presses the submit button.
        */
        class NavigationSubmitEvent extends UnityEngine.UIElements.NavigationEventBase$1<UnityEngine.UIElements.NavigationSubmitEvent> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        interface IPanelChangedEvent
        {
        }
        class PanelChangedEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPanelChangedEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get originPanel(): UnityEngine.UIElements.IPanel;
            public get destinationPanel(): UnityEngine.UIElements.IPanel;
            public static GetPooled ($originPanel: any, $destinationPanel: any) : any
            public static GetPooled () : any
        }
        /** 
        Event sent after an element is added to an element that is a descendent of a panel.
        */
        class AttachToPanelEvent extends UnityEngine.UIElements.PanelChangedEventBase$1<UnityEngine.UIElements.AttachToPanelEvent> implements UnityEngine.UIElements.IPanelChangedEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Event sent just before an element is detach from its parent, if the parent is the descendant of a panel.
        */
        class DetachFromPanelEvent extends UnityEngine.UIElements.PanelChangedEventBase$1<UnityEngine.UIElements.DetachFromPanelEvent> implements UnityEngine.UIElements.IPanelChangedEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        A static class that holds pointer type values.
        */
        class PointerType extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The pointer type for mouse events.
            */
            public static mouse : string
            /** 
            The pointer type for touch events.
            */
            public static touch : string
            /** 
            The pointer type for pen events.
            */
            public static pen : string
            /** 
            The pointer type for events created by unknown devices.
            */
            public static unknown : string
        }
        /** 
        A static class that holds pointer ID values.
        */
        class PointerId extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The maximum number of pointers the implementation supports.
            */
            public static maxPointers : number
            /** 
            Represents an invalid pointer ID value.
            */
            public static invalidPointerId : number
            /** 
            The mouse pointer ID.
            */
            public static mousePointerId : number
            /** 
            The base ID for touch pointers.
            */
            public static touchPointerIdBase : number
            /** 
            The number of touch pointers the implementation supports.
            */
            public static touchPointerCount : number
            /** 
            The base ID for pen pointers.
            */
            public static penPointerIdBase : number
            /** 
            The number of pen pointers the implementation supports.
            */
            public static penPointerCount : number
        }
        interface IPointerEvent
        {
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            pointerId : number
            /** 
            Gets the type of pointer that created the event.
            */
            pointerType : string
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            isPrimary : boolean
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            button : number
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            pressedButtons : number
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            position : UnityEngine.Vector3
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            localPosition : UnityEngine.Vector3
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            deltaPosition : UnityEngine.Vector3
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            deltaTime : number
            /** 
            Gets the number of times the button was pressed.
            */
            clickCount : number
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            pressure : number
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            tangentialPressure : number
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            altitudeAngle : number
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            azimuthAngle : number
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            twist : number
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            tilt : UnityEngine.Vector2
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            penStatus : UnityEngine.PenStatus
            /** 
            Gets an estimate of the radius of a touch.
            */
            radius : UnityEngine.Vector2
            /** 
            Gets the accuracy of the touch radius.
            */
            radiusVariance : UnityEngine.Vector2
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            shiftKey : boolean
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            ctrlKey : boolean
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            commandKey : boolean
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            altKey : boolean
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            actionKey : boolean
        }
        class PointerEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get pointerId(): number;
            public get pointerType(): string;
            public get isPrimary(): boolean;
            public get button(): number;
            public get pressedButtons(): number;
            public get position(): UnityEngine.Vector3;
            public get localPosition(): UnityEngine.Vector3;
            public get deltaPosition(): UnityEngine.Vector3;
            public get deltaTime(): number;
            public get clickCount(): number;
            public get pressure(): number;
            public get tangentialPressure(): number;
            public get altitudeAngle(): number;
            public get azimuthAngle(): number;
            public get twist(): number;
            public get tilt(): UnityEngine.Vector2;
            public get penStatus(): UnityEngine.PenStatus;
            public get radius(): UnityEngine.Vector2;
            public get radiusVariance(): UnityEngine.Vector2;
            public get modifiers(): UnityEngine.EventModifiers;
            public get shiftKey(): boolean;
            public get ctrlKey(): boolean;
            public get commandKey(): boolean;
            public get altKey(): boolean;
            public get actionKey(): boolean;
            public get currentTarget(): UnityEngine.UIElements.IEventHandler;
            public static GetPooled ($systemEvent: any) : any
            public static GetPooled ($touch: any, $modifiers?: any) : any
            public static GetPooled ($pen: any, $modifiers?: any) : any
            public static GetPooled ($triggerEvent: any) : any
            public static GetPooled () : any
        }
        /** 
        Sends when a pointer is pressed inside a visual element.
        */
        class PointerDownEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerDownEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer changes state.
        */
        class PointerMoveEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerMoveEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer does not change for a set amount of time, determined by the operating system.
        */
        class PointerStationaryEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerStationaryEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer's last pressed button is released.
        */
        class PointerUpEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerUpEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when pointer interaction is cancelled.
        */
        class PointerCancelEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerCancelEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when the left mouse button is clicked.
        */
        class ClickEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.ClickEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer enters a VisualElement or one of its descendants.
        The event does not trickle down and does not bubble up.
        */
        class PointerEnterEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerEnterEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer exits an element and all of its descendants.
        The event does not trickle down and does not bubble up.
        */
        class PointerLeaveEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerLeaveEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer enters an element.
        The event trickles down and bubbles up.
        */
        class PointerOverEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerOverEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer exits an element.
        The event trickles down and bubbles up.
        */
        class PointerOutEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerOutEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, UnityEngine.UIElements.IPointerOrMouseEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent after the custom style properties of a VisualElement have been resolved.
        */
        class CustomStyleResolvedEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.CustomStyleResolvedEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the custom style properties accessor for the targeted VisualElement.
            */
            public get customStyle(): UnityEngine.UIElements.ICustomStyle;
            public constructor ()
        }
        interface ICustomStyle
        {
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<number>, $value: $Ref<number>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<number>, $value: $Ref<number>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<boolean>, $value: $Ref<boolean>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.Color>, $value: $Ref<UnityEngine.Color>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.Texture2D>, $value: $Ref<UnityEngine.Texture2D>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.Sprite>, $value: $Ref<UnityEngine.Sprite>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.UIElements.VectorImage>, $value: $Ref<UnityEngine.UIElements.VectorImage>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.Object>, $value: $Ref<T>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<string>, $value: $Ref<string>) : boolean
        }
        /** 
        Event sent to find the first VisualElement that displays a tooltip.
        */
        class TooltipEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.TooltipEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Text to display inside the tooltip box.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            /** 
            Rectangle of the hovered VisualElement in the panel coordinate system.
            */
            public get rect(): UnityEngine.Rect;
            public set rect(value: UnityEngine.Rect);
            public constructor ()
        }
        interface ITransitionEvent
        {
            /** 
            The names of the properties associated with the transition.
            */
            stylePropertyNames : UnityEngine.UIElements.StylePropertyNameCollection
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            elapsedTime : number
        }
        /** 
        Collection of StylePropertyName.
        */
        class StylePropertyNameCollection extends System.ValueType implements System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>, System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an enumerator that iterates through the StylePropertyNameCollection.
            * @returns An enumerator that can be used to iterate through the StylePropertyNameCollection. 
            */
            public GetEnumerator () : UnityEngine.UIElements.StylePropertyNameCollection.Enumerator
            /** 
            Determines whether a StylePropertyNameCollection contains the specified element.
            * @param $stylePropertyName The element to locate in the <see cref="StylePropertyNameCollection" />.
            * @returns true if the StylePropertyNameCollection contains the specified element; otherwise, false. 
            */
            public Contains ($stylePropertyName: UnityEngine.UIElements.StylePropertyName) : boolean
        }
        /** 
        Defines the name of a style property.
        */
        class StylePropertyName extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StylePropertyName>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if the StylePropertyName is null or empty.
            * @param $propertyName StylePropertyName you want to check.
            * @returns True if propertyName is invalid. False otherwise. 
            */
            public static IsNullOrEmpty ($propertyName: UnityEngine.UIElements.StylePropertyName) : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.StylePropertyName, $rhs: UnityEngine.UIElements.StylePropertyName) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StylePropertyName, $rhs: UnityEngine.UIElements.StylePropertyName) : boolean
            public static op_Implicit ($name: string) : UnityEngine.UIElements.StylePropertyName
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.UIElements.StylePropertyName) : boolean
            public constructor ($name: string)
        }
        class TransitionEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            public get elapsedTime(): number;
            public static GetPooled ($stylePropertyName: any, $elapsedTime: any) : any
            public AffectsProperty ($stylePropertyName: UnityEngine.UIElements.StylePropertyName) : boolean
            public static GetPooled () : any
        }
        /** 
        Event sent when a transition is created (i.e. added to the set of running transitions).
        */
        class TransitionRunEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionRunEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Event sent when a transition's delay phase ends.
        */
        class TransitionStartEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionStartEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Event sent at the completion of the transition. In the case where a transition is removed before completion then the event will not fire.
        */
        class TransitionEndEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionEndEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Event sent when a transition is canceled.
        */
        class TransitionCancelEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionCancelEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Class used to send a IMGUI event that has no equivalent UIElements event.
        */
        class IMGUIEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.IMGUIEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent The IMGUI event used to initialize the event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.IMGUIEvent
            public constructor ()
        }
        /** 
        Provides the base class for field mouse draggers.
        */
        class BaseFieldMouseDragger extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Sets the drag zone for the driven field.
            * @param $dragElement The target of the drag operation.
            */
            public SetDragZone ($dragElement: UnityEngine.UIElements.VisualElement) : void
            /** 
            Sets the drag zone for the driven field.
            * @param $dragElement The target of the drag operation.
            * @param $hotZone The rectangle that contains the drag zone.
            */
            public SetDragZone ($dragElement: UnityEngine.UIElements.VisualElement, $hotZone: UnityEngine.Rect) : void
        }
        class FieldMouseDragger$1<T> extends UnityEngine.UIElements.BaseFieldMouseDragger
        {
            protected [__keep_incompatibility]: never;
            public get dragging(): boolean;
            public set dragging(value: boolean);
            public get startValue(): T;
            public set startValue(value: T);
            public constructor ($drivenField: UnityEngine.UIElements.IValueField$1<T>)
        }
        interface IFocusRing
        {
            /** 
            Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right.
            */
            GetFocusChangeDirection ($currentFocusable: UnityEngine.UIElements.Focusable, $e: UnityEngine.UIElements.EventBase) : UnityEngine.UIElements.FocusChangeDirection
            /** 
            Get the next element in the given direction.
            */
            GetNextFocusable ($currentFocusable: UnityEngine.UIElements.Focusable, $direction: UnityEngine.UIElements.FocusChangeDirection) : UnityEngine.UIElements.Focusable
        }
        /** 
        Contains the settings used by the dynamic atlas system.
        */
        class DynamicAtlasSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies the minimum size (width/height) of the atlas texture, in pixels. This value must be a power of two,
            and must be greater than 0 and less than or equal to maxAtlasSize.
            */
            public get minAtlasSize(): number;
            public set minAtlasSize(value: number);
            /** 
            Specifies the maximum size (width/height) of the atlas texture, in pixels. This value must be a power of two,
            and must be greater than or equal to minAtlasSize.
            */
            public get maxAtlasSize(): number;
            public set maxAtlasSize(value: number);
            /** 
            Specifies the maximum size (width/height) of a texture that can be added to the atlas. When activeFilters
            contains DynamicAtlasFilters.Size, textures larger than this size are excluded from the atlas. Otherwise, this
            value is not used.
            */
            public get maxSubTextureSize(): number;
            public set maxSubTextureSize(value: number);
            /** 
            Defines the filters that the dynamic atlas system uses to exclude textures from the texture atlas.
            */
            public get activeFilters(): UnityEngine.UIElements.DynamicAtlasFilters;
            public set activeFilters(value: UnityEngine.UIElements.DynamicAtlasFilters);
            /** 
            Default filters for a dynamic atlas.
            */
            public static get defaultFilters(): UnityEngine.UIElements.DynamicAtlasFilters;
            /** 
            When a delegate is assigned, the dynamic atlas system calls it to determine whether or not a texture can be added to the atlas.
            */
            public get customFilter(): UnityEngine.UIElements.DynamicAtlasCustomFilter;
            public set customFilter(value: UnityEngine.UIElements.DynamicAtlasCustomFilter);
            /** 
            Specifies default values used to initialize the structure.
            */
            public static get defaults(): UnityEngine.UIElements.DynamicAtlasSettings;
            public constructor ()
        }
        /** 
        Options that specify how elements in the panel scale when the screen size changes. See PanelSettings.scaleMode.
        */
        enum PanelScaleMode
        { ConstantPixelSize = 0, ConstantPhysicalSize = 1, ScaleWithScreenSize = 2 }
        /** 
        Options that specify how to scale the panel area when the aspect ratio of the current screen resolution
        does not match the reference resolution. See PanelSettings.screenMatchMode.
        */
        enum PanelScreenMatchMode
        { MatchWidthOrHeight = 0, Shrink = 1, Expand = 2 }
        /** 
        Defines a Panel Settings asset that instantiates a panel at runtime. The panel makes it possible for Unity to display
        UXML-file based UI in the Game view.
        */
        class PanelSettings extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** 
            Forces the UI shader to output colors in the gamma color space.
            */
            public forceGammaRendering : boolean
            /** 
            Specifies a PanelTextSettings that will be used by every UI Document attached to the panel.
            */
            public textSettings : UnityEngine.UIElements.PanelTextSettings
            /** 
            Specifies a style sheet that Unity applies to every UI Document attached to the panel.
            */
            public get themeStyleSheet(): UnityEngine.UIElements.ThemeStyleSheet;
            public set themeStyleSheet(value: UnityEngine.UIElements.ThemeStyleSheet);
            /** 
            Specifies a Render Texture to render the panel's UI on.
            */
            public get targetTexture(): UnityEngine.RenderTexture;
            public set targetTexture(value: UnityEngine.RenderTexture);
            /** 
            Determines how elements in the panel scale when the screen size changes.
            */
            public get scaleMode(): UnityEngine.UIElements.PanelScaleMode;
            public set scaleMode(value: UnityEngine.UIElements.PanelScaleMode);
            /** 
            Sprites have a Pixels Per Unit value that controls the pixel density of the sprite.
            For sprites that have the same Pixels Per Unit value as the Reference Pixels Per Unit value in the
            PanelSettings asset, the pixel density will be one to one.
            */
            public get referenceSpritePixelsPerUnit(): number;
            public set referenceSpritePixelsPerUnit(value: number);
            /** 
            A uniform scaling factor that Unity applies to elements in the panel before
            the panel transform.
            */
            public get scale(): number;
            public set scale(value: number);
            /** 
            The DPI that the UI is designed for.
            */
            public get referenceDpi(): number;
            public set referenceDpi(value: number);
            /** 
            The DPI value that Unity uses when it cannot determine the screen DPI.
            */
            public get fallbackDpi(): number;
            public set fallbackDpi(value: number);
            /** 
            The resolution the UI is designed for.
            */
            public get referenceResolution(): UnityEngine.Vector2Int;
            public set referenceResolution(value: UnityEngine.Vector2Int);
            /** 
            Specifies how to scale the panel area when the aspect ratio of the current resolution
            does not match the reference resolution.
            */
            public get screenMatchMode(): UnityEngine.UIElements.PanelScreenMatchMode;
            public set screenMatchMode(value: UnityEngine.UIElements.PanelScreenMatchMode);
            /** 
            Determines whether Unity uses width, height, or a mix of the two as a reference when it scales the panel area.
            */
            public get match(): number;
            public set match(value: number);
            /** 
            When the Scene uses more than one panel, this value determines where this panel appears in the sorting
            order relative to other panels.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** 
            Set the display intended for the panel.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** 
            Sets the log level for bindings in panels using this PanelSettings asset.
            */
            public get bindingLogLevel(): UnityEngine.UIElements.BindingLogLevel;
            public set bindingLogLevel(value: UnityEngine.UIElements.BindingLogLevel);
            /** 
            Determines whether the depth/stencil buffer is cleared before the panel is rendered.
            */
            public get clearDepthStencil(): boolean;
            public set clearDepthStencil(value: boolean);
            /** 
            The depth used to clear the depth/stencil buffer.
            */
            public get depthClearValue(): number;
            /** 
            Determines whether the color buffer is cleared before the panel is rendered.
            */
            public get clearColor(): boolean;
            public set clearColor(value: boolean);
            /** 
            The color used to clear the color buffer.
            */
            public get colorClearValue(): UnityEngine.Color;
            public set colorClearValue(value: UnityEngine.Color);
            /** 
            The expected number of vertices that will be used by this panel.
            */
            public get vertexBudget(): number;
            public set vertexBudget(value: number);
            /** 
            Settings of the dynamic atlas.
            */
            public get dynamicAtlasSettings(): UnityEngine.UIElements.DynamicAtlasSettings;
            public set dynamicAtlasSettings(value: UnityEngine.UIElements.DynamicAtlasSettings);
            /** 
            Sets a custom IPanelChangeReceiver in the panelChangeReceiver setter to receive every change event.
            This method is available only in development builds and the editor, as it is a debug feature to go along the profiling of an application.
            */
            public SetPanelChangeReceiver ($value: UnityEngine.UIElements.IDebugPanelChangeReceiver) : void
            public SetScreenToPanelSpaceFunction ($screentoPanelSpaceFunction: System.Func$2<UnityEngine.Vector2, UnityEngine.Vector2>) : void
        }
        /** 
        Represents text rendering settings for a specific UI panel.
        PanelSettings.textSettings
        */
        class PanelTextSettings extends UnityEngine.TextCore.Text.TextSettings
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Style sheets are applied to visual elements in order to control the layout and visual appearance of the user interface.
        */
        class StyleSheet extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether there were errors encountered while importing the StyleSheet
            */
            public get importedWithErrors(): boolean;
            /** 
            Whether there were warnings encountered while importing the StyleSheet
            */
            public get importedWithWarnings(): boolean;
            /** 
            A hash value computed from the stylesheet content.
            */
            public get contentHash(): number;
            public set contentHash(value: number);
            public constructor ()
        }
        /** 
        Represents a style sheet that's assembled from other style sheets.
        */
        class ThemeStyleSheet extends UnityEngine.UIElements.StyleSheet
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface IDebugPanelChangeReceiver
        {
            /** 
            Receives notifications for every change that occurs on the panel's visual elements.
            This method is exclusively available in development builds and the Editor, as it serves as a debug feature that complements the profiling of an application.
            * @param $element  The element that changed.
            * @param $changeType A string that contains the comma-separated value of what has changed.
            */
            OnVisualElementChange ($element: UnityEngine.UIElements.VisualElement, $changeType: UnityEngine.UIElements.VersionChangeType) : void
        }
        interface IRuntimePanel extends UnityEngine.UIElements.IPanel, System.IDisposable
        {
            /** 
            The UnityEngine.UIElements.PanelSettings asset associated with this panel.
            */
            panelSettings : UnityEngine.UIElements.PanelSettings
            /** 
            A GameObject from the Scene that can be used by UnityEngine.EventSystems.EventSystem
            to get and set focus to this panel. If null, panel focus will be handled independently of
            Event System selection.
            */
            selectableGameObject : UnityEngine.GameObject
            /** 
            Root of the VisualElement hierarchy.
            */
            visualTree : UnityEngine.UIElements.VisualElement
            /** 
            This Panel EventDispatcher.
            */
            dispatcher : UnityEngine.UIElements.EventDispatcher
            /** 
            Describes in which context a VisualElement hierarchy is being ran.
            */
            contextType : UnityEngine.UIElements.ContextType
            /** 
            Return the focus controller for this panel.
            */
            focusController : UnityEngine.UIElements.FocusController
            /** 
            The Contextual menu manager for the panel.
            */
            contextualMenuManager : UnityEngine.UIElements.ContextualMenuManager
            /** 
            Checks whether any element within the panel has had any changes to its state since the panel was last rendered.
            */
            isDirty : boolean
            /** 
            Gives the current scaled pixels per point value of the panel.
            */
            scaledPixelsPerPoint : number
            /** 
            Returns the top element at this position. Will not return elements with pickingMode set to PickingMode.Ignore.
            * @param $point World coordinates.
            * @returns Top VisualElement at the position. Null if none was found. 
            */
            Pick ($point: UnityEngine.Vector2) : UnityEngine.UIElements.VisualElement
            PickAll ($point: UnityEngine.Vector2, $picked: System.Collections.Generic.List$1<UnityEngine.UIElements.VisualElement>) : UnityEngine.UIElements.VisualElement
        }
        /** 
        A collection of static methods that provide simple World, Screen, and Panel coordinate transformations.
        */
        class RuntimePanelUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Transforms a screen absolute position to its equivalent local coordinate on given panel.
            * @param $panel The local coordinates reference panel.
            * @param $screenPosition The screen position to transform.
            * @returns A position in panel coordinates that corresponds to the provided screen position. 
            */
            public static ScreenToPanel ($panel: UnityEngine.UIElements.IPanel, $screenPosition: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a world absolute position to its equivalent local coordinate on given panel,
            using provided camera for internal WorldToScreen transformation.
            * @param $panel The local coordinates reference panel.
            * @param $worldPosition The world position to transform.
            * @param $camera The Camera used for internal WorldToScreen transformation.
            * @returns A position in panel coordinates that corresponds to the provided world position. 
            */
            public static CameraTransformWorldToPanel ($panel: UnityEngine.UIElements.IPanel, $worldPosition: UnityEngine.Vector3, $camera: UnityEngine.Camera) : UnityEngine.Vector2
            /** 
            Transforms a world position and size (in world units) to their equivalent local position and size
            on given panel, using provided camera for internal WorldToScreen transformation.
            * @param $panel The local coordinates reference panel.
            * @param $worldPosition The world position to transform.
            * @param $worldSize The world size to transform. The object in the panel will appear to have
            that size when compared to other 3D objects at neighboring positions.
            * @param $camera The Camera used for internal WorldToScreen transformation.
            * @returns A (position, size) Rect in panel coordinates that corresponds to the provided world position
            and size. 
            */
            public static CameraTransformWorldToPanelRect ($panel: UnityEngine.UIElements.IPanel, $worldPosition: UnityEngine.Vector3, $worldSize: UnityEngine.Vector2, $camera: UnityEngine.Camera) : UnityEngine.Rect
            /** 
            Resets the dynamic atlas of the panel. Textured elements will be repainted.
            */
            public static ResetDynamicAtlas ($panel: UnityEngine.UIElements.IPanel) : void
            /** 
            Notifies the dynamic atlas of the panel that the content of the provided texture has changed. If the dynamic
            atlas contains the texture, it will update it.
            * @param $panel The current panel
            * @param $texture The texture whose content has changed.
            */
            public static SetTextureDirty ($panel: UnityEngine.UIElements.IPanel, $texture: UnityEngine.Texture2D) : void
        }
        /** 
        Defines a Component that connects VisualElements to GameObjects. This makes it
        possible to render UI defined in UXML documents in the Game view.
        */
        class UIDocument extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies the PanelSettings instance to connect this UIDocument component to.
            */
            public get panelSettings(): UnityEngine.UIElements.PanelSettings;
            public set panelSettings(value: UnityEngine.UIElements.PanelSettings);
            /** 
            If the GameObject that this UIDocument component is attached to has a parent GameObject, and
            that parent GameObject also has a UIDocument component attached to it, this value is set to
            the parent GameObject's UIDocument component automatically.
            */
            public get parentUI(): UnityEngine.UIElements.UIDocument;
            /** 
            The VisualTreeAsset loaded into the root visual element automatically.
            */
            public get visualTreeAsset(): UnityEngine.UIElements.VisualTreeAsset;
            public set visualTreeAsset(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            The root visual element where the UI hierarchy starts.
            */
            public get rootVisualElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The order in which this UIDocument will show up on the hierarchy in relation to other UIDocuments either
            attached to the same PanelSettings, or with the same UIDocument parent.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** 
            The runtime panel that this UIDocument is attached to.
            */
            public get runtimePanel(): UnityEngine.UIElements.IRuntimePanel;
        }
        /** 
        Element that draws IMGUI content. For more information, refer to.
        */
        class IMGUIContainer extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The function that's called to render and handle IMGUI events.
            */
            public get onGUIHandler(): System.Action;
            public set onGUIHandler(value: System.Action);
            /** 
            When this property is set to true, onGUIHandler is not called when the Element is outside the viewport.
            */
            public get cullingEnabled(): boolean;
            public set cullingEnabled(value: boolean);
            /** 
            ContextType of this IMGUIContainer. Currently only supports ContextType.Editor.
            */
            public get contextType(): UnityEngine.UIElements.ContextType;
            public set contextType(value: UnityEngine.UIElements.ContextType);
            public get canGrabFocus(): boolean;
            /** 
            Marks layout as dirty to trigger a redraw.
            */
            public MarkDirtyLayout () : void
            /** 
            Releases the native memory that this IMGUIContainer instance uses.
            */
            public Dispose () : void
            public constructor ()
            public constructor ($onGUIHandler: System.Action)
        }
        /** 
        Describes in which context a VisualElement hierarchy is being ran.
        */
        enum ContextType
        { Player = 0, Editor = 1 }
        /** 
        VisualElement that can implement custom immediate mode rendering.
        */
        class ImmediateModeElement extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform
        {
            protected [__keep_incompatibility]: never;
            /** 
            When this property is set to true, the Element does not repaint itself when it is outside the viewport.
            */
            public get cullingEnabled(): boolean;
            public set cullingEnabled(value: boolean);
        }
        /** 
        Represents an operation that the user is trying to accomplish through a specific input mechanism.
        */
        enum KeyboardNavigationOperation
        { None = 0, SelectAll = 1, Cancel = 2, Submit = 3, Previous = 4, Next = 5, MoveRight = 6, MoveLeft = 7, PageUp = 8, PageDown = 9, Begin = 10, End = 11 }
        /** 
        Provides a default implementation for translating input device specific events to higher level navigation operations as commonly possible with a keyboard.
        */
        class KeyboardNavigationManipulator extends UnityEngine.UIElements.Manipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            public constructor ($action: System.Action$2<UnityEngine.UIElements.KeyboardNavigationOperation, UnityEngine.UIElements.EventBase>)
        }
        /** 
        Defines conditions for manipulators to respond to specific events.
        */
        class ManipulatorActivationFilter extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.ManipulatorActivationFilter>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The button that triggers the manipulation.
            */
            public get button(): UnityEngine.UIElements.MouseButton;
            public set button(value: UnityEngine.UIElements.MouseButton);
            /** 
            Any modifier keys (ie. ctrl, alt, ...) required to trigger the manipulator.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            public set modifiers(value: UnityEngine.EventModifiers);
            /** 
            Number of mouse clicks required to activate the manipulator.
            */
            public get clickCount(): number;
            public set clickCount(value: number);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.ManipulatorActivationFilter) : boolean
            /** 
            Checks whether the current mouse event satisfies the activation requirements.
            * @param $e The mouse event.
            * @returns True if the event matches the requirements. False otherwise. 
            */
            public Matches ($e: UnityEngine.UIElements.IMouseEvent) : boolean
            /** 
            Checks whether the current mouse event satisfies the activation requirements.
            * @param $e The mouse event.
            * @returns True if the event matches the requirements. False otherwise. 
            */
            public Matches ($e: UnityEngine.UIElements.IPointerEvent) : boolean
            public static op_Equality ($filter1: UnityEngine.UIElements.ManipulatorActivationFilter, $filter2: UnityEngine.UIElements.ManipulatorActivationFilter) : boolean
            public static op_Inequality ($filter1: UnityEngine.UIElements.ManipulatorActivationFilter, $filter2: UnityEngine.UIElements.ManipulatorActivationFilter) : boolean
        }
        /** 
        Describes a MouseButton.
        */
        enum MouseButton
        { LeftMouse = 0, RightMouse = 1, MiddleMouse = 2 }
        /** 
        Class that manages capturing mouse events.
        */
        class MouseCaptureController extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if there is a handler capturing the mouse.
            * @returns True if a handler is capturing the mouse, false otherwise. 
            */
            public static IsMouseCaptured () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public static HasMouseCapture ($handler: UnityEngine.UIElements.IEventHandler) : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public static CaptureMouse ($handler: UnityEngine.UIElements.IEventHandler) : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public static ReleaseMouse ($handler: UnityEngine.UIElements.IEventHandler) : void
            /** 
            Stops an event handler from capturing the mouse.
            */
            public static ReleaseMouse () : void
        }
        /** 
        The fill rule to use when filling shapes with Painter2D.Fill.
        */
        enum FillRule
        { NonZero = 0, OddEven = 1 }
        /** 
        Join types connecting two sub-paths (see Painter2D.lineJoin).
        */
        enum LineJoin
        { Miter = 0, Bevel = 1, Round = 2 }
        /** 
        Cap types for the beginning and end of paths (see Painter2D.lineCap).
        */
        enum LineCap
        { Butt = 0, Round = 1 }
        /** 
        Direction to use when defining an arc (see Painter2D.Arc).
        */
        enum ArcDirection
        { Clockwise = 0, CounterClockwise = 1 }
        /** 
        A renderer Component that should be added next to a UIDocument Component to allow
        world-space rendering. This Component is added automatically by the UIDocument when
        the PanelSettings asset is configured in world-space.
        */
        class UIRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Value used to signify some changes in the VisualElement
        */
        enum VersionChangeType
        { Bindings = 1, ViewData = 2, Hierarchy = 4, Layout = 8, StyleSheet = 16, Styles = 32, Overflow = 64, BorderRadius = 128, BorderWidth = 256, Transform = 512, Size = 1024, Repaint = 2048, Opacity = 4096, Color = 8192, RenderHints = 16384, TransitionProperty = 32768, EventCallbackCategories = 65536, DisableRendering = 131072, BindingRegistration = 262144, DataSource = 524288, Picking = 1048576 }
        /** 
        Offers a set of options that describe the intended usage patterns of a VisualElement.
        These options serve as guidance for optimizations. You can set multiple
        usage hints on an element. For example, if both position and color change, you can set both
        DynamicTransform and DynamicColor.
        Note: Set the usage hints at edit time or before you add the VisualElement to a panel.
        In the case of transition, when it starts, the system might automatically add missing relevant
        usage hints to avoid regenerating geometry in every frame. However, this causes a one-frame performance penalty
        because the rendering data for the VisualElement and its descendants is regenerated.
        */
        enum UsageHints
        { None = 0, DynamicTransform = 1, GroupTransform = 2, MaskContainer = 4, DynamicColor = 8 }
        /** 
        Describes a PenButton. Based on W3 conventions: https:www.w3.orgTRpointerevents2/#the-buttons-property.
        */
        enum PenButton
        { PenContact = 0, PenBarrel = 1, PenEraser = 5 }
        /** 
        A static class to capture and release pointers.
        */
        class PointerCaptureHelper extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public static HasPointerCapture ($handler: UnityEngine.UIElements.IEventHandler, $pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public static CapturePointer ($handler: UnityEngine.UIElements.IEventHandler, $pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public static ReleasePointer ($handler: UnityEngine.UIElements.IEventHandler, $pointerId: number) : void
            /** 
            Returns the element that is capturing the pointer.
            * @param $panel The panel that holds the element.
            * @param $pointerId The captured pointer.
            * @returns The element that is capturing the pointer. 
            */
            public static GetCapturingElement ($panel: UnityEngine.UIElements.IPanel, $pointerId: number) : UnityEngine.UIElements.IEventHandler
            /** 
            Releases the pointer.
            * @param $panel The panel that holds the element that captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public static ReleasePointer ($panel: UnityEngine.UIElements.IPanel, $pointerId: number) : void
        }
        /** 
        Represents a vertex of geometry for drawing content of VisualElement.
        */
        class Vertex extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            A special value representing the near clipping plane. Always use this value as the vertex position's z component when building 2D (flat) UI geometry.
            */
            public static nearZ : number
            /** 
            Describes the vertex's position.
            */
            public position : UnityEngine.Vector3
            /** 
            A color value for the vertex.
            */
            public tint : UnityEngine.Color32
            /** 
            The UV coordinate of the vertex.
            */
            public uv : UnityEngine.Vector2
        }
        /** 
        Represents the vertex and index data allocated for drawing the content of a VisualElement.
        */
        class MeshWriteData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The number of vertices successfully allocated for VisualElement content drawing.
            */
            public get vertexCount(): number;
            /** 
            The number of indices successfully allocated for VisualElement content drawing.
            */
            public get indexCount(): number;
            /** 
            Assigns the value of the next vertex of the allocated vertices list.
            * @param $vertex The value of the next vertex.
            */
            public SetNextVertex ($vertex: UnityEngine.UIElements.Vertex) : void
            public SetNextIndex ($index: number) : void
            /** 
            Fills the values of the allocated vertices with values copied directly from an array.
            When this method is called, it is not possible to use SetNextVertex to fill the allocated vertices array.
            * @param $vertices The array of vertices to copy from. The length of the array must match the allocated vertex count.
            */
            public SetAllVertices ($vertices: System.Array$1<UnityEngine.UIElements.Vertex>) : void
            public SetAllVertices ($vertices: Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>) : void
            public SetAllIndices ($indices: System.Array$1<number>) : void
            public SetAllIndices ($indices: Unity.Collections.NativeSlice$1<number>) : void
        }
        /** 
        Provides methods for generating a VisualElement's visual content during the generateVisualContent callback.
        */
        class MeshGenerationContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The element for which VisualElement.generateVisualContent was invoked.
            */
            public get visualElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The vector painter object used to issue drawing commands.
            */
            public get painter2D(): UnityEngine.UIElements.Painter2D;
            public AllocateTempMesh ($vertexCount: number, $indexCount: number, $vertices: $Ref<Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>>, $indices: $Ref<Unity.Collections.NativeSlice$1<number>>) : void
            /** 
            Allocates and draws the specified number of vertices and indices required to express geometry for drawing the content of a VisualElement.
            * @param $vertexCount The number of vertices to allocate. The maximum is 65535 (or UInt16.MaxValue).
            * @param $indexCount The number of triangle list indices to allocate. Each 3 indices represent one triangle, so this value should be multiples of 3.
            * @param $texture An optional texture to be applied on the triangles allocated. Pass null to rely on vertex colors only.
            * @returns An object that gives access to the newely allocated data. If the returned vertex count is 0, then allocation failed (the system ran out of memory). 
            */
            public Allocate ($vertexCount: number, $indexCount: number, $texture?: UnityEngine.Texture) : UnityEngine.UIElements.MeshWriteData
            public DrawMesh ($vertices: Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>, $indices: Unity.Collections.NativeSlice$1<number>, $texture?: UnityEngine.Texture) : void
            /** 
            Draws a VectorImage asset.
            * @param $vectorImage The vector image to draw.
            * @param $offset The position offset where to draw the vector image.
            * @param $rotationAngle The rotation of the vector image.
            * @param $scale The scale of the vector image
            */
            public DrawVectorImage ($vectorImage: UnityEngine.UIElements.VectorImage, $offset: UnityEngine.Vector2, $rotationAngle: UnityEngine.UIElements.Angle, $scale: UnityEngine.Vector2) : void
            /** 
            Draw a string of text.
            * @param $text The text to display.
            * @param $pos The start position where the text will be displayed.
            * @param $fontSize The font size to use.
            * @param $color The text color.
            * @param $font The font asset to use. If the value is null, the font asset of the VisualElement style is used instead. For more information, refer to <see cref="IStyle.unityFontDefinition" />.
            */
            public DrawText ($text: string, $pos: UnityEngine.Vector2, $fontSize: number, $color: UnityEngine.Color, $font?: UnityEngine.TextCore.Text.FontAsset) : void
            /** 
            Returns an allocator that can be used to safely allocate temporary meshes from the job system. The meshes
            have the same scope as those allocated by AllocateTempMesh.
            * @param $allocator The allocator.
            */
            public GetTempMeshAllocator ($allocator: $Ref<UnityEngine.UIElements.TempMeshAllocator>) : void
            /** 
            Inserts a node into the rendering tree that can be populated from the job system.
            * @param $node The inserted mesh generation node.
            */
            public InsertMeshGenerationNode ($node: $Ref<UnityEngine.UIElements.MeshGenerationNode>) : void
            /** 
            Instructs the renderer to wait for the completion of the provided JobHandle before beginning processing the meshes.
            * @param $jobHandle JobHandle to wait for.
            */
            public AddMeshGenerationJob ($jobHandle: Unity.Jobs.JobHandle) : void
        }
        /** 
        Object to draw 2D vector graphics.
        */
        class Painter2D extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The line width of draw paths when using Stroke.
            */
            public get lineWidth(): number;
            public set lineWidth(value: number);
            /** 
            The color of draw paths when using Stroke.
            */
            public get strokeColor(): UnityEngine.Color;
            public set strokeColor(value: UnityEngine.Color);
            /** 
            The stroke gradient to use when using Stroke.
            */
            public get strokeGradient(): UnityEngine.Gradient;
            public set strokeGradient(value: UnityEngine.Gradient);
            /** 
            The color used for fill paths when using Fill.
            */
            public get fillColor(): UnityEngine.Color;
            public set fillColor(value: UnityEngine.Color);
            /** 
            The join to use when drawing paths using Stroke.
            */
            public get lineJoin(): UnityEngine.UIElements.LineJoin;
            public set lineJoin(value: UnityEngine.UIElements.LineJoin);
            /** 
            The cap to use when drawing paths using Stroke.
            */
            public get lineCap(): UnityEngine.UIElements.LineCap;
            public set lineCap(value: UnityEngine.UIElements.LineCap);
            /** 
            When using LineJoin.Miter joins, this defines the limit on the ratio of the miter length to the
            stroke width before converting the miter to a bevel.
            */
            public get miterLimit(): number;
            public set miterLimit(value: number);
            /** 
            When created as a detached painter, clears the current content. Does nothing otherwise.
            */
            public Clear () : void
            /** 
            Dispose the Painter2D object and free its internal unmanaged resources.
            */
            public Dispose () : void
            /** 
            Begins a new path and empties the list of recorded sub-paths.
            */
            public BeginPath () : void
            /** 
            Closes the current sub-path with a straight line. If the sub-path is already closed, this does nothing.
            */
            public ClosePath () : void
            /** 
            Begins a new sub-path at the provied coordinate.
            * @param $pos The position of the new sub-path.
            */
            public MoveTo ($pos: UnityEngine.Vector2) : void
            /** 
            Adds a straight line to the current sub-path to the provided position.
            * @param $pos The end position of the line.
            */
            public LineTo ($pos: UnityEngine.Vector2) : void
            /** 
            Adds an arc to the current sub-path to the provided position using a control point.
            * @param $p1 The first control point of the arc.
            * @param $p2 The final point of the arc.
            * @param $radius The radius of the arc.
            */
            public ArcTo ($p1: UnityEngine.Vector2, $p2: UnityEngine.Vector2, $radius: number) : void
            /** 
            Adds an arc to the current sub-path to the provided position, radius and angles.
            * @param $center The center position of the arc.
            * @param $radius The radius of the arc.
            * @param $startAngle The starting angle the arc.
            * @param $endAngle The ending angle of the arc.
            * @param $antiClockwise Whether the arc should draw in the anti-clockwise direction (default=false).
            */
            public Arc ($center: UnityEngine.Vector2, $radius: number, $startAngle: UnityEngine.UIElements.Angle, $endAngle: UnityEngine.UIElements.Angle, $direction?: UnityEngine.UIElements.ArcDirection) : void
            /** 
            Adds a cubic bezier curve to the current sub-path to the provided position using two control points.
            * @param $p1 The first control point of the cubic bezier.
            * @param $p2 The second control point of the cubic bezier.
            * @param $p3 The final position of the cubic bezier.
            */
            public BezierCurveTo ($p1: UnityEngine.Vector2, $p2: UnityEngine.Vector2, $p3: UnityEngine.Vector2) : void
            /** 
            Adds a quadratic bezier curve to the current sub-path to the provided position using a control point.
            * @param $p1 The control point of the quadratic bezier.
            * @param $p2 The final position of the quadratic bezier.
            */
            public QuadraticCurveTo ($p1: UnityEngine.Vector2, $p2: UnityEngine.Vector2) : void
            /** 
            Strokes the currently defined path.
            */
            public Stroke () : void
            /** 
            Fills the currently defined path.
            * @param $fillRule The fill rule (non-zero or odd-even) to use. Default is non-zero.
            */
            public Fill ($fillRule?: UnityEngine.UIElements.FillRule) : void
            /** 
            Saves the content of this Painter2D to a VectorImage object.
            * @param $vectorImage The VectorImage object that will be initialized with this painter. This object should not be null.
            * @returns True if the VectorImage initialization succeeded. False otherwise. 
            */
            public SaveToVectorImage ($vectorImage: UnityEngine.UIElements.VectorImage) : boolean
            public constructor ()
        }
        /** 
        Represents an angle value.
        */
        class Angle extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Angle>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The angle value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The unit of the value property.
            */
            public get unit(): UnityEngine.UIElements.AngleUnit;
            public set unit(value: UnityEngine.UIElements.AngleUnit);
            /** 
            Creates an Angle from degrees.
            * @returns The created angle. 
            */
            public static Degrees ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Creates an Angle from gradians
            * @returns The created angle. 
            */
            public static Gradians ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Creates an Angle from radians
            * @returns The created angle. 
            */
            public static Radians ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Creates an Angle from turns
            * @returns The created angle. 
            */
            public static Turns ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Returns the value of the angle, expressed in degrees.
            */
            public ToDegrees () : number
            /** 
            Returns the value of the angle, expressed in gradians.
            */
            public ToGradians () : number
            /** 
            Returns the value of the angle, expressed in radians.
            */
            public ToRadians () : number
            /** 
            Returns the value of the angle, expressed in turns.
            */
            public ToTurns () : number
            public static op_Implicit ($value: number) : UnityEngine.UIElements.Angle
            public static op_Equality ($lhs: UnityEngine.UIElements.Angle, $rhs: UnityEngine.UIElements.Angle) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Angle, $rhs: UnityEngine.UIElements.Angle) : boolean
            public Equals ($other: UnityEngine.UIElements.Angle) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($value: number)
            public constructor ($value: number, $unit: UnityEngine.UIElements.AngleUnit)
        }
        /** 
        Used in jobs to allocate UI Toolkit temporary meshes.
        */
        class TempMeshAllocator extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public AllocateTempMesh ($vertexCount: number, $indexCount: number, $vertices: $Ref<Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>>, $indices: $Ref<Unity.Collections.NativeSlice$1<number>>) : void
        }
        /** 
        Contains a part of the draw sequence of a VisualElement. You can use it in a job to add nested draw calls.
        */
        class MeshGenerationNode extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public DrawMesh ($vertices: Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>, $indices: Unity.Collections.NativeSlice$1<number>, $texture?: UnityEngine.Texture) : void
        }
        /** 
        Contains timing information of scheduler events.
        */
        class TimerState extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TimerState>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Start time in milliseconds, or last callback time for repeatable IScheduledItem.
            */
            public get start(): bigint;
            public set start(value: bigint);
            /** 
            Current time in milliseconds.
            */
            public get now(): bigint;
            public set now(value: bigint);
            /** 
            Time difference in milliseconds between now and the previous callback.
            */
            public get deltaTime(): bigint;
            /** 
            Compare this object with another object and return true if they are equal.
            * @param $obj The object to compare with.
            * @returns True if the objects are equal. 
            */
            public Equals ($obj: any) : boolean
            /** 
            Compare this object with another object and return true if they are equal.
            * @param $other The object to compare with.
            * @returns True if the objects are equal. 
            */
            public Equals ($other: UnityEngine.UIElements.TimerState) : boolean
            public static op_Equality ($state1: UnityEngine.UIElements.TimerState, $state2: UnityEngine.UIElements.TimerState) : boolean
            public static op_Inequality ($state1: UnityEngine.UIElements.TimerState, $state2: UnityEngine.UIElements.TimerState) : boolean
        }
        /** 
        Unit of measurement used to express the value of an Angle.
        */
        enum AngleUnit
        { Degree = 0, Gradian = 1, Radian = 2, Turn = 3 }
        class CustomStyleProperty$1<T> extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.CustomStyleProperty$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public get name(): string;
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.CustomStyleProperty$1<T>) : boolean
            public static op_Equality ($a: any, $b: any) : any
            public static op_Inequality ($a: any, $b: any) : any
            public constructor ($propertyName: string)
        }
        /** 
        Represents a mathematical function that describes the rate at which a numerical value changes.
        */
        enum EasingMode
        { Ease = 0, EaseIn = 1, EaseOut = 2, EaseInOut = 3, Linear = 4, EaseInSine = 5, EaseOutSine = 6, EaseInOutSine = 7, EaseInCubic = 8, EaseOutCubic = 9, EaseInOutCubic = 10, EaseInCirc = 11, EaseOutCirc = 12, EaseInOutCirc = 13, EaseInElastic = 14, EaseOutElastic = 15, EaseInOutElastic = 16, EaseInBack = 17, EaseOutBack = 18, EaseInOutBack = 19, EaseInBounce = 20, EaseOutBounce = 21, EaseInOutBounce = 22 }
        /** 
        Determines how intermediate values are calculated for a transition.
        */
        class EasingFunction extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.EasingFunction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The value of the EasingMode.
            */
            public get mode(): UnityEngine.UIElements.EasingMode;
            public set mode(value: UnityEngine.UIElements.EasingMode);
            public static op_Implicit ($easingMode: UnityEngine.UIElements.EasingMode) : UnityEngine.UIElements.EasingFunction
            public static op_Equality ($lhs: UnityEngine.UIElements.EasingFunction, $rhs: UnityEngine.UIElements.EasingFunction) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.EasingFunction, $rhs: UnityEngine.UIElements.EasingFunction) : boolean
            public Equals ($other: UnityEngine.UIElements.EasingFunction) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($mode: UnityEngine.UIElements.EasingMode)
        }
        /** 
        Describes a VisualElement font.
        */
        class FontDefinition extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.FontDefinition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Font to use to display text. You cannot set this and FontDefinition.fontAsset at the same time.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** 
            SDF font to use to display text. You cannot set this and FontDefinition.font at the same time.
            */
            public get fontAsset(): UnityEngine.TextCore.Text.FontAsset;
            public set fontAsset(value: UnityEngine.TextCore.Text.FontAsset);
            /** 
            Create a FontDefinition from Font.
            * @param $f The font to use to display text.
            * @returns A new FontDefinition object. 
            */
            public static FromFont ($f: UnityEngine.Font) : UnityEngine.UIElements.FontDefinition
            /** 
            Create a FontDefinition from FontAsset.
            * @param $f The SDF font to use to display text.
            * @returns A new FontDefinition object. 
            */
            public static FromSDFFont ($f: UnityEngine.TextCore.Text.FontAsset) : UnityEngine.UIElements.FontDefinition
            public Equals ($other: UnityEngine.UIElements.FontDefinition) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.FontDefinition, $right: UnityEngine.UIElements.FontDefinition) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.FontDefinition, $right: UnityEngine.UIElements.FontDefinition) : boolean
        }
        /** 
        Defines the alignment behavior along an axis.
        */
        enum Align
        { Auto = 0, FlexStart = 1, Center = 2, FlexEnd = 3, Stretch = 4 }
        /** 
        Defines how an element is displayed in the layout.
        */
        enum DisplayStyle
        { Flex = 0, None = 1 }
        /** 
        Style value that can be either a float or a StyleKeyword.
        */
        class StyleFloat extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleFloat>, UnityEngine.UIElements.IStyleValue$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The float value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleFloat, $rhs: UnityEngine.UIElements.StyleFloat) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleFloat, $rhs: UnityEngine.UIElements.StyleFloat) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleFloat
            public static op_Implicit ($v: number) : UnityEngine.UIElements.StyleFloat
            public Equals ($other: UnityEngine.UIElements.StyleFloat) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: number)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        interface IStyleValue$1<T>
        {
            value : T
            keyword : UnityEngine.UIElements.StyleKeyword
        }
        /** 
        Defines the main-axis of the flex layout.
        */
        enum FlexDirection
        { Column = 0, ColumnReverse = 1, Row = 2, RowReverse = 3 }
        /** 
        By default, items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.
        */
        enum Wrap
        { NoWrap = 0, Wrap = 1, WrapReverse = 2 }
        /** 
        Defines the alignment along the main axis, how is extra space distributed.
        */
        enum Justify
        { FlexStart = 0, Center = 1, FlexEnd = 2, SpaceBetween = 3, SpaceAround = 4, SpaceEvenly = 5 }
        /** 
        Defines how the position values are interpreted by the layout engine.
        */
        enum Position
        { Relative = 0, Absolute = 1 }
        /** 
        Provides rotation information for visual elements that rotates around the TransformOrigin. Positive values represent clockwise rotation.
        */
        class Rotate extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Rotate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The angle applied by the rotation. Positive values represent clockwise rotation and negative values represent counterclockwise rotation.
            */
            public get angle(): UnityEngine.UIElements.Angle;
            public set angle(value: UnityEngine.UIElements.Angle);
            /** 
            Return a value of Rotate that applies no rotation
            */
            public static None () : UnityEngine.UIElements.Rotate
            public static op_Equality ($lhs: UnityEngine.UIElements.Rotate, $rhs: UnityEngine.UIElements.Rotate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Rotate, $rhs: UnityEngine.UIElements.Rotate) : boolean
            public Equals ($other: UnityEngine.UIElements.Rotate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($angle: UnityEngine.UIElements.Angle)
        }
        /** 
        Represents the scale applied as element transformations. The center point that doesn't move when the scaling is applied is the TransformOrigin.
        */
        class Scale extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Scale>
        {
            protected [__keep_incompatibility]: never;
            public get value(): UnityEngine.Vector3;
            public set value(value: UnityEngine.Vector3);
            /** 
            Returns a value of Scale without any scaling applied.
            */
            public static None () : UnityEngine.UIElements.Scale
            public static op_Implicit ($scale: UnityEngine.Vector2) : UnityEngine.UIElements.Scale
            public static op_Equality ($lhs: UnityEngine.UIElements.Scale, $rhs: UnityEngine.UIElements.Scale) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Scale, $rhs: UnityEngine.UIElements.Scale) : boolean
            public Equals ($other: UnityEngine.UIElements.Scale) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($scale: UnityEngine.Vector2)
            public constructor ($scale: UnityEngine.Vector3)
        }
        /** 
        Specifies how the text Element treats hidden overflow content.
        */
        enum TextOverflow
        { Clip = 0, Ellipsis = 1 }
        /** 
        Represents a time value.
        */
        class TimeValue extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TimeValue>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The time value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The unit of the value property.
            */
            public get unit(): UnityEngine.UIElements.TimeUnit;
            public set unit(value: UnityEngine.UIElements.TimeUnit);
            public static op_Implicit ($value: number) : UnityEngine.UIElements.TimeValue
            public static op_Equality ($lhs: UnityEngine.UIElements.TimeValue, $rhs: UnityEngine.UIElements.TimeValue) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.TimeValue, $rhs: UnityEngine.UIElements.TimeValue) : boolean
            public Equals ($other: UnityEngine.UIElements.TimeValue) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($value: number)
            public constructor ($value: number, $unit: UnityEngine.UIElements.TimeUnit)
        }
        /** 
        Defines how the editor rendering the text by default
        */
        enum EditorTextRenderingMode
        { SDF = 0, Bitmap = 1 }
        /** 
        Specifies which part of the text the Element replaces with an ellipsis when textOverflow is set to TextOverflow.Ellipsis.
        */
        enum TextOverflowPosition
        { End = 0, Start = 1, Middle = 2 }
        /** 
        Style value that specifies whether or not a VisualElement is visible.
        */
        enum Visibility
        { Visible = 0, Hidden = 1 }
        /** 
        Controls how white space and line breaks within an element's text are handled.
        */
        enum WhiteSpace
        { Normal = 0, NoWrap = 1, Pre = 2, PreWrap = 3 }
        class StyleEnum$1<T> extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleEnum$1<T>>, UnityEngine.UIElements.IStyleValue$1<T>
        {
            protected [__keep_incompatibility]: never;
            public get value(): T;
            public set value(value: T);
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: any, $rhs: any) : any
            public static op_Inequality ($lhs: any, $rhs: any) : any
            public static op_Implicit ($keyword: any) : any
            public static op_Implicit ($v: any) : any
            public Equals ($other: UnityEngine.UIElements.StyleEnum$1<T>) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: T)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        interface IStyle
        {
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            alignContent : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Align>
            /** 
            Alignment of children on the cross axis of this container.
            */
            alignItems : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Align>
            /** 
            Similar to align-items, but only for this specific element.
            */
            alignSelf : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Align>
            /** 
            Background color to paint in the element's box.
            */
            backgroundColor : UnityEngine.UIElements.StyleColor
            /** 
            Background image to paint in the element's box.
            */
            backgroundImage : UnityEngine.UIElements.StyleBackground
            /** 
            Background image x position value.
            */
            backgroundPositionX : UnityEngine.UIElements.StyleBackgroundPosition
            /** 
            Background image y position value.
            */
            backgroundPositionY : UnityEngine.UIElements.StyleBackgroundPosition
            /** 
            Background image repeat value.
            */
            backgroundRepeat : UnityEngine.UIElements.StyleBackgroundRepeat
            /** 
            Background image size value.
            */
            backgroundSize : UnityEngine.UIElements.StyleBackgroundSize
            /** 
            Color of the element's bottom border.
            */
            borderBottomColor : UnityEngine.UIElements.StyleColor
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomLeftRadius : UnityEngine.UIElements.StyleLength
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomRightRadius : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            borderBottomWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Color of the element's left border.
            */
            borderLeftColor : UnityEngine.UIElements.StyleColor
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            borderLeftWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Color of the element's right border.
            */
            borderRightColor : UnityEngine.UIElements.StyleColor
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            borderRightWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Color of the element's top border.
            */
            borderTopColor : UnityEngine.UIElements.StyleColor
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopLeftRadius : UnityEngine.UIElements.StyleLength
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopRightRadius : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            borderTopWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Bottom distance from the element's box during layout.
            */
            bottom : UnityEngine.UIElements.StyleLength
            /** 
            Color to use when drawing the text of an element.
            */
            color : UnityEngine.UIElements.StyleColor
            /** 
            Mouse cursor to display when the mouse pointer is over an element.
            */
            cursor : UnityEngine.UIElements.StyleCursor
            /** 
            Defines how an element is displayed in the layout.
            */
            display : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.DisplayStyle>
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            flexBasis : UnityEngine.UIElements.StyleLength
            /** 
            Direction of the main axis to layout children in a container.
            */
            flexDirection : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.FlexDirection>
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            flexGrow : UnityEngine.UIElements.StyleFloat
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            flexShrink : UnityEngine.UIElements.StyleFloat
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            flexWrap : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Wrap>
            /** 
            Font size to draw the element's text.
            */
            fontSize : UnityEngine.UIElements.StyleLength
            /** 
            Fixed height of an element for the layout.
            */
            height : UnityEngine.UIElements.StyleLength
            /** 
            Justification of children on the main axis of this container.
            */
            justifyContent : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Justify>
            /** 
            Left distance from the element's box during layout.
            */
            left : UnityEngine.UIElements.StyleLength
            /** 
            Increases or decreases the space between characters.
            */
            letterSpacing : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            marginBottom : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            marginLeft : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            marginRight : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            marginTop : UnityEngine.UIElements.StyleLength
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            maxHeight : UnityEngine.UIElements.StyleLength
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            maxWidth : UnityEngine.UIElements.StyleLength
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            minHeight : UnityEngine.UIElements.StyleLength
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            minWidth : UnityEngine.UIElements.StyleLength
            /** 
            Specifies the transparency of an element and of its children.
            */
            opacity : UnityEngine.UIElements.StyleFloat
            /** 
            How a container behaves if its content overflows its own box.
            */
            overflow : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Overflow>
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            paddingBottom : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            paddingLeft : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            paddingRight : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            paddingTop : UnityEngine.UIElements.StyleLength
            /** 
            Element's positioning in its parent container.
            */
            position : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Position>
            /** 
            Right distance from the element's box during layout.
            */
            right : UnityEngine.UIElements.StyleLength
            /** 
            A rotation transformation.
            */
            rotate : UnityEngine.UIElements.StyleRotate
            /** 
            A scaling transformation.
            */
            scale : UnityEngine.UIElements.StyleScale
            /** 
            The element's text overflow mode.
            */
            textOverflow : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.TextOverflow>
            /** 
            Drop shadow of the text.
            */
            textShadow : UnityEngine.UIElements.StyleTextShadow
            /** 
            Top distance from the element's box during layout.
            */
            top : UnityEngine.UIElements.StyleLength
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            transformOrigin : UnityEngine.UIElements.StyleTransformOrigin
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            transitionDelay : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.TimeValue>
            /** 
            Time a transition animation should take to complete.
            */
            transitionDuration : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.TimeValue>
            /** 
            Properties to which a transition effect should be applied.
            */
            transitionProperty : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.StylePropertyName>
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            transitionTimingFunction : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.EasingFunction>
            /** 
            A translate transformation.
            */
            translate : UnityEngine.UIElements.StyleTranslate
            /** 
            Tinting color for the element's backgroundImage.
            */
            unityBackgroundImageTintColor : UnityEngine.UIElements.StyleColor
            /** 
            TextElement editor rendering mode.
            */
            unityEditorTextRenderingMode : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.EditorTextRenderingMode>
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            unityFont : UnityEngine.UIElements.StyleFont
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            unityFontDefinition : UnityEngine.UIElements.StyleFontDefinition
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            unityFontStyleAndWeight : UnityEngine.UIElements.StyleEnum$1<UnityEngine.FontStyle>
            /** 
            Specifies which box the element content is clipped against.
            */
            unityOverflowClipBox : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.OverflowClipBox>
            /** 
            Increases or decreases the space between paragraphs.
            */
            unityParagraphSpacing : UnityEngine.UIElements.StyleLength
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            unitySliceBottom : UnityEngine.UIElements.StyleInt
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            unitySliceLeft : UnityEngine.UIElements.StyleInt
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            unitySliceRight : UnityEngine.UIElements.StyleInt
            /** 
            Scale applied to an element's slices.
            */
            unitySliceScale : UnityEngine.UIElements.StyleFloat
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            unitySliceTop : UnityEngine.UIElements.StyleInt
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            unityTextAlign : UnityEngine.UIElements.StyleEnum$1<UnityEngine.TextAnchor>
            /** 
            Switches between Unity's standard and advanced text generator
            */
            unityTextGenerator : UnityEngine.UIElements.StyleEnum$1<UnityEngine.TextGeneratorType>
            /** 
            Outline color of the text.
            */
            unityTextOutlineColor : UnityEngine.UIElements.StyleColor
            /** 
            Outline width of the text.
            */
            unityTextOutlineWidth : UnityEngine.UIElements.StyleFloat
            /** 
            The element's text overflow position.
            */
            unityTextOverflowPosition : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.TextOverflowPosition>
            /** 
            Specifies whether or not an element is visible.
            */
            visibility : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Visibility>
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            whiteSpace : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.WhiteSpace>
            /** 
            Fixed width of an element for the layout.
            */
            width : UnityEngine.UIElements.StyleLength
            /** 
            Increases or decreases the space between words.
            */
            wordSpacing : UnityEngine.UIElements.StyleLength
        }
        /** 
        Style value that can be either a Color or a StyleKeyword.
        */
        class StyleColor extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleColor>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.Color>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Color value.
            */
            public get value(): UnityEngine.Color;
            public set value(value: UnityEngine.Color);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.UIElements.StyleColor) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.UIElements.StyleColor) : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.Color) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.Color) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleColor
            public static op_Implicit ($v: UnityEngine.Color) : UnityEngine.UIElements.StyleColor
            public Equals ($other: UnityEngine.UIElements.StyleColor) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.Color)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Background or a StyleKeyword.
        */
        class StyleBackground extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleBackground>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Background>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Background value.
            */
            public get value(): UnityEngine.UIElements.Background;
            public set value(value: UnityEngine.UIElements.Background);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackground, $rhs: UnityEngine.UIElements.StyleBackground) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackground, $rhs: UnityEngine.UIElements.StyleBackground) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackground
            public static op_Implicit ($v: UnityEngine.UIElements.Background) : UnityEngine.UIElements.StyleBackground
            public static op_Implicit ($v: UnityEngine.Texture2D) : UnityEngine.UIElements.StyleBackground
            public Equals ($other: UnityEngine.UIElements.StyleBackground) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Background)
            public constructor ($v: UnityEngine.Texture2D)
            public constructor ($v: UnityEngine.Sprite)
            public constructor ($v: UnityEngine.UIElements.VectorImage)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a style value that can be either a BackgroundPosition or a StyleKeyword.
        */
        class StyleBackgroundPosition extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleBackgroundPosition>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.BackgroundPosition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The BackgroundPosition value.
            */
            public get value(): UnityEngine.UIElements.BackgroundPosition;
            public set value(value: UnityEngine.UIElements.BackgroundPosition);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackgroundPosition, $rhs: UnityEngine.UIElements.StyleBackgroundPosition) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackgroundPosition, $rhs: UnityEngine.UIElements.StyleBackgroundPosition) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackgroundPosition
            public static op_Implicit ($v: UnityEngine.UIElements.BackgroundPosition) : UnityEngine.UIElements.StyleBackgroundPosition
            public Equals ($other: UnityEngine.UIElements.StyleBackgroundPosition) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.BackgroundPosition)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a style value that can be either a BackgroundRepeat or a StyleKeyword.
        */
        class StyleBackgroundRepeat extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleBackgroundRepeat>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.BackgroundRepeat>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The BackgroundRepeat value.
            */
            public get value(): UnityEngine.UIElements.BackgroundRepeat;
            public set value(value: UnityEngine.UIElements.BackgroundRepeat);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackgroundRepeat, $rhs: UnityEngine.UIElements.StyleBackgroundRepeat) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackgroundRepeat, $rhs: UnityEngine.UIElements.StyleBackgroundRepeat) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackgroundRepeat
            public static op_Implicit ($v: UnityEngine.UIElements.BackgroundRepeat) : UnityEngine.UIElements.StyleBackgroundRepeat
            public Equals ($other: UnityEngine.UIElements.StyleBackgroundRepeat) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.BackgroundRepeat)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a style value that can be either a BackgroundSize or a StyleKeyword.
        */
        class StyleBackgroundSize extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleBackgroundSize>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.BackgroundSize>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The BackgroundSize value.
            */
            public get value(): UnityEngine.UIElements.BackgroundSize;
            public set value(value: UnityEngine.UIElements.BackgroundSize);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackgroundSize, $rhs: UnityEngine.UIElements.StyleBackgroundSize) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackgroundSize, $rhs: UnityEngine.UIElements.StyleBackgroundSize) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackgroundSize
            public static op_Implicit ($v: UnityEngine.UIElements.BackgroundSize) : UnityEngine.UIElements.StyleBackgroundSize
            public Equals ($other: UnityEngine.UIElements.StyleBackgroundSize) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.BackgroundSize)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Length or a StyleKeyword.
        */
        class StyleLength extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleLength>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Length>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Length value.
            */
            public get value(): UnityEngine.UIElements.Length;
            public set value(value: UnityEngine.UIElements.Length);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleLength, $rhs: UnityEngine.UIElements.StyleLength) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleLength, $rhs: UnityEngine.UIElements.StyleLength) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleLength
            public static op_Implicit ($v: number) : UnityEngine.UIElements.StyleLength
            public static op_Implicit ($v: UnityEngine.UIElements.Length) : UnityEngine.UIElements.StyleLength
            public Equals ($other: UnityEngine.UIElements.StyleLength) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: number)
            public constructor ($v: UnityEngine.UIElements.Length)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Cursor or a StyleKeyword.
        */
        class StyleCursor extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleCursor>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Cursor>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Cursor value.
            */
            public get value(): UnityEngine.UIElements.Cursor;
            public set value(value: UnityEngine.UIElements.Cursor);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleCursor, $rhs: UnityEngine.UIElements.StyleCursor) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleCursor, $rhs: UnityEngine.UIElements.StyleCursor) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleCursor
            public static op_Implicit ($v: UnityEngine.UIElements.Cursor) : UnityEngine.UIElements.StyleCursor
            public Equals ($other: UnityEngine.UIElements.StyleCursor) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Cursor)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Defines what should happened if content overflows an element bounds.
        */
        enum Overflow
        { Visible = 0, Hidden = 1 }
        /** 
        Represents a style value that can be either a Rotate or a StyleKeyword.
        */
        class StyleRotate extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleRotate>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Rotate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Rotate value.
            */
            public get value(): UnityEngine.UIElements.Rotate;
            public set value(value: UnityEngine.UIElements.Rotate);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleRotate, $rhs: UnityEngine.UIElements.StyleRotate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleRotate, $rhs: UnityEngine.UIElements.StyleRotate) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleRotate
            public static op_Implicit ($v: UnityEngine.UIElements.Rotate) : UnityEngine.UIElements.StyleRotate
            public Equals ($other: UnityEngine.UIElements.StyleRotate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Rotate)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Scale or a StyleKeyword.
        */
        class StyleScale extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleScale>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Scale>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Scale value.
            */
            public get value(): UnityEngine.UIElements.Scale;
            public set value(value: UnityEngine.UIElements.Scale);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Implicit ($scale: UnityEngine.Vector2) : UnityEngine.UIElements.StyleScale
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleScale, $rhs: UnityEngine.UIElements.StyleScale) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleScale, $rhs: UnityEngine.UIElements.StyleScale) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleScale
            public static op_Implicit ($v: UnityEngine.UIElements.Scale) : UnityEngine.UIElements.StyleScale
            public Equals ($other: UnityEngine.UIElements.StyleScale) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Scale)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
            public constructor ($scale: UnityEngine.Vector2)
        }
        /** 
        Style value that can be either a TextShadow or a StyleKeyword.
        */
        class StyleTextShadow extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleTextShadow>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.TextShadow>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The TextShadow value.
            */
            public get value(): UnityEngine.UIElements.TextShadow;
            public set value(value: UnityEngine.UIElements.TextShadow);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleTextShadow, $rhs: UnityEngine.UIElements.StyleTextShadow) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleTextShadow, $rhs: UnityEngine.UIElements.StyleTextShadow) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleTextShadow
            public static op_Implicit ($v: UnityEngine.UIElements.TextShadow) : UnityEngine.UIElements.StyleTextShadow
            public Equals ($other: UnityEngine.UIElements.StyleTextShadow) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.TextShadow)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Script interface for VisualElement text-shadow style property IStyle.textShadow.
        */
        class TextShadow extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TextShadow>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The offset of the shadow.
            */
            public offset : UnityEngine.Vector2
            /** 
            The blur radius of the shadow.
            */
            public blurRadius : number
            /** 
            The color of the shadow.
            */
            public color : UnityEngine.Color
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.TextShadow) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.TextShadow, $style2: UnityEngine.UIElements.TextShadow) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.TextShadow, $style2: UnityEngine.UIElements.TextShadow) : boolean
        }
        /** 
        Represents a style value that can be either a TransformOrigin or a StyleKeyword.
        */
        class StyleTransformOrigin extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleTransformOrigin>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.TransformOrigin>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The TransformOrigin value.
            */
            public get value(): UnityEngine.UIElements.TransformOrigin;
            public set value(value: UnityEngine.UIElements.TransformOrigin);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleTransformOrigin, $rhs: UnityEngine.UIElements.StyleTransformOrigin) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleTransformOrigin, $rhs: UnityEngine.UIElements.StyleTransformOrigin) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleTransformOrigin
            public static op_Implicit ($v: UnityEngine.UIElements.TransformOrigin) : UnityEngine.UIElements.StyleTransformOrigin
            public Equals ($other: UnityEngine.UIElements.StyleTransformOrigin) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.TransformOrigin)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents the point of origin where the (Scale, Translate, Rotate) transformations are applied.
        */
        class TransformOrigin extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TransformOrigin>
        {
            protected [__keep_incompatibility]: never;
            public get x(): UnityEngine.UIElements.Length;
            public set x(value: UnityEngine.UIElements.Length);
            public get y(): UnityEngine.UIElements.Length;
            public set y(value: UnityEngine.UIElements.Length);
            public get z(): number;
            public set z(value: number);
            /** 
            Returns the initial value for the TransformOrigin property.
            */
            public static Initial () : UnityEngine.UIElements.TransformOrigin
            public static op_Equality ($lhs: UnityEngine.UIElements.TransformOrigin, $rhs: UnityEngine.UIElements.TransformOrigin) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.TransformOrigin, $rhs: UnityEngine.UIElements.TransformOrigin) : boolean
            public Equals ($other: UnityEngine.UIElements.TransformOrigin) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length, $z: number)
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length)
        }
        class StyleList$1<T> extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleList$1<T>>, UnityEngine.UIElements.IStyleValue$1<System.Collections.Generic.List$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public get value(): System.Collections.Generic.List$1<T>;
            public set value(value: System.Collections.Generic.List$1<T>);
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: any, $rhs: any) : any
            public static op_Inequality ($lhs: any, $rhs: any) : any
            public static op_Implicit ($keyword: any) : any
            public static op_Implicit ($v: any) : any
            public Equals ($other: UnityEngine.UIElements.StyleList$1<T>) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: System.Collections.Generic.List$1<T>)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Translate or a StyleKeyword.
        */
        class StyleTranslate extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleTranslate>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Translate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Translate value.
            */
            public get value(): UnityEngine.UIElements.Translate;
            public set value(value: UnityEngine.UIElements.Translate);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleTranslate, $rhs: UnityEngine.UIElements.StyleTranslate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleTranslate, $rhs: UnityEngine.UIElements.StyleTranslate) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleTranslate
            public static op_Implicit ($v: UnityEngine.UIElements.Translate) : UnityEngine.UIElements.StyleTranslate
            public Equals ($other: UnityEngine.UIElements.StyleTranslate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Translate)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a translation of the object. Percentage values in X and Y are relative to the width and height of the visual element where the style value is applied.
        */
        class Translate extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Translate>
        {
            protected [__keep_incompatibility]: never;
            public get x(): UnityEngine.UIElements.Length;
            public set x(value: UnityEngine.UIElements.Length);
            public get y(): UnityEngine.UIElements.Length;
            public set y(value: UnityEngine.UIElements.Length);
            public get z(): number;
            public set z(value: number);
            /** 
            Returns the value of a Translate object with no translation applied.
            */
            public static None () : UnityEngine.UIElements.Translate
            public static op_Equality ($lhs: UnityEngine.UIElements.Translate, $rhs: UnityEngine.UIElements.Translate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Translate, $rhs: UnityEngine.UIElements.Translate) : boolean
            public Equals ($other: UnityEngine.UIElements.Translate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length, $z: number)
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length)
        }
        /** 
        Style value that can be either a Font or a StyleKeyword.
        */
        class StyleFont extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleFont>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.Font>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Font value.
            */
            public get value(): UnityEngine.Font;
            public set value(value: UnityEngine.Font);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleFont, $rhs: UnityEngine.UIElements.StyleFont) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleFont, $rhs: UnityEngine.UIElements.StyleFont) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleFont
            public static op_Implicit ($v: UnityEngine.Font) : UnityEngine.UIElements.StyleFont
            public Equals ($other: UnityEngine.UIElements.StyleFont) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.Font)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a FontDefinition or a StyleKeyword.
        */
        class StyleFontDefinition extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleFontDefinition>, UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.FontDefinition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The actual value of the definition.
            */
            public get value(): UnityEngine.UIElements.FontDefinition;
            public set value(value: UnityEngine.UIElements.FontDefinition);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleFontDefinition
            public static op_Implicit ($f: UnityEngine.UIElements.FontDefinition) : UnityEngine.UIElements.StyleFontDefinition
            public Equals ($other: UnityEngine.UIElements.StyleFontDefinition) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.StyleFontDefinition, $right: UnityEngine.UIElements.StyleFontDefinition) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.StyleFontDefinition, $right: UnityEngine.UIElements.StyleFontDefinition) : boolean
            public constructor ($f: UnityEngine.UIElements.FontDefinition)
            public constructor ($f: UnityEngine.TextCore.Text.FontAsset)
            public constructor ($f: UnityEngine.Font)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Boxes against which the VisualElement content is clipped.
        */
        enum OverflowClipBox
        { PaddingBox = 0, ContentBox = 1 }
        /** 
        Style value that can be either an integer or a StyleKeyword.
        */
        class StyleInt extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StyleInt>, UnityEngine.UIElements.IStyleValue$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The integer value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleInt, $rhs: UnityEngine.UIElements.StyleInt) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleInt, $rhs: UnityEngine.UIElements.StyleInt) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleInt
            public static op_Implicit ($v: number) : UnityEngine.UIElements.StyleInt
            public Equals ($other: UnityEngine.UIElements.StyleInt) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: number)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Describes the picking behavior.
        */
        enum PickingMode
        { Position = 0, Ignore = 1 }
        /** 
        Indicates the directionality of the element's text.
        */
        enum LanguageDirection
        { Inherit = 0, LTR = 1, RTL = 2 }
        /** 
        This structure manipulates the set of StyleSheet objects attached to the owner VisualElement.
        */
        class VisualElementStyleSheetSet extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.VisualElementStyleSheetSet>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Number of style sheets attached to the owner element.
            */
            public get count(): number;
            /** 
            Adds a style sheet for the owner element.
            */
            public Add ($styleSheet: UnityEngine.UIElements.StyleSheet) : void
            /** 
            Removes all style sheets for the owner element.
            */
            public Clear () : void
            /** 
            Removes a style sheet for the owner element.
            */
            public Remove ($styleSheet: UnityEngine.UIElements.StyleSheet) : boolean
            /** 
            Looks for the specified StyleSheet
            * @returns Returns true if the style sheet is attached to the owner element, false otherwise. 
            */
            public Contains ($styleSheet: UnityEngine.UIElements.StyleSheet) : boolean
            public get_Item ($index: number) : UnityEngine.UIElements.StyleSheet
            /** 
            Compares instances of the VisualElementStyleSheetSet struct for equality.
            * @param $other The structure to compare with.
            * @returns Returns true if the two instances refer to the same element, false otherwise. 
            */
            public Equals ($other: UnityEngine.UIElements.VisualElementStyleSheetSet) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.VisualElementStyleSheetSet, $right: UnityEngine.UIElements.VisualElementStyleSheetSet) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.VisualElementStyleSheetSet, $right: UnityEngine.UIElements.VisualElementStyleSheetSet) : boolean
        }
        /** 
        Describes how to interpret a Length value.
        */
        enum LengthUnit
        { Pixel = 0, Percent = 1 }
        /** 
        Keyword that can be used on any style value types.
        */
        enum StyleKeyword
        { Undefined = 0, Null = 1, Auto = 2, None = 3, Initial = 4 }
        /** 
        Describes how to interpret a TimeValue.
        */
        enum TimeUnit
        { Second = 0, Millisecond = 1 }
        /** 
        Specifies the alignment keywords for TransformOrigin.
        */
        enum TransformOriginOffset
        { Left = 1, Right = 2, Top = 3, Bottom = 4, Center = 5 }
        /** 
        Represents the root VisualElement of UXML file.
        */
        class TemplateContainer extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IBindable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The local ID of the template in the parent UXML file (Read Only).
            */
            public get templateId(): string;
            /** 
            Stores the template asset reference, if the generated element is cloned from a VisualTreeAsset as a
            Template declaration inside another VisualTreeAsset.
            */
            public get templateSource(): UnityEngine.UIElements.VisualTreeAsset;
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public constructor ()
            public constructor ($templateId: string)
        }
        /** 
        Global configuration options for UI Toolkit input.
        */
        class UIToolkitInputConfiguration extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Use this method to activate one of the two input backends available for UIToolkit events at runtime.
            The new Input System compatible backend allows the Input System package to send its input to UI Toolkit
            directly, removing the need for an UnityEngine.EventSystems.EventSystem in the user scene,
            and will automatically fall back to Input Manager input if the Input System package input isn't enabled in
            the Player Settings active input handling.
            Alternatively, use the legacy backend to always rely on Input Manager input only. In that case,
            if the Input Manager is not enabled as an active input handler, UI Toolkit runtime events will not work.
            * @param $backend 
            The input backend to be used as the source of input for UI Toolkit events at runtime.
            */
            public static SetRuntimeInputBackend ($backend: UnityEngine.UIElements.UIToolkitInputBackendOption) : void
        }
        /** 
        Input backend options for UI Toolkit events at runtime.
        */
        enum UIToolkitInputBackendOption
        { Default = 0, InputSystemCompatibleBackend = 0, LegacyBackend = 1 }
        /** 
        UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.
        See UQuery for further information.
        */
        class UQuery extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class UQueryState$1<T> extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.UQueryState$1<T>>, System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            public RebuildOn ($element: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.UQueryState$1<T>
            public First () : T
            public Last () : T
            public ToList ($results: System.Collections.Generic.List$1<T>) : void
            public ToList () : System.Collections.Generic.List$1<T>
            public AtIndex ($index: number) : T
            public ForEach ($funcCall: System.Action$1<T>) : void
            public GetEnumerator () : UnityEngine.UIElements.UQueryState$1.Enumerator<T>
            public Equals ($other: UnityEngine.UIElements.UQueryState$1<T>) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($state1: any, $state2: any) : any
            public static op_Inequality ($state1: any, $state2: any) : any
            public [Symbol.iterator]() : IterableIterator<T>
        }
        class UQueryBuilder$1<T> extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.UQueryBuilder$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public Class ($classname: string) : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Name ($id: string) : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Where ($selectorPredicate: System.Func$2<T, boolean>) : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Active () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotActive () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Visible () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotVisible () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Hovered () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotHovered () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Checked () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotChecked () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Enabled () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotEnabled () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Focused () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public NotFocused () : UnityEngine.UIElements.UQueryBuilder$1<T>
            public Build () : UnityEngine.UIElements.UQueryState$1<T>
            public static op_Implicit ($s: any) : any
            public static op_Equality ($builder1: any, $builder2: any) : any
            public static op_Inequality ($builder1: any, $builder2: any) : any
            public First () : T
            public Last () : T
            public ToList () : System.Collections.Generic.List$1<T>
            public ToList ($results: System.Collections.Generic.List$1<T>) : void
            public AtIndex ($index: number) : T
            public ForEach ($funcCall: System.Action$1<T>) : void
            public Equals ($other: UnityEngine.UIElements.UQueryBuilder$1<T>) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($visualElement: UnityEngine.UIElements.VisualElement)
        }
        /** 
        UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.
        */
        class UQueryExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Convenience overload, shorthand for UQueryExtensions.Query|Query().UQueryBuilder_1.Build|Build().UQueryBuilder_1.First|First()
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            public static Q ($e: UnityEngine.UIElements.VisualElement, $name?: string, ...classes: string[]) : UnityEngine.UIElements.VisualElement
            /** 
            Convenience overload, shorthand for Query<T>.Build().First().
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            public static Q ($e: UnityEngine.UIElements.VisualElement, $name?: string, $className?: string) : UnityEngine.UIElements.VisualElement
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            public static Query ($e: UnityEngine.UIElements.VisualElement, $name?: string, ...classes: string[]) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            public static Query ($e: UnityEngine.UIElements.VisualElement, $name?: string, $className?: string) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            public static Query ($e: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>
        }
        /** 
        Defines UxmlTraits for the UXML root element.
        */
        class UxmlRootElementTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an enumerable containing UxmlChildElementDescription(typeof(VisualElement)), since the root element can contain VisualElements.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root UXML element.
        */
        class UxmlRootElementFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlRootElementTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns "UXML".
            */
            public get uxmlName(): string;
            /** 
            Returns the qualified name for this element.
            */
            public get uxmlQualifiedName(): string;
            /** 
            Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.
            */
            public get substituteForTypeName(): string;
            /** 
            Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.
            */
            public get substituteForTypeNamespace(): string;
            /** 
            Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.
            */
            public get substituteForTypeQualifiedName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        /** 
        Defines UxmlTraits for the Style tag.
        */
        class UxmlStyleTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root Style element.
        */
        class UxmlStyleFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlStyleTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlQualifiedName(): string;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        /** 
        Defines UxmlTraits for the Template tag.
        */
        class UxmlTemplateTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root Template element.
        */
        class UxmlTemplateFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlTemplateTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlQualifiedName(): string;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        /** 
        Defines UxmlTraits for the AttributeOverrides tag.
        */
        class UxmlAttributeOverridesTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root AttributeOverrides element.
        */
        class UxmlAttributeOverridesFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlAttributeOverridesTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlQualifiedName(): string;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        class UxmlAssetAttributeDescription$1<T> extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<T> implements UnityEngine.UIElements.IUxmlAssetAttributeDescription
        {
            protected [__keep_incompatibility]: never;
            public get defaultValueAsString(): string;
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<T>) : boolean
            public constructor ()
        }
        /** 
        Base class to restricts the value of an attribute.
        */
        class UxmlTypeRestriction extends System.Object implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Indicates whether the current UxmlTypeRestriction object is equal to another object of the same type.
            * @param $other The object to compare with.
            * @returns True if the otheer object is equal to this one. 
            */
            public Equals ($other: UnityEngine.UIElements.UxmlTypeRestriction) : boolean
        }
        /** 
        Describes a UXML attribute representing a Color as a string.
        */
        class UxmlColorAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<UnityEngine.Color>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<UnityEngine.Color>) : boolean
            public constructor ()
        }
        class UxmlTypeAttributeDescription$1<TBase> extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<System.Type>
        {
            protected [__keep_incompatibility]: never;
            public get defaultValueAsString(): string;
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<System.Type>) : boolean
            public constructor ()
        }
        class UxmlEnumAttributeDescription$1<T> extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<T>
        {
            protected [__keep_incompatibility]: never;
            public get defaultValueAsString(): string;
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<T>) : boolean
            public constructor ()
        }
        /** 
        Declares a custom control.
        */
        class UxmlElementAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            Provides a custom name for an element.
            */
            public name : string
            public constructor ()
            public constructor ($uxmlName: string)
        }
        /** 
        Declares that a field or property is associated with a UXML attribute.
        */
        class UxmlAttributeAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            Provides a custom UXML name to the attribute.
            */
            public name : string
            /** 
            Provides support for obsolete UXML attribute names.
            */
            public obsoleteNames : System.Array$1<string>
            public constructor ()
            public constructor ($name: string)
            public constructor ($name: string, ...obsoleteNames: string[])
        }
        /** 
        Provides information about the expected type when applied to a Type field or property that has the UxmlAttributeAttribute attribute.
        */
        class UxmlTypeReferenceAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            The base type that the value inherits from.
            */
            public baseType : System.Type
            public constructor ()
            public constructor ($baseType: System.Type)
        }
        /** 
        Used for fields that are serialized but do not come from UXML data, such as UxmlSerializedData.uxmlAssetId.
        */
        class UxmlIgnoreAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Declares that a class can be instantiated from UXML and contain UXML attributes.
        */
        class UxmlObjectAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Declares that a field or property is associated with nested UXML objects.
        */
        class UxmlObjectReferenceAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the nested UXML element that the UXML Objects are serialized to. Note: A null or empty value will result in the objects being serialized into the root.
            */
            public name : string
            /** 
            In UI Builder, when adding a UXML Object to a field that has multiple derived types,
            a dropdown list appears with a selection of available types that can be added to the field. By default,
            this list comprises all types that inherit from the UXML object type. You can use a parameter
            to specify a list of accepted types to be displayed, rather than showing all available types
            */
            public types : System.Array$1<System.Type>
            public constructor ()
            public constructor ($uxmlName: string)
            public constructor ($uxmlName: string, ...acceptedTypes: System.Type[])
        }
        /** 
        This is used by the code generator when a custom control is using the UxmlElementAttribute.
        */
        class UxmlSerializedDataUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            This is used by the code generator when a custom control is using the UxmlElementAttribute.
            */
            public static CopySerialized ($value: any) : any
        }
        /** 
        Restricts the value of an attribute to match a regular expression.
        */
        class UxmlValueMatches extends UnityEngine.UIElements.UxmlTypeRestriction implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The regular expression that should be matched by the value.
            */
            public get regex(): string;
            public set regex(value: string);
            public constructor ()
        }
        /** 
        Restricts the value of an attribute to be within the specified bounds.
        */
        class UxmlValueBounds extends UnityEngine.UIElements.UxmlTypeRestriction implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The minimum value for the attribute.
            */
            public get min(): string;
            public set min(value: string);
            /** 
            The maximum value for the attribute.
            */
            public get max(): string;
            public set max(value: string);
            /** 
            True if the bounds exclude min.
            */
            public get excludeMin(): boolean;
            public set excludeMin(value: boolean);
            /** 
            True if the bounds exclude max.
            */
            public get excludeMax(): boolean;
            public set excludeMax(value: boolean);
            public constructor ()
        }
        /** 
        Restricts the value of an attribute to be taken from a list of values.
        */
        class UxmlEnumeration extends UnityEngine.UIElements.UxmlTypeRestriction implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The list of values the attribute can take.
            */
            public get values(): System.Collections.Generic.IEnumerable$1<string>;
            public set values(value: System.Collections.Generic.IEnumerable$1<string>);
            public constructor ()
        }
        /** 
        VisualElementExtensions is a set of extension methods useful for VisualElement.
        */
        class VisualElementExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Aligns a VisualElement's left, top, right and bottom edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            public static StretchToParentSize ($elem: UnityEngine.UIElements.VisualElement) : void
            /** 
            Aligns a VisualElement's left and right edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            public static StretchToParentWidth ($elem: UnityEngine.UIElements.VisualElement) : void
            /** 
            Add a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be added to the VisualElement.
            */
            public static AddManipulator ($ele: UnityEngine.UIElements.VisualElement, $manipulator: UnityEngine.UIElements.IManipulator) : void
            /** 
            Remove a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be removed from the VisualElement.
            */
            public static RemoveManipulator ($ele: UnityEngine.UIElements.VisualElement, $manipulator: UnityEngine.UIElements.IManipulator) : void
            /** 
            Transforms a point from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in world space.
            * @returns A point in the local space of the element. 
            */
            public static WorldToLocal ($ele: UnityEngine.UIElements.VisualElement, $p: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a point from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in local space.
            * @returns A point in the world space. 
            */
            public static LocalToWorld ($ele: UnityEngine.UIElements.VisualElement, $p: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a rectangle from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in world space.
            * @returns A rectangle in the local space of the element. 
            */
            public static WorldToLocal ($ele: UnityEngine.UIElements.VisualElement, $r: UnityEngine.Rect) : UnityEngine.Rect
            /** 
            Transforms a rectangle from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in local space.
            * @returns A rectangle in the world space. 
            */
            public static LocalToWorld ($ele: UnityEngine.UIElements.VisualElement, $r: UnityEngine.Rect) : UnityEngine.Rect
            /** 
            Transforms a point from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $point The point to transform, in the local space of the source element.
            * @returns A point in the local space of destination element. 
            */
            public static ChangeCoordinatesTo ($src: UnityEngine.UIElements.VisualElement, $dest: UnityEngine.UIElements.VisualElement, $point: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a rectangle from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $rect The rectangle to transform, in the local space of the source element.
            * @returns A rectangle in the local space of destination element. 
            */
            public static ChangeCoordinatesTo ($src: UnityEngine.UIElements.VisualElement, $dest: UnityEngine.UIElements.VisualElement, $rect: UnityEngine.Rect) : UnityEngine.Rect
        }
        class VisualElementDebugExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static DebugIncrementVersionChange ($ve: UnityEngine.UIElements.VisualElement, $changeType: UnityEngine.UIElements.VersionChangeType) : void
        }
        /** 
        Options used as arguments for EventInterestAttribute when the affected method treats events in a general,
        non type-specific manner.
        */
        enum EventInterestOptions
        { Inherit = 0, AllEventTypes = -1 }
        /** 
        Optional attribute on overrides of CallbackEventHandler.HandleEventBubbleUp.
        */
        class EventInterestAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor (...eventTypes: System.Type[])
            public constructor ($interests: UnityEngine.UIElements.EventInterestOptions)
        }
        /** 
        Define focus change directions for the VisualElementFocusRing.
        */
        class VisualElementFocusChangeDirection extends UnityEngine.UIElements.FocusChangeDirection implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The focus is moving to the left.
            */
            public static get left(): UnityEngine.UIElements.FocusChangeDirection;
            /** 
            The focus is moving to the right.
            */
            public static get right(): UnityEngine.UIElements.FocusChangeDirection;
        }
        /** 
        Implementation of a linear focus ring. Elements are sorted according to their focusIndex.
        */
        class VisualElementFocusRing extends System.Object implements UnityEngine.UIElements.IFocusRing
        {
            protected [__keep_incompatibility]: never;
            /** 
            The focus order for elements having 0 has a focusIndex.
            */
            public get defaultFocusOrder(): UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder;
            public set defaultFocusOrder(value: UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder);
            /** 
            Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right in the focus ring.
            */
            public GetFocusChangeDirection ($currentFocusable: UnityEngine.UIElements.Focusable, $e: UnityEngine.UIElements.EventBase) : UnityEngine.UIElements.FocusChangeDirection
            /** 
            Get the next element in the given direction.
            */
            public GetNextFocusable ($currentFocusable: UnityEngine.UIElements.Focusable, $direction: UnityEngine.UIElements.FocusChangeDirection) : UnityEngine.UIElements.Focusable
            public constructor ($root: UnityEngine.UIElements.VisualElement, $dfo?: UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder)
        }
        interface IVisualElementScheduledItem
        {
            /** 
            Returns the VisualElement this object is associated with.
            */
            element : UnityEngine.UIElements.VisualElement
            /** 
            Will be true when this item is scheduled. Note that an item's callback will only be executed when it's VisualElement is attached to a panel.
            */
            isActive : boolean
            /** 
            If not already active, will schedule this item on its VisualElement's scheduler.
            */
            Resume () : void
            /** 
            Removes this item from its VisualElement's scheduler.
            */
            Pause () : void
            /** 
            Cancels any previously scheduled execution of this item and re-schedules the item.
            * @param $delayMs Minimum time in milliseconds before this item will be executed.
            */
            ExecuteLater ($delayMs: bigint) : void
            /** 
            Adds a delay to the first invokation.
            * @param $delayMs The minimum number of milliseconds after activation where this item's action will be executed.
            * @returns This ScheduledItem. 
            */
            StartingIn ($delayMs: bigint) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Repeats this action after a specified time.
            * @param $intervalMs Minimum amount of time in milliseconds between each action execution.
            * @returns This ScheduledItem. 
            */
            Every ($intervalMs: bigint) : UnityEngine.UIElements.IVisualElementScheduledItem
            Until ($stopCondition: System.Func$1<boolean>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            After specified duration, the item will be automatically unscheduled.
            * @param $durationMs The total duration in milliseconds where this item will be active.
            * @returns This ScheduledItem. 
            */
            ForDuration ($durationMs: bigint) : UnityEngine.UIElements.IVisualElementScheduledItem
        }
        class InputWrapper extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public get compositionString(): string;
            public get imeCompositionMode(): UnityEngine.IMECompositionMode;
            public set imeCompositionMode(value: UnityEngine.IMECompositionMode);
            public get compositionCursorPos(): UnityEngine.Vector2;
            public set compositionCursorPos(value: UnityEngine.Vector2);
            public get mousePresent(): boolean;
            public get mousePosition(): UnityEngine.Vector2;
            public get mouseScrollDelta(): UnityEngine.Vector2;
            public get touchSupported(): boolean;
            public get touchCount(): number;
            public GetMouseButtonDown ($button: number) : boolean
            public GetMouseButtonUp ($button: number) : boolean
            public GetMouseButton ($button: number) : boolean
            public GetTouch ($index: number) : UnityEngine.Touch
            public GetAxisRaw ($axisName: string) : number
            public GetButtonDown ($buttonName: string) : boolean
            public constructor ()
        }
    }
}
